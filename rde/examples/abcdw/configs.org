:PROPERTIES:
:UPDATED:  [2023-03-13 Mon 15:08]
:ID:       12f7748c-7095-4969-8261-94ad0169a24c
:CREATED:  [2022-08-30 Tue 11:12]
:END:
#+title: system config; gnu guix (rde) & emacs
#+property: header-args    :tangle-mode (identity #o444) :noweb yes
#+property: header-args:sh :tangle-mode (identity #o755)
#+property: header-args:scheme     :noweb-ref conf-rde
#+property: header-args:elisp      :noweb-ref conf-emacs
#+property: header-args:emacs-lisp :noweb-ref conf-emacs


* etc
:PROPERTIES:
:ID:       88c5af73-609a-4019-ba2f-543528a7b6e2
:CREATED:  [2022-09-28 Wed 14:29]
:UPDATED:  [2022-09-28 Wed 14:29]
:ROAM_EXCLUDE: t
:END:

** external resources
:PROPERTIES:
:ID:       e5794fcd-5a9a-420b-b286-9451cff72f06
:CREATED:  [2022-08-01 Mon 17:42]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

*** rofi theme: base16-dark
:PROPERTIES:
:ID:       2669cfa7-4f1b-460c-acde-711d8f49a90f
:CREATED:  [2022-09-28 Wed 14:29]
:UPDATED:  [2022-09-28 Wed 14:29]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
p="$HOME/git/sys/rde/rde/examples/abcdw/config/rofi/themes"
mkdir -p $p

curl https://raw.githubusercontent.com/qzdl/rde/qzdl/rde/examples/abcdw/config/rofi/themes/base16-default-dark.rasi \
     -o $p/base16-default-dark.rasi
#+end_src

#+RESULTS:

** test
:PROPERTIES:
:ID:       cdeb56a4-5c09-4531-bba6-0c0c31bbdd55
:CREATED:  [2022-08-01 Mon 12:27]
:UPDATED:  [2022-08-01 Mon 12:27]
:ROAM_EXCLUDE: t
:END:

*** e2e: make ixy-home
:PROPERTIES:
:ID:       b72fea65-890d-44b4-b746-2f13a8cba015
:CREATED:  [2022-09-28 Wed 16:41]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src shell :results drawer
make ixy-home >&/tmp/o

cat /tmp/o
#+end_src

#+RESULTS:
:results:
GUILE_LOAD_PATH=../../../ RDE_TARGET=%-home \
guix home reconfigure ./configs.scm
"pre-%abcdw-features"
"pre-%main-features"
rde/examples/abcdw/configs.scm:1032:1: missing closing parenthesis
make: *** [Makefile:14: %-home-reconfigure] Error 1
:end:

*** describe: file hashes
:PROPERTIES:
:ID:       c7eb4b3e-4413-4759-b9b2-7bb0b2893f02
:CREATED:  [2022-09-28 Wed 16:42]
:UPDATED:  [2022-09-28 Wed 16:42]
:ROAM_EXCLUDE: t
:END:

** concerns                                                                    :task:
:PROPERTIES:
:ID:       b5ed68eb-64ff-4878-9f79-9baddfd6e45c
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
*** emacs                                                                     :emacs:
:PROPERTIES:
:ID:       15c5b396-318c-4de7-ba73-0cb446b4b40a
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO investigate completion interface; /why does ~C-k~ not work in ~{M-s l}~ / consult commands?/ (vertico?)
:PROPERTIES:
:ID:       9b2e7d9f-4feb-4229-b74f-ba52bef11176
:CREATED:  [2022-09-28 Wed 16:44]
:UPDATED:  [2022-09-28 Wed 16:44]
:ROAM_EXCLUDE: t
:END:

{M-s l abc C-a C-k}
**** TODO fix hyperbole loading
:PROPERTIES:
:ID:       dafa5eec-e33b-47a8-bd20-a6d9c1eb6378
:CREATED:  [2022-09-28 Wed 16:45]
:UPDATED:  [2022-09-28 Wed 16:45]
:ROAM_EXCLUDE: t
:END:

as of [2022-09-28 Wed 16:45] (and for the last few weeks) loading hypb yields error for ~klink~;

eval

(require 'hyperbole)

and observe the following
#+begin_example
Debugger entered--Lisp error: (file-missing "Cannot open load file" "No such file or directory" "klink")
  load("klink")
  byte-code("\300\301\302\"\210\303\304\305\306#\210\307\310!\210\311\312!\207" [setplist ibtypes::man-apropos (definition-name man-apropos quote (to-p nil style nil)) symset:add man-apropos ibtypes symbols run-hooks htype-create-hook load "klink"] 4)
  require(hibtypes)
  mapc(require (hvar hui-menu hui-mouse hypb hui hui-mini hbmap hibtypes))
  byte-code("\300\301\302\"\210\303\304!\204\20\0\305\304\306\"\210\300\207" [mapc require (hvar hui-menu hui-mouse hypb hui hui-mini hbmap hibtypes) fboundp br-in-browser defalias #f(compiled-function () #<bytecode 0x1d8376ab5ddfaff0>)] 3)
  require(hinit)
  require(hyperbole)
  eval((require 'hyperbole) t)
  eval-expression((require 'hyperbole) nil nil 127)
  funcall-interactively(eval-expression (require 'hyperbole) nil nil 127)
  call-interactively(eval-expression nil nil)
  command-execute(eval-expression)

#+end_example
**** org
:PROPERTIES:
:ID:       7c716491-ce73-4f8c-8fac-4286ce637e88
:CREATED:  [2022-09-28 Wed 16:48]
:UPDATED:  [2022-09-28 Wed 16:48]
:ROAM_EXCLUDE: t
:END:
***** TODO port CREATED/UPDATED from file stat info from git
:PROPERTIES:
:ID:       5262d510-7a89-4a2c-bf78-143c11404444
:CREATED:  [2022-09-28 Wed 16:48]
:UPDATED:  [2022-10-05 Wed 19:29]
:ROAM_EXCLUDE: t
:END:
****** attribute created from headline, using [[id:5367ec4f-24d6-4416-a8d9-18df8cb1c0c2][created && updated]]
:PROPERTIES:
:ID:       c0f96018-5457-458c-908c-05fcddc9d052
:CREATED:  [2022-09-28 Wed 16:49]
:UPDATED:  [2022-09-28 Wed 16:49]
:ROAM_EXCLUDE: t
:END:

***** TODO fix dispatch stuff ([[id:f31ab35b-59e7-4d2c-a123-5957a7da14c8][node-dispatch]])
:PROPERTIES:
:ID:       0e8868c1-c243-42fb-bd7c-5bbb8a21ddce
:CREATED:  [2022-09-28 Wed 11:43]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:
****** TODO elisp parser in RDE (clobbers vectors)
:PROPERTIES:
:ID:       d4870719-33ce-4433-98ef-3867e1698969
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2022-09-28 Wed 17:44]
:ROAM_EXCLUDE: t
:END:
******* TODO update rde
:PROPERTIES:
:ID:       3c4ea3e2-da0d-4265-911a-0a1e8c272e01
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:44]
:ROAM_EXCLUDE: t
:END:
******** DONE rebase rde
CLOSED: [2022-09-28 Wed 14:39]
:PROPERTIES:
:ID:       b94f35eb-0413-466f-8b3b-18b57047a7f7
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-09-28 Wed 14:39] \\
  just trash configs.scm lol
CLOCK: [2022-09-28 Wed 14:13]--[2022-09-28 Wed 14:39] =>  0:26
:END:

******** DONE pull guix
CLOSED: [2022-09-28 Wed 15:28]
:PROPERTIES:
:ID:       758f97f0-c6e3-448b-9679-689495d6e5a9
:CREATED:  [2022-09-28 Wed 14:39]
:UPDATED:  [2022-09-28 Wed 14:39]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-09-28 Wed 14:39]--[2022-09-28 Wed 14:45] =>  0:06
:END:

hello

******** DONE fix (unrelated errors) elisp config
CLOSED: [2022-09-28 Wed 15:28]
:PROPERTIES:
:ID:       699d3ef0-e0db-4bfc-879e-ccbbbdbb0824
:CREATED:  [2022-09-28 Wed 15:28]
:UPDATED:  [2022-09-28 Wed 15:29]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-09-28 Wed 15:28] \\
  :PROPERTIES:
  :UPDATED:  [2022-09-28 Wed 15:29]
:END:

tangle -> validate -> continue

extra paren check needed for all tangled files
CLOCK: [2022-09-28 Wed 14:45]--[2022-09-28 Wed 15:28] =>  0:43
:END:

******** TODO fix rde config
:PROPERTIES:
:ID:       b18f6878-1081-4ced-a467-f54ee66fb1ac
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:29]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-09-28 Wed 15:28]--[2022-09-28 Wed 17:29] =>  2:01
:END:

********* DONE =rde/examples/abcdw/configs.scm:813:5: error: feature-emacs-appearance: unbound variable=
:PROPERTIES:
:ID:       97722b28-eb97-44b7-9769-a2bbdcabdf9e
:CREATED:  [2022-09-28 Wed 15:30]
:UPDATED:  [2022-09-28 Wed 17:44]
:ROAM_EXCLUDE: t
:END:
******* TODO test elisp parser for vector support
:PROPERTIES:
:ID:       e3a0accc-135d-43dd-81be-e6e3e3aeb5db
:CREATED:  [2022-09-28 Wed 14:12]
:UPDATED:  [2022-11-08 Tue 12:22]
:ROAM_EXCLUDE: t
:END:

***** TODO fix org stuff
:PROPERTIES:
:ID:       7f5afdfa-fc3b-47ae-a804-f2c01f215fc0
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 17:38]
:ROAM_EXCLUDE: t
:END:
**** keyword / sequence to include NEXT
:PROPERTIES:
:ID:       64a44bf1-71f7-491c-95c0-562189180635
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
***** TODO ... search in RDE
:PROPERTIES:
:ID:       cb7d58f5-4c44-44cd-bdbd-221cddaae481
:CREATED:  [2022-09-28 Wed 14:13]
:UPDATED:  [2022-09-28 Wed 14:13]
:ROAM_EXCLUDE: t
:END:
*** guix                                                                       :guix:
:PROPERTIES:
:ID:       2d285252-67e4-4455-a4bc-5a486ebc7718
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO upstream [[id:1bca3f7a-3f6b-4ffa-bf10-0856b0eb8a01][emacs-sql-indent]]
:PROPERTIES:
:ID:       fd3d9257-d718-4b7b-8ceb-b2d27da0b32b
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:
**** TODO upstream [[id:58790647-3625-4145-87d8-2a5baa335b0f][emacs-ob-go]]
:PROPERTIES:
:ID:       2e30d804-96c8-448b-8cc8-8f41c570086c
:CREATED:  [2022-09-28 Wed 16:40]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:
*** rde                                                                         :rde:
:PROPERTIES:
:ID:       31909571-94cc-4718-a971-558ac7074120
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-09-28 Wed 16:41]
:ROAM_EXCLUDE: t
:END:

**** TODO org heading binds =C-M-=
:PROPERTIES:
:ID:       86921d8a-358e-4383-bbb2-3d0b47602315
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-08-15 Mon 12:01]
:ROAM_EXCLUDE: t
:END:

**** TODO org agenda exports
:PROPERTIES:
:ID:       bd9f9bf3-e5e9-4f43-adc6-a30b64378c66
:CREATED:  [2022-08-15 Mon 12:01]
:UPDATED:  [2022-08-29 Mon 16:40]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-08-15 Mon 12:02]--[2022-08-15 Mon 12:18] =>  0:16
:END:

- made commit 7e655baad683b49c53a2683012576b7fb35dafa1

**** TODO system-wide media status
:PROPERTIES:
:ID:       5923dc5e-4e2f-473a-9145-d0858d5d811d
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

***** feature: respect play / pause / skip from media controls (airpods)
:PROPERTIES:
:ID:       bbee3792-cbb4-4064-b9c8-7dcb742031a5
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

**** TODO kde-connect
:PROPERTIES:
:ID:       1548dc33-dceb-4e69-8326-32f9559e4e21
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-26 Fri 11:49]
:ROAM_EXCLUDE: t
:END:

**** TODO investigate elisp-serializer clobbering vectors ~[:select abc ...]~ as paren'd functions
:PROPERTIES:
:ID:       d1fc1e48-c5e9-4f02-a718-3419f61f81a0
:CREATED:  [2022-09-28 Wed 16:46]
:UPDATED:  [2022-09-28 Wed 16:46]
:ROAM_EXCLUDE: t
:END:

**** TODO emacs popups
:PROPERTIES:
:ID:       3f1f675d-00f4-4f31-93dc-10beed905999
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:

***** calendar
:PROPERTIES:
:ID:       3b5d8aed-2122-4e86-b438-e0e306c26536
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:

***** password-store
:PROPERTIES:
:ID:       6a28ec41-45ed-430c-abc9-89c7faed2e24
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
***** org-capture
:PROPERTIES:
:ID:       79feb294-8327-47d1-b583-f9ed9475855c
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
****** protocol (inbox, node)
:PROPERTIES:
:ID:       7fbfe5c7-7196-4861-b306-20bd50774e2b
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
****** daily
:PROPERTIES:
:ID:       ed8adb71-72ab-4156-bab8-4fe2f4712812
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:
***** gpg pinentry
:PROPERTIES:
:ID:       e605cc8f-8cc4-48c4-b874-e5a67007de83
:CREATED:  [2022-09-28 Wed 16:47]
:UPDATED:  [2022-09-28 Wed 16:47]
:ROAM_EXCLUDE: t
:END:

* configs
:PROPERTIES:
:ID:       7c9c9408-15b7-4d3e-be98-9b2bda19e7d5
:CREATED:  [2022-09-28 Wed 16:24]
:UPDATED:  [2022-10-05 Wed 15:59]
:ROAM_EXCLUDE: t
:END:

** rde config
:PROPERTIES:
:ID:       c5578b40-1344-4d48-9b24-5c8f13fa3f77
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-09-28 Wed 16:23]
:ROAM_EXCLUDE: t
:END:

*** AAA tangle rde
:PROPERTIES:
:ID:       98f42608-b5c0-455d-bb02-9a326af8bc42
:CREATED:  [2022-08-01 Mon 09:49]
:UPDATED:  [2022-11-09 Wed 10:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :tangle configs.scm :noweb-ref base-rde
<<conf-rde>>
#+end_src

*** defmodule
:PROPERTIES:
:ID:       6bb15998-32c1-4674-890a-85180a89d66a
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-10-28 Fri 13:24]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
  (define-module (rde examples abcdw configs)
    #:use-module (gnu bootloader)
    #:use-module (gnu bootloader grub)

    #:use-module (gnu home services) ; nope
    #:use-module (gnu home-services shells)
    #:use-module (gnu home-services ssh)

    #:use-module (gnu packages emacs-xyz)
    #:use-module (gnu packages fonts)
    #:use-module (gnu packages)

    #:use-module (gnu services base)
    #:use-module (gnu services desktop)
    #:use-module (gnu services ssh)
    #:use-module (gnu services xorg)

    #:use-module (gnu system file-systems)
    #:use-module (gnu system keyboard)
    #:use-module (gnu system mapped-devices)

    #:use-module (guix channels)
    #:use-module (guix gexp)
    #:use-module (guix inferior)
    #:use-module (guix utils)

    #:use-module (ice-9 match)
    #:use-module (ice-9 pretty-print)

    #:use-module (rde examples abcdw emacs)
    #:use-module (rde features base)
    #:use-module (rde features bittorrent)
    #:use-module (rde features clojure)
    #:use-module (rde features docker)
    #:use-module (rde features emacs)
    #:use-module (rde features emacs-xyz)
    #:use-module (rde features fontutils)
    #:use-module (rde features gnupg)
    #:use-module (rde features keyboard)
    #:use-module (rde features linux)
    #:use-module (rde features mail)
    #:use-module (rde features markup)
    #:use-module (rde features networking)
    #:use-module (rde features password-utils)
    #:use-module (rde features shells)
    #:use-module (rde features shellutils)
    #:use-module (rde features ssh)
    #:use-module (rde features system)
    #:use-module (rde features terminals)
    #:use-module (rde features tmux)
    #:use-module (rde features version-control)
    #:use-module (rde features video)
    #:use-module (rde features virtualization)
    #:use-module (rde features wm)
    #:use-module (rde features xdg)
    #:use-module (rde features xdisorg)
    #:use-module (rde features)

    #:use-module (rde gexp)

    #:use-module (rde home services i2p)
    #:use-module (rde packages emacs)
    #:use-module (rde packages emacs-xyz)
    #:use-module (rde packages)
    ;;#:use-module (gnu home-services shellutils)
    ;;#:use-module (nongnu packages nvidia)
    ;;#:use-module (rde features bluetooth) ;; TODO qzdl

    #:use-module (srfi srfi-1))
#+end_src

*** user features
:PROPERTIES:
:ID:       738d1f19-afd3-4497-b2ba-2434fc090789
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme

;;; User-specific features

;; Initial user's password hash will be available in store, so it's
;; use this feature with care
;; (display (crypt "hi" "$6$abc"))
#+end_src

*** helpers
:PROPERTIES:
:ID:       b76849d3-0686-46d0-b40d-f590c7f15ed0
:CREATED:  [2022-08-08 Mon 11:38]
:UPDATED:  [2022-08-08 Mon 11:38]
:ROAM_EXCLUDE: t
:END:

**** mailing list
:PROPERTIES:
:ID:       74689f33-9e2f-4cf1-bbdf-317a29e66572
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define* (mail-lst id fqda urls)
  "Make a simple mailing-list."
  (mailing-list
   (id   id)
   (fqda fqda)
   (config (l2md-repo ;; XXX maildir issue might be here
            (name (symbol->string id))
            (urls urls)))))
#+end_src

**** mail serializer (bravehost | gmail-tls)
:PROPERTIES:
:ID:       fb637534-e1ae-493b-bf5e-0cdc5ec1cc2f
:CREATED:  [2022-08-29 Mon 17:06]
:UPDATED:  [2022-09-28 Wed 16:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules (rde features mail))

(define bravehost-folder-mapping
  '(("inbox"  . "INBOX")
    ("accounts" . "INBOX/Accounts")
    ("cv" . "INBOX/CV")
    ("info" . "INBOX/info")
    ("sent"   . "Sent")
    ("drafts" . "Drafts")
    ("trash"  . "Deleted Items")
    ("spam"   . "Junk")))

;; https://wiki.bravenet.com/Using_your_Bravenet_e-mail_account
(define bravehost-isync-settings
  (generate-isync-serializer "mail.bravehost.com" bravehost-folder-mapping))

(define gmail-tls-folder-mapping
  '(("inbox"   . "INBOX")
    ("sent"    . "[Gmail]/Sent Mail")
    ("drafts"  . "[Gmail]/Drafts")
    ("archive" . "[Gmail]/All Mail")
    ("trash"   . "[Gmail]/Trash")
    ("spam"    . "[Gmail]/Spam")))

(define gmail-tls-isync-settings
  (generate-isync-serializer "imap.gmail.com" gmail-tls-folder-mapping))
#+end_src

****
:PROPERTIES:
:ID:       1fcfe6cc-78f9-43e5-89a7-3a27d68597f6
:CREATED:  [2022-11-21 Mon 14:13]
:UPDATED:  [2022-11-21 Mon 14:13]
:ROAM_EXCLUDE: t
:END:

**** keyboard
:PROPERTIES:
:ID:       2ff244bf-5916-4a3b-afa6-6b2e34cb7e21
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:

***** thinkpad
:PROPERTIES:
:ID:       f0d98fbe-0033-47e3-81c3-c592f70c0b8a
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-08-02 Tue 13:31]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %thinkpad-layout
  (keyboard-layout
   "us" "altgr-intl"
   #:model "thinkpad"
   #:options '("ctrl:nocaps")))
#+end_src

*** zshrc
:PROPERTIES:
:ID:       a95216e5-aecd-4a61-b0c3-3bf266189a6d
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define %extra-zshrc
  (list ;; XXX higher level category
   ;; something which evals equiv to following for each promptline "PS1=\"[$(date -u '+%Y-%m-%d | %H:%M')] $PS1\""
   "alias ns='cd $HOME/git/ns'"
   "alias om='ns && cd om'"
   "alias omom='om && cd om'"
   "alias rt='ns && cd routing'"
   "alias sys='cd $HOME/git/sys'"

   ;; TIL https://unix.stackexchange.com/questions/225943/except-the-1st-argument
   "rgw() { d=$1; p=$2; argv[1,2]=(); rg $p $d $@; }"
   "alias rgg='rgw $HOME/git/'"
   "alias rgr='rgw $HOME/git/sys/rde'"
   "alias rgns='rgw $HOME/git/ns'"
   "alias rgom='rgw $HOME/git/ns/om'"
   "alias rgrt='rgw $HOME/git/ns/routing'"
   "alias rgsys='rgw $HOME/git/sys'"

   "alias gp='ls $GUIX_EXTRA_PROFILES'"
   "_gP() { export GUIX_PROFILE=$1 ; }"
   "alias gP='_gP'"
   "_gsP() { . $GUIX_EXTRA_PROFILES/$1/$1 ; }"
   "gsP=_gsP"
   ))
#+end_src

*** org dirs
:PROPERTIES:
:ID:       844e60fb-8235-4249-8aa8-27c8348c5dcb
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define my-org-directory "~/life")
(define my-notes-directory
  (string-append my-org-directory "/roam"))
#+end_src

*** flag: gaming?
:PROPERTIES:
:ID:       a5883df9-7c45-442b-82a4-fe57ac98f7f8
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 18:25]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define gaming? #f)
#+end_src

*** features
:PROPERTIES:
:ID:       be090096-e0cd-43f2-a24a-cff37457f33a
:CREATED:  [2022-07-29 Fri 18:24]
:UPDATED:  [2022-07-29 Fri 18:24]
:ROAM_EXCLUDE: t
:END:

**** my features
:PROPERTIES:
:ID:       b290c986-542c-46ef-9729-defbd20da2ea
:CREATED:  [2022-08-29 Mon 17:10]
:UPDATED:  [2022-08-29 Mon 17:10]
:ROAM_EXCLUDE: t
:END:

***** bluetooth
:PROPERTIES:
:ID:       a65bf448-712a-4f32-840c-b7524c7a7120
:CREATED:  [2022-08-29 Mon 17:10]
:UPDATED:  [2022-08-29 Mon 17:49]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
;; (define-module (rde features bluetooth)
;;   #:use-module (rde features)
;;   #:use-module (rde features predicates)
;;   ;#:use-module (gnu home-services bluetooth) ;; TODO implement as 'fork' (in rde), then upstream to guix home proper
;;   #:use-module (gnu services)
;;   #:use-module (gnu services desktop)
;;   #:export (feature-bluetooth)
;;   ;;#:re-export (home-bluetooth-configuration) ;; ^^ as above
;;   )

(use-modules ;;(rde features bluetooth)
 (rde features)
 (rde features predicates)
 (gnu services)
 (gnu services desktop))

;; TODO ensure group "lp" exists and is applicable for USER
(define* (feature-bluetooth
          #:key
          ;;(bluetooth-configuration (home-bluetooth-configuration))
          (dual-mode #f)
          (auto-enable? #t)) ;; XXX should this stick to guix defaults, or tailor to ease for users?
  "Setup and configure Bluetooth."
  ;;(ensure-pred home-bluetooth-configuration? bluetooth-configuration)

  (define (bluetooth-home-services config)
    "Returns home services related to bluetooth."
    (list ;;(service bluetooth-service-type bluetooth-configuration)
     (bluetooth-service #:auto-enable? auto-enable?)))

  (feature
   (name 'bluetooth)
   (values '((bluetooth . #t)))
   ;; TODO port etc-service reference to make home-service > system-service
   (system-services-getter bluetooth-home-services)))
#+end_src

**** debug; pre features
:PROPERTIES:
:ID:       36dc9e54-a5c8-43c8-a464-6349186edd50
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 18:23]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(pretty-print "pre-%abcdw-features")
#+end_src
**** abcdw features
:PROPERTIES:
:ID:       1532c6ba-0d0c-499e-bddd-ae1caa1dc778
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-10-28 Fri 16:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %abcdw-features
  (remove
   unspecified?
   (list
    (feature-user-info
     #:emacs-advanced-user? #t
     #:user-name "samuel"
     #:full-name "Samuel Culpepper"
     #:email "samuel@samuelculpepper.com"
     #:user-groups '("lp" "wheel")) ;; TODO confluence of features -> groups

    (feature-gnupg
     #:gpg-primary-key "EE20E25391AAB9BB")

    (feature-password-store)

    (feature-mail-settings
     #:mail-accounts
     (list
      (mail-account
       (id   'personal)
       (fqda "samuel@samuelculpepper.com")
       (type 'bravehost))
      (mail-account
       (id   'work)
       (fqda "sculpepper@newstore.com")
       (type 'gmail-tls))
      (mail-account
       (id   'gmail)
       (fqda "imzaniiyt@gmail.com")
       (type 'gmail-tls)))
     #:mailing-lists
     (list
      ;; https://public-inbox.org/README.html
      (mail-lst 'public-inbox-meta "meta@public-inbox.org"
                '("https://public-inbox.org/meta"
                  "nntps://news.public-inbox.org/inbox.comp.mail.public-inbox.meta"
                  "imaps://news.public-inbox.org/inbox.comp.mail.public-inbox.meta.0"))

     ;;;; source: https://mail.python.org/archives/list/speed@python.org/latest
     ;;;;  -> mbox: https://mail.python.org/archives/list/speed@python.org/export/speed@python.org-2022-02.mbox.gz?start=1970-01-01&end=2022-02-21
     ;;;; (mail-lst 'python-speed "speed@python.org"
     ;;;;           '("https://mail.python.org/mailman/listinfo/speed"
     ;;;;             "https://mail.python.org/archives/list/speed@python.org/"))
      ;;
     ;;;; (mail-lst 'rde-announce "~acbdw/rde-announce@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-announce/export"))
     ;;;; (mail-lst 'rde-discuss "~acbdw/rde-discuss@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-discuss"))
     ;;;; (mail-lst 'rde-devel "~acbdw/rde-devel@lists.sr.ht"
     ;;;;           '("https://lists.sr.ht/~abcdw/rde-devel"))
     ;;;;; emacs
      ;;(mail-lst 'emacs-org-mode "emacs-orgmode@gnu.org"
      ;;          '("https://yhetil.org/orgmode"))
      ;;(mail-lst 'emacs-bugs "bug-gnu-emacs@gnu.org"
      ;;          '("https://yhetil.org/emacs-bugs"))
      ;;
      ;;
      ;;(mail-lst 'emacs-hyperbole "bug-hyperbole@gnu.org"
      ;;          '("https://lists.gnu.org/archive/mbox/bug-hyperbole"
      ;;            "https://lists.gnu.org/archive/html/bug-hyperbole"))
      ;;(mail-lst 'emacs-hyperbole-users "hyperbole-users@gnu.org"
      ;;          '("https://lists.gnu.org/archive/mbox/hyperbole-users"
      ;;            "https://lists.gnu.org/archive/html/hyperbole-users"))
      ;;
      ;;(mail-lst 'guix-bugs "guix-bugs@gnu.org"
      ;;          '("https://yhetil.org/guix-bugs/0"))
      ;;(mail-lst 'guix-devel "guix-devel@gnu.org"
      ;;          '("https://yhetil.org/guix-devel/0"))
      ;;(mail-lst 'guix-patches "guix-patches@gnu.org"
      ;;          '("https://yhetil.org/guix-patches/1"))
      ))

    (feature-keyboard
     ;; To get all available options, layouts and variants run:
     ;; cat `guix build xkeyboard-config`/share/X11/xkb/rules/evdev.lst
     #:keyboard-layout %thinkpad-layout))))
#+end_src

#+RESULTS:

***** TODO bravehost mails
:PROPERTIES:
:ID:       b78b2899-e41b-448b-a3f8-696c19b4fe76
:CREATED:  [2022-08-01 Mon 17:35]
:UPDATED:  [2022-10-05 Wed 11:50]
:ROAM_EXCLUDE: t
:END:
***** debug: print features
:PROPERTIES:
:ID:       4d60cafe-ff70-4540-a5ed-2e9b1a7b4b3e
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-07-29 Fri 17:48]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;;(map pretty-print %abcdw-features)
#+end_src

***** TODO future features
:PROPERTIES:
:ID:       ad67e350-c601-49f4-ba21-ca6486ed96fb
:CREATED:  [2022-07-29 Fri 17:48]
:UPDATED:  [2022-08-22 Mon 17:34]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;;; TODO: feature-wallpapers https://wallhaven.cc/
;;; TODO: feature-icecat
;; PipeWire/iwd:
;; https://github.com/J-Lentz/iwgtk
;; https://github.com/krevedkokun/guix-config/blob/master/system/yggdrasil.scm
;; https://github.com/werman/noise-suppression-for-voice#pipewire
#+end_src

#+RESULTS:

*** packages
:PROPERTIES:
:ID:       5508a976-f9ad-457c-b4bb-46dbf3b73fb0
:CREATED:  [2022-07-29 Fri 17:36]
:UPDATED:  [2022-11-22 Tue 11:45]
:END:

**** pkgs, pkgs-vanilla                                                        :func:
:PROPERTIES:
:ID:       5fb5abba-de52-453a-8cfb-875f6d6897ba
:CREATED:  [2022-08-08 Mon 11:41]
:UPDATED:  [2022-08-08 Mon 12:10]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme

;;; Generic features should be applicable for various hosts/users/etc

(define* (pkgs #:rest lst)
  (map specification->package+output lst))

(define* (pkgs-vanilla #:rest lst)
  "Packages from guix channel."
  (define channel-guix
    (list (channel
           (name 'guix)
           (url "https://git.savannah.gnu.org/git/guix.git")
           (commit
            "2b6af630d61dd5b16424be55088de2b079e9fbaf"))))

  (define inferior (inferior-for-channels channel-guix))
  (define (get-inferior-pkg pkg-name)
    (car (lookup-inferior-packages inferior pkg-name)))

  (map get-inferior-pkg lst))
#+end_src

**** my packages
:PROPERTIES:
:ID:       98d207f1-31fa-40cb-9deb-c39e0026ef22
:CREATED:  [2022-08-08 Mon 11:38]
:UPDATED:  [2022-08-08 Mon 11:38]
:ROAM_EXCLUDE: t
:END:

***** imports
:PROPERTIES:
:ID:       7cdd0670-d06b-4310-9239-e39c1e938624
:CREATED:  [2022-08-08 Mon 11:39]
:UPDATED:  [2022-08-08 Mon 12:06]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

(use-modules
 (gnu packages)
 (guix packages)
 (guix gexp)
 (guix utils)
 (guix download)
 (guix git-download)
 (gnu packages emacs)
 (gnu packages emacs-xyz)
 (guix build-system emacs)
 (guix build-system gnu)
 ((guix licenses) #:prefix license:))

#+end_src

***** emacs-sql-indent
:PROPERTIES:
:ID:       1bca3f7a-3f6b-4ffa-bf10-0856b0eb8a01
:CREATED:  [2022-08-08 Mon 11:39]
:UPDATED:  [2022-09-28 Wed 16:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-sql-indent
  (package
   (name "emacs-sql-indent")
   (version "1.6")
   (source
    (origin
     (method url-fetch)
     (uri (string-append
           "https://elpa.gnu.org/packages/sql-indent-"
           version
           ".tar"))
     (sha256
      (base32 "000pimlg0k4mrv2wpqq8w8l51wpr1lzlaq6ai8iaximm2a92ap5b"))))
   (build-system emacs-build-system)
   (home-page "https://github.com/alex-hhh/emacs-sql-indent")
   (synopsis "Support for indenting code in SQL files.")
   (description
    "`sqlind-minor-mode' is a minor mode that enables syntax-based indentation for
`sql-mode' buffers: the TAB key indents the current line based on the SQL code
on previous lines.  To setup syntax-based indentation for every SQL buffer, add
`sqlind-minor-mode' to `sql-mode-hook'.  Indentation rules are flexible and can
be customized to match your personal coding style.  For more information, see
the \"sql-indent.org\" file.

The package also defines align rules so that the `align' function works for SQL
statements, see `sqlind-align-rules'.")
   (license license:gpl3+)))
#+end_src

***** emacs-org-ml
:PROPERTIES:
:ID:       91194ee1-6cf0-46ff-8685-efc0a076697a
:CREATED:  [2022-10-04 Tue 15:52]
:UPDATED:  [2022-10-04 Tue 15:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-org-ml
  (package
   (name "emacs-org-ml")
   (version "20220711.1528")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/ndwarshuis/org-ml.git")
                  (commit "385e3bee497f858705144d7ab5e6570d31d3ffe8")))
            (sha256
             (base32
              "0j506lp3lgf9iz94ag041bpdcr837j5lmbazq7v3brblm43dvh9p"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org emacs-dash emacs-s))
   (home-page "https://github.com/ndwarshuis/org-ml")
   (synopsis "Functional Org Mode API")
   (description
    "This is a functional API for org-mode primarily using the `org-element' library.
`org-element.el' provides the means for converting an org buffer to a parse-tree
data structure.  This library contains functions to modify this parse-tree in a
more-or-less 'purely' functional manner (with the exception of parsing from the
buffer and writing back to the buffer).  For the purpose of this package, the
resulting parse tree is composed of 'nodes'.

This library exposes the following types of functions: - builder: build new
nodes to be inserted into a parse tree - property functions: return either
property values (get) or nodes with   modified properties (set and map) -
children functions: return either children of nodes (get) or return a node
with modified children (set and map) - node predicates: return t if node meets a
condition - pattern matching: return nodes based on a pattern that matches the
parse   tree (and perform operations on those nodes depending on the function) -
parsers: parse a buffer (optionally at current point) and return a parse   tree
- writers: insert/update the contents of a buffer given a parse tree

For examples please see full documentation at:
https://github.com/ndwarshuis/org-ml")
   (license license:gpl3+)))
#+end_src

***** emacs-moldable-emacs
:PROPERTIES:
:ID:       3c32dec6-4f12-4aa0-ad00-98b433c966e8
:CREATED:  [2022-10-05 Wed 19:07]
:UPDATED:  [2022-10-05 Wed 19:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define-public emacs-moldable-emacs
  (package
   (name "emacs-moldable-emacs")
   (version "20220825.0037")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://github.com/ag91/moldable-emacs")
           (commit "53f8b3af4572ab12be9f1f96da848278507ef350")))
     (sha256
      (base32 "1jcac4hiyh98q8cvim6yjaw1xihsy3r5lnjhijr3p89z2bv481xl"))))
   (build-system emacs-build-system)
   ;;; propagated (external)
   ;; (check these via the mold “WhatMoldsCanIUse?”)
   ;; graph-cli
   ;; graphviz
   ;; imgclip
   (inputs (list emacs-dash
                 emacs-s
                 emacs-async
                 ;; emacs-thunk builtin
                 emacs-esxml
                 emacs-org-ql
                 ;; emacs-tree-sitter
                 ;; emacs-code-compass
                 ))
   (home-page "https://github.com/ag91/moldable-emacs")
   (synopsis "TODO")
   (description
    "TODO")
   (license license:gpl3+)))
#+end_src

***** emacs-ob-go
:PROPERTIES:
:ID:       58790647-3625-4145-87d8-2a5baa335b0f
:CREATED:  [2022-08-08 Mon 16:45]
:UPDATED:  [2022-09-28 Wed 16:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

(define-public emacs-ob-go
  (package
   (name "emacs-ob-go")
   (version "20190201.214")
   (source
    (origin
     (method git-fetch)
     (uri (git-reference
           (url "https://github.com/pope/ob-go")
           (commit "2067ed55f4c1d33a43cb3f6948609d240a8915f5")))
     (sha256
      (base32 "069w9dymiv97cvlpzabf193nyw174r38lz5j11x23x956ladvpbw"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org))
   (home-page "https://github.com/pope/ob-go")
   (synopsis "Org-Babel support for evaluating go code.")
   (description
    "@code{ob-go} enables @{Org-Babel} support for evaluating @code{go}
code. It was created based on the usage of @code{ob-C}. The @code{go}
code is compiled and run via the @code{go run} command. If a
@code{main} function isn’t present, by default the code is wrapped in
a simple @{main func}. If @code{:package} option isn’t set, and no
package is declared in the code, then the @code{main package} is
declared.")
   (license license:gpl3+)))
#+end_src

***** emacs-ox-jira
:PROPERTIES:
:ID:       f8bac9c3-36b2-4c70-a8e1-3bc6d3c981a4
:CREATED:  [2022-10-04 Tue 16:09]
:UPDATED:  [2022-10-04 Tue 16:09]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-ox-jira
  (package
   (name "emacs-ox-jira")
   (version "20220423.1403")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/stig/ox-jira.el.git")
                  (commit "00184f8fdef02a3a359a253712e8769cbfbea3ba")))
            (sha256
             (base32
              "1zyq4d0fvyawvb3w6072zl4zgbnrpzmxlz2l731wqrgnwm0l80gy"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org))
   (home-page "https://github.com/stig/ox-jira.el")
   (synopsis "JIRA Backend for Org Export Engine")
   (description
    "This module plugs into the regular Org Export Engine and transforms Org files to
JIRA markup for pasting into JIRA tickets & comments.

In an Org buffer, hit `C-c C-e j j' to bring up *Org Export Dispatcher* and
export it as a JIRA buffer.  I usually use `C-x h' to mark the whole buffer,
then `M-w' to save it to the kill ring (and global pasteboard) for pasting into
JIRA issues.")
   (license license:gpl3+)))
#+end_src

***** emacs-kubernetes
:PROPERTIES:
:ID:       584e9a93-0058-4bf5-8573-69b35b93e8c0
:CREATED:  [2022-10-12 Wed 13:27]
:UPDATED:  [2022-10-12 Wed 13:39]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme

(define-public emacs-kubernetes
  (package
   (name "emacs-kubernetes")
   (version "20220715.1717")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/kubernetes-el/kubernetes-el.git")
                  (commit "8163fd38015cbde0485f6eaab41450132bf6e19d")))
            (sha256
             (base32
              "06p5qz4h5ar86vv4nzpw08x18fjvs2zg5brx55h80hjdgr89b771"))))
   (build-system emacs-build-system)
   (inputs (list emacs-magit
                 emacs-magit-popup
                 emacs-dash
                 emacs-with-editor
                 emacs-request
                 emacs-s
                 emacs-transient))
   (arguments
    '(#:include '("^[^/]+.el$" "^[^/]+.el.in$"
                  "^dir$"
                  "^[^/]+.info$"
                  "^[^/]+.texi$"
                  "^[^/]+.texinfo$"
                  "^doc/dir$"
                  "^doc/[^/]+.info$"
                  "^doc/[^/]+.texi$"
                  "^doc/[^/]+.texinfo$")
                #:exclude '("^.dir-locals.el$" "^test.el$" "^tests.el$" "^[^/]+-test.el$"
                            "^[^/]+-tests.el$" "^kubernetes-evil.el$")))
   (home-page "https://github.com/kubernetes-el/kubernetes-el")
   (synopsis "Magit-like porcelain for Kubernetes")
   (description
    "kubernetes-el is a text-based, interactive management interface for managing
Kubernetes clusters within Emacs.")
   (license license:gpl3+)))
#+end_src

***** python-pylsp-mypy
:PROPERTIES:
:ID:       6c17b978-44b6-412a-bf36-ea7854089c96
:CREATED:  [2022-10-13 Thu 13:17]
:UPDATED:  [2022-10-13 Thu 13:23]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules (guix build-system python)  ; pypi-uri
             (gnu packages python-xyz)   ; python-lsp-server
             (gnu packages python-check) ; python-mypy
             (gnu packages python-build) ; python-toml
             (gnu packages check)        ; python coverage
             )

(define-public python-pylsp-mypy
  (package
   (name "python-pylsp-mypy")
   (version "0.6.3")
   (source (origin
            (method url-fetch)
            (uri (pypi-uri "pylsp-mypy" version))
            (sha256
             (base32
              "1gf865dj9na7jyp1148k27jafwb6bg0rdg9kyv4x4ag8qdlgv9h6"))))
   (build-system python-build-system)
   (propagated-inputs (list python-lsp-server
                            python-mypy
                            python-toml))
   (native-inputs (list python-coverage
                        python-pytest
                        python-pytest-cov
                        python-tox))
   (home-page "https://github.com/python-lsp/pylsp-mypy")
   (synopsis "Mypy linter for the Python LSP Server")
   (description "Mypy linter for the Python LSP Server")
   (license license:gpl3+)))
#+end_src

***** emacs-ox-slack
:PROPERTIES:
:ID:       a24f5f97-483b-440b-adb7-a1cd7732a212
:UPDATED:  [2022-11-08 Tue 12:36]
:END:

#+begin_src scheme
(define-public emacs-ox-slack
  (package
   (name "emacs-ox-slack")
   (version "20200108.1546")
   (source (origin
            (method git-fetch)
            (uri (git-reference
                  (url "https://github.com/titaniumbones/ox-slack.git")
                  (commit "bd797dcc58851d5051dc3516c317706967a44721")))
            (sha256
             (base32
              "1kh2v08fqmsmfj44ik8pljs3fz47fg9zf6q4mr99c0m5ccj5ck7w"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-org emacs-ox-gfm))
   (home-page "https://github.com/titaniumbones/ox-slack")
   (synopsis "Slack Exporter for org-mode")
   (description
    "This library implements a Slack backend for the Org exporter, based on the `md
and `gfm back-ends.")
   (license license:gpl3+)))
#+end_src

***** emacs-svg-clock
:PROPERTIES:
:ID:       9765acda-2dc5-45ea-9196-5abfb1ae29da
:CREATED:  [2022-11-21 Mon 18:22]
:UPDATED:  [2022-11-22 Tue 11:45]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public emacs-svg-clock
  (package
   (name "emacs-svg-clock")
   (version "1.2")
   (source (origin
            (method url-fetch)
            (uri (string-append "https://elpa.gnu.org/packages/svg-clock-"
                                version ".el"))
            (sha256
             (base32
              "15pmj07wnlcpv78av9qpnbfwdjlkf237vib8smpa7nvyikdfszfr"))))
   (build-system emacs-build-system)
   (propagated-inputs (list emacs-svg-lib))
   (home-page "http://elpa.gnu.org/packages/svg-clock.html")
   (synopsis "Analog clock using Scalable Vector Graphics")
   (description
    "svg-clock provides a scalable analog clock.  Rendering is done by means of svg
(Scalable Vector Graphics).  In order to use svg-clock you need to build Emacs
with svg support. (To check whether your Emacs supports svg, do \"M-:
(image-type-available-p svg) RET\" which must return t).  Call `svg-clock to
start a clock.  This will open a new buffer \"*clock*\" displaying a clock which
fills the buffer's window.  Use `svg-clock-insert to insert a clock
programmatically in any buffer, possibly specifying the clock's size, colours
and offset to the current-time.  Arbitrary many clocks can be displayed
independently.  Clock instances ared updated automatically.  Their resources
(timers etc.) are cleaned up automatically when the clocks are removed.")
   (license license:gpl3+)))
#+end_src

*** imports
:PROPERTIES:
:ID:       065c4d90-4d84-4969-8221-44f5008a9502
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(use-modules (gnu services)
             (gnu services databases)
             (gnu services desktop))
#+end_src

*** debug: pre main-features
:PROPERTIES:
:ID:       152578fa-8848-40dc-a0e3-a1a51825a5f7
:CREATED:  [2022-07-29 Fri 18:24]
:UPDATED:  [2022-07-29 Fri 18:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "pre-%main-features")
#+end_src
*** %main-features
:PROPERTIES:
:ID:       3455e06a-0a2b-4ca9-aca6-2ee2fa05f16f
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-09-28 Wed 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

;;; WARNING: The order can be important for features extending
;;; services of other features.  Be careful changing it.

(define %main-features
  (remove
   (lambda (s) (or (not s) (unspecified? s)))
   (list
    ;;; BEGIN; main
    <<main>>
    ;;; END; main
    )))

#+end_src

**** features
:PROPERTIES:
:ID:       ba479dce-2f41-467e-b177-b38d2379f1a7
:CREATED:  [2022-08-01 Mon 11:05]
:UPDATED:  [2022-08-01 Mon 11:05]
:ROAM_EXCLUDE: t
:END:


***** custom-services
:PROPERTIES:
:ID:       52dbdae7-459f-4950-9961-c2a9cd035844
:CREATED:  [2022-08-09 Tue 12:44]
:UPDATED:  [2022-09-28 Wed 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-custom-services
 #:feature-name-prefix 'ixy
 ;; #:system-services
 ;; (list
 ;;  (simple-service 'nvidia-udev-rule udev-service-type
 ;;                  (list nvidia-driver)))
 #:home-services
 (list
  <<services>>
  )
 #:system-services
 (remove
  unspecified?
  (append (if gaming? (@@ (gnu services desktop) %desktop-services) '())
          (list
           <<services-sys>>
           ))))
#+end_src

****** services-home
:PROPERTIES:
:ID:       32e2ffde-ff51-4a10-9256-e032d58629bf
:CREATED:  [2022-09-28 Wed 15:48]
:UPDATED:  [2022-09-28 Wed 15:48]
:ROAM_EXCLUDE: t
:END:
******* envars
:PROPERTIES:
:ID:       5b5d963a-b70c-4867-87b8-8beb1633fa02
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2022-10-04 Tue 16:12]
:ROAM_EXCLUDE: t
:END:
#+name: guile-service-envars
#+begin_src scheme :noweb-ref services
((@ (gnu services) simple-service)
 'make-guix-aware-of-guix-home-subcomand
 (@ (gnu home services) home-environment-variables-service-type)
 `(
         ;;; GRAPHICS
   ;;("LIBGL_DRIVERS_PATH" . (string-join (list "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46/lib/gbm"
   ;;                                           "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46/lib"
   ;;                                           "/gnu/store/bg8mrp0ply34c76xq1i8b4hgjyh6hi8k-nvidia-driver-495.46") ":"))
   ;;("LIBGL_DEBUG" . "verbose")
   ;;("G_MESSAGES_DEBUG" . "1")

   ;;("MESA_LOADER_DRIVER_OVERRIDE" . "nvidia") ;; no nvidia_dri
   ;;("MESA_LOADER_DRIVER_OVERRIDE" . "nvidia-drm") ;; no nvidia-drm_dri

   ;;("MESA_DEBUG" . "1")
   ;;("MESA_LOG_FILE" . "/tmp/mesa.log")

   ;; glfw patched?
   ;; https://github.com/bulletphysics/bullet3/issues/2595#issuecomment-588080665
   ;; ("MESA_GL_VERSION_OVERRIDE" . "3.4")
   ;;("MESA_GLSL_VERSION_OVERRIDE" . "340")

   ;;("GBM_BACKEND" . "nvidia-drm")
        ;;;; guix build --no-grafts -f /home/samuel/git/sys/nonguix/nongnu/packages/nvidia.scm | wl-copy
        ;;;; or
        ;;;; guix build nvidia-driver | wl-copy
   ;;,@(let ((driver-path "/gnu/store/cbj701jzy9dj6cv84ak0b151y9plb5sc-nvidia-driver-495.46"))
   ;;    `(("GBM_BACKENDS_PATH" . ,(string-join (list driver-path
   ;;                                                 (string-append driver-path "/lib")
   ;;                                                 (string-append driver-path "/lib/gbm")
   ;;                                                 "$PATH") ":"))
   ;;      ("VK_ICD_FILENAMES" . ,(string-append driver-path "/share/vulkan/icd.d/nvidia_icd.json"))
   ;;      ("LIBGL_DRIVERS_PATH" . ,(string-join (list driver-path
   ;;                                                  (string-append driver-path "/lib")
   ;;                                                  (string-append driver-path "/lib/gbm")
   ;;                                                  "$PATH") ":"))
   ;;      ;; https://github.com/NVIDIA/egl-wayland/issues/39#issuecomment-927288015
   ;;      ;; undocumented
   ;;      ;; might have an issue for containerised stuff, as set(uid|gid)
   ;;      ("__EGL_EXTERNAL_PLATFORM_CONFIG_DIRS" . ,(string-append driver-path "/share/egl/egl_external_platform.d"))
   ;;      ))
   ;;
   ;;("__GLX_VENDOR_LIBRARY_NAME" . "nvidia")
   ;;("WLR_NO_HARDWARE_CURSORS" . "1")
   ;;("WLR_DRM_NO_ATOMIC" . "1")
   ;; echo "/dev/dri/card$(udevadm info -a -n /dev/dri/card1 | grep boot_vga | rev | cut -c 2)"
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card1")   ;; gpu only
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card1") ;; cpu only
   ;;("WLR_DRM_DEVICES" . "/dev/dri/card0:/dev/dri/card1") ;; gpu:cpu

        ;;; GUILE
   ("GUILE_LOAD_PATH" .
    "$XDG_CONFIG_HOME/guix/current/share/guile/site/3.0\
:$GUILE_LOAD_PATH")
   ("GUILE_LOAD_COMPILED_PATH" .
    "$XDG_CONFIG_HOME/guix/current/lib/guile/3.0/site-ccache\
:$GUILE_LOAD_COMPILED_PATH")

        ;;; JS/BABEL
   ;; javascript sucks, npm sucks
   ;; https://github.com/npm/npm/issues/6675#issuecomment-250318382
   ;; https://github.com/npm/cli/issues/1451
   ;; https://github.com/pnpm/pnpm/issues/2574
   ;; https://github.com/rxrc/zshrc/blob/3ca83703da5bd93b015747835a8a0164160c9b83/env.zsh#L33-L928
   ("NPM_CONFIG_USERCONFIG" . "${XDG_CONFIG_HOME}/npm/config")
   ("NPM_CONFIG_CACHE" . "${XDG_CACHE_HOME}/npm")
   ("NPM_CONFIG_TMP" . "${XDG_RUNTIME_DIR}/npm")
   ("YARN_CACHE_FOLDER" . "${YARN_CACHE_FOLDER:-$XDG_CACHE_HOME/yarn}")
   ("NODE_REPL_HISTORY" . "${NODE_REPL_HISTORY:-$XDG_CACHE_HOME/node/repl_history}")
   ("NVM_DIR" . "${NVM_DIR:-$XDG_DATA_HOME/nvm}")
   ("BABEL_CACHE_PATH" . "${BABEL_CACHE_PATH:-$XDG_CACHE_HOME/babel/cache.json}")

        ;;; DEVELOPMENT
   ("GUIX_CHECKOUT" . "$HOME/git/sys/guix")
   ("GUIX_EXTRA_PROFILES" . "$HOME/.guix-extra-profiles")

        ;;; ETC
   ("GDK_BACKEND" . "wayland") ;; ... for clipboarding emasc
   ;;("DISABLE_RTKIT" . "1") ;; TODO [2022-08-03] pipewire broken ;; commented [2022-08-11 Thu]
   ;; TODO fix this path issue
   ("PATH" . (string-join (list "$PATH"
                                "$HOME/go/bin"
                                "$HOME/.local/bin"
                                "$HOME/.krew/bin"
                                "${XDG_CACHE_HOME}/npm/bin")
                          ":"))))
#+end_src

******* zsh : profile, *rc
:PROPERTIES:
:ID:       533771da-9686-48f0-85ed-e24da7b726d6
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services

(simple-service
 'my-zshrc home-zsh-service-type
 (home-zsh-extension
  (zshrc
   (append %extra-zshrc
           (list #~(format #f "" ;;#$example-program
                           ))))))

;; ((@ (gnu services) simple-service)
;;  'extend-shell-profile
;;  (@ (gnu home-services shells) home-shell-profile-service-type)
;;  (list
;;   #~(string-append
;;      "alias superls="
;;      #$(file-append (@ (gnu packages base) coreutils) "/bin/ls"))))
#+end_src

******* mcron                                                                  :jobs:
:PROPERTIES:
:ID:       c3c092d2-4cee-48eb-abc8-e76e393b5967
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2022-09-28 Wed 16:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services
    ;;; home jobs
;;
;; see logs at ~/.local/var/log/mcron.log
;;   tail --follow ~/.local/var/log/mcron.log
;;
;; see job spec at [[info:mcron#Guile Syntax][mcron#Guile Syntax]]
((@ (gnu services) simple-service)
 'home-jobs (@ (gnu home services mcron) home-mcron-service-type)
 (list
  <<jobs>>
  )
 )
#+end_src

******** notes-commit                                                          :1min:
:PROPERTIES:
:ID:       c8903598-d72e-4539-884b-a60096be7fbe
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2023-02-24 Fri 12:38]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-notes
#+begin_src scheme :noweb-ref jobs
     ;;; job: commit my notes
#~(job
   '(next-minute '(15))
   (lambda ()
     (call-with-output-file "/tmp/commit.log"
       (lambda (port)
         (chdir "./life")
         (display
          (with-exception-handler
              (lambda (exn)
                (format #f "exception: ~s\n" exn))
            (system*
             (format #f "~a add . && ~a commit -m \"auto-commit | $( ~a -uIs )\""
                     #$(file-append (@ (gnu packages version-control) git) "/bin/git")
                     #$(file-append (@ (gnu packages version-control) git) "/bin/git")
                     #$(file-append (@ (gnu packages base) coreutils) "/bin/date")))
            port)))))
   ;;"cd life && git add . && git commit -m \"auto-commit | $( ~a -uIs )\""
   "notes-commit"
   #:user "samuel")

;; (use-modules (guix gexp))
;; (let ((f (lambda ()
;;          (call-with-output-file "/tmp/commit.log"
;;            (lambda (port)
;;              ;; (chdir "./life")
;;              (display
;;               (with-exception-handler
;;                   (lambda (exn)
;;                     (format #f "exception: ~s\n" exn))
;;                 (system*
;;                  (format #f "ls"
;;                          ;;"~a add . && ~a commit -m \"auto-commit | $( ~a -uIs )\""
;;                          ;;(file-append #$(@ (gnu packages version-control) git) "/bin/git")
;;                          ;;(file-append #$(@ (gnu packages version-control) git) "/bin/git")
;;                          ;;(file-append #$(@ (gnu packages base) coreutils) "/bin/date")
;;                          ))
;;                 port)))))))
;;   (f))

;; (call-with-output-file "/tmp/commit.log"
;;   (lambda (port)
;;   (display
;;    (system "git status")
;;    port)))
#+end_src

******** fulltext index (recoll)                                                 :1h:
:PROPERTIES:
:ID:       ccd773a9-5a5e-41da-b050-6fa461c9a427
:CREATED:  [2022-09-28 Wed 15:42]
:UPDATED:  [2023-02-24 Fri 12:33]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-recoll
#+begin_src scheme :noweb-ref jobs
         ;;; job: fulltext index the universe
#~(job '(next-hour)
       (lambda ()
         (system*
          #$(file-append (@ (gnu packages search) recoll) "/bin/recollindex")))
       "index: recollindex"
       #:user "samuel")
#+end_src

******** generate source tags                                                   :12h:
:PROPERTIES:
:ID:       0681c613-5415-46d7-a079-e940c503941c
:CREATED:  [2022-09-28 Wed 15:43]
:UPDATED:  [2023-02-24 Fri 12:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref jobs
         ;;; job: generate tags
;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
#~(job '(next-hour '(12 0)) ;; every 12 hours
       (lambda ()
         (system*
          #$(file-append (@ (gnu packages idutils) idutils) "/bin/mkid") "git"))
       "index: idutils"
       #:user "samuel")
#+end_src

******** external data; updates
:PROPERTIES:
:ID:       17e87570-2fa4-4f2e-95df-ef229c8ec1aa
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2022-10-04 Tue 16:19]
:ROAM_EXCLUDE: t
:END:

********* forge-pull
:PROPERTIES:
:ID:       454cd7fc-d86d-4f4c-a685-6f9d13963db7
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2022-10-04 Tue 16:34]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null

(defun qz/job/forge-pull ()
  (interactive)
  (require 'forge)
  (project-forget-zombie-projects)
  (let* (y n)
    (mapcar
     (lambda (proj)
       (let ((project (car proj)))
         (with-current-buffer (dired project)
           (if (forge-get-repository 'full)
               (progn (message "qz: job: forge: pulling project '%s'" project)
                      (push project y)
                      (forge-pull))
             (progn (message "qz: job: forge: project '%s' has no forge" project)
                    (push project n))))))
     project--list)

    (message "qz: job: forge: pulled %s, skipped %s"
             (length y) (length n))))

(qz/job/forge-pull)
#+end_src

#+RESULTS:
: qz/job/forge-pull

********* TODO jira-pull
:PROPERTIES:
:ID:       e1bfd63f-ae9c-4043-a2e2-629ffdfa23d5
:CREATED:  [2022-10-04 Tue 16:19]
:UPDATED:  [2022-10-04 Tue 16:19]
:ROAM_EXCLUDE: t
:END:

****** services-sys
:PROPERTIES:
:ID:       c2ee7fa1-59a9-4aa5-9049-28949a17c807
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2022-09-28 Wed 15:59]
:ROAM_EXCLUDE: t
:END:

******* prometheus-node-exporter
:PROPERTIES:
:ID:       e14e8d70-c704-415d-88ac-62f72ee03df9
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2022-09-28 Wed 15:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
        ;;; metrics
(service (@ (gnu services monitoring)
            prometheus-node-exporter-service-type))

#+end_src

******* mcron                                                                  :jobs:
:PROPERTIES:
:ID:       b83cdd83-78d4-464f-bb8f-74a481713984
:CREATED:  [2022-09-28 Wed 15:47]
:UPDATED:  [2022-09-28 Wed 15:51]
:ROAM_EXCLUDE: t
:END:

- ::  https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html

#+begin_src scheme :noweb-ref services-sys
(simple-service
 'system-jobs (@ (gnu services mcron) mcron-service-type)
 ;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
 (list
  <<jobs-sys>>
  ))
#+end_src

******** locate
:PROPERTIES:
:ID:       f52c8582-7b64-4dc0-a111-ea259eb5a3d9
:CREATED:  [2022-09-28 Wed 15:51]
:UPDATED:  [2022-09-28 Wed 15:51]
:ROAM_EXCLUDE: t
:END:

#+name: guile-job-locate
#+begin_src scheme :noweb-ref jobs-sys
;; update locate database
;; ref :: https://guix.gnu.org/en/manual/devel/en/html_node/Scheduled-Job-Execution.html
#~(job '(next-hour '(12 0)) ;; every 12 hours
       (lambda ()
         (execl (string-append #$(@ (gnu packages base) findutils) "/bin/updatedb")
                "updatedb"
                "--prunepaths=/tmp /var/tmp /gnu/store"))
       "updatedb")
#+end_src

******* udev-nvidia                                                        :inactive:
:PROPERTIES:
:ID:       e005dec1-7261-4fcd-84b6-49209ea7d7b0
:CREATED:  [2022-09-28 Wed 15:52]
:UPDATED:  [2022-09-28 Wed 15:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
        ;;; udev: nvidia
(when gaming?
  (simple-service
   'nvidia-udev-rule udev-service-type
   (list nvidia-driver)))
#+end_src

******* X11 gdm with nvidia                                                :inactive:
:PROPERTIES:
:ID:       a91bb43f-465e-4a4a-99fa-a8b4a5ba03e6
:CREATED:  [2022-09-28 Wed 15:52]
:UPDATED:  [2022-09-28 Wed 15:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services-sys
        ;;; desktop manager: X11 gdm + nvidia
(when #f
  (simple-service
   'gdm-xorg-conf gdm-service-type
   (gdm-configuration
    (xorg-configuration
     (xorg-configuration (keyboard-layout %thinkpad-layout)
                         (modules (append
                                   (list nvidia-driver)
                                   %default-xorg-modules))
                         (drivers (list "nvidia")))))))
#+end_src

******* postgresql (v10)
:PROPERTIES:
:ID:       8d0bccba-0e24-4e9b-8beb-e22d61343dcc
:CREATED:  [2022-09-28 Wed 15:53]
:UPDATED:  [2022-09-28 Wed 15:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
        ;;; postgres: don't include if gaming
(unless gaming?
  (service postgresql-service-type
           (postgresql-configuration
            (config-file
             (postgresql-config-file
              (hba-file
               (plain-file "pg_hba.conf"
                           "
local	all	all			trust
host	all	all	127.0.0.1/32    md5
host	all	all	0.0.0.0/0       md5
"
                           ))))
            (postgresql (@ (gnu packages databases) postgresql-10)))))
#+end_src

******* postgresql: timescaledb                                            :inactive:
:PROPERTIES:
:ID:       54345225-6b45-4465-9646-6bdc81ac41a1
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2022-09-28 Wed 15:54]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref services-sys
;; analytics ; timescaledb
;; (unless gaming?
;;   (service postgresql-service-type
;;            (name "postgres-tsdb-14")
;;            (postgresql-configuration
;;             (port 5435)
;;             (extension-packages
;;              (list (@ (gnu packages databases) timescaledb)
;;                    (@ (gnu packages geo) postgis)))
;;             (postgresql (@ (gnu packages databases) postgresql-14)))))
#+end_src

******* postgresql: roles
:PROPERTIES:
:ID:       4af4ec02-7bd3-416f-a4a3-e311cd752192
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2022-09-28 Wed 15:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
(unless gaming?
  (service postgresql-role-service-type
           (postgresql-role-configuration
            (roles (list (postgresql-role
                          (name "postgres")
                          (permissions '(superuser))
                          (create-database? #t))
                         (postgresql-role
                          (name "samuel")
                          (permissions '(superuser login))
                          (create-database? #t))
                         (postgresql-role
                          (name "newstore")
                          (permissions '(login))
                          (create-database? #t)))))))
#+end_src

******* openssh server
:PROPERTIES:
:ID:       1cda9c5a-ef77-4735-aac7-b732054413c3
:CREATED:  [2022-09-28 Wed 15:54]
:UPDATED:  [2022-10-27 Thu 10:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref services-sys
;;; ssh
;; TODO key up, remove password method
(service openssh-service-type
         (openssh-configuration
          (password-authentication? #t)
          ;; (authorised-keys
          ;;  `(("hww" ,(local-file "hww.pub"))
          ;;    ))
          ))
#+end_src

***** base-services
:PROPERTIES:
:ID:       8f7a4a2a-c195-4d06-8d76-25a5671ad941
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming? (feature-base-services))
#+end_src

***** desktop-services
:PROPERTIES:
:ID:       f2840489-2e7e-483b-960c-3bc8e3b41412
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming? (feature-desktop-services))
#+end_src

***** docker
:PROPERTIES:
:ID:       07f0f4f4-500d-488f-b678-88865aa775e0
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:46]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-docker)
#+end_src
***** qemu
:PROPERTIES:
:ID:       92a2bcf9-b388-4331-85c3-14a24657f0b4
:CREATED:  [2022-09-29 Thu 11:37]
:UPDATED:  [2022-09-29 Thu 12:01]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-qemu)
#+end_src
***** backlight
:PROPERTIES:
:ID:       10a02289-4033-4be5-a364-555a29d77849
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 11:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-backlight #:step 5)
#+end_src

***** pipewire
:PROPERTIES:
:ID:       9a824aa7-0fed-4f84-a076-f2a5efc8f1b9
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(unless gaming? (feature-pipewire))
#+end_src

***** fonts
:PROPERTIES:
:ID:       e4de9c1d-4566-4a53-b77b-6e2ad7662d58
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-fonts
 #:font-monospace (font "Iosevka" #:size 14 #:weight 'regular)
 ;; #:font-monospace (font "Fira Mono" #:size 14 #:weight 'semi-light)
 #:font-packages (list font-iosevka font-fira-mono))
#+end_src

***** shell
:PROPERTIES:
:ID:       d6f26fbc-df9f-4a1f-8875-78fd654ecb64
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

****** vterm
:PROPERTIES:
:ID:       8bd59de0-c2f4-42fb-9f31-4c8890e9e68a
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-vterm)
#+end_src

****** bash
:PROPERTIES:
:ID:       c5e6bc9f-9c77-46b2-a41e-883d81ae1fc5
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-bash)
#+end_src

****** direnv
:PROPERTIES:
:ID:       4ce3bb66-ccbb-4cf3-b92d-2e3bda91adf7
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-07 Wed 18:16]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-direnv)
#+end_src

****** zsh
:PROPERTIES:
:ID:       62082caa-8650-4eca-b90d-be7f82439d55
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-zsh
 #:enable-zsh-autosuggestions? #t)
#+end_src

****** ssh
:PROPERTIES:
:ID:       855bb3df-f74b-4fff-9122-7c334a878dcc
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-31 Wed 14:25]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-ssh
 #:ssh-configuration
 (home-ssh-configuration
  (default-options
    '((hostkey-algorithms . "+ssh-rsa")
      (pubkey-accepted-algorithms "+ssh-rsa")))
  (extra-config
   (list (ssh-host
          (host "qz")
          ;; <(create ixy->qz key)>
          (options '((user . "samuel")
                     (hostname . "192.168.0.249")
                     (port . 22)
                     (identity-file . "~/.ssh/qzdl.pub"))))
         (ssh-host
          (host "ko")
          (options '((user . "root")
                     (hostname . "192.168.0.240")
                     (port . 2222)
                     (identity-file . "~/.ssh/ko.pub"))))
         (ssh-host
          (host "bastion-sandbox")
          (options '((user . "ubuntu@bastion-sandbox")
                     (hostname . "bastion-sandbox.ssh.newstore.luminatesec.com")
                     (port . 22)
                     (identity-file . "~/.ssh/newstore-luminate.pem"))))
         (ssh-host
          (host "bastion-staging")
          (options '((user . "ubuntu@bastion-staging")
                     (hostname . "bastion-staging.ssh.newstore.luminatesec.com")
                     (port . 22)
                     (identity-file . "~/.ssh/newstore-luminate.pem"))))
         (ssh-host
          (host "bastion-production")
          (options '((user . "ubuntu@bastion-production")
                     (hostname . "bastion-production.ssh.newstore.luminatesec.com")
                     (port . 22)
                     (identity-file . "~/.ssh/newstore-luminate.pem"))))))))
#+end_src

****** git
:PROPERTIES:
:ID:       dcd3cd89-5c4d-41e3-9ed5-324a48dc3546
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2023-02-28 Tue 12:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-git
 #:extra-config
 `((pull (rebase . #t))
   ;; (slurp-file-like (local-file "./etc/git/work_config"))
   ;; '(#~"[includeIf \"gitdir:~/git/ns\"]
   ;;     [user]
   ;;         signingkey = \"290D5A69F2021C4E\"
   ;;         email = \"sculpepper@newstore.com\"
   ;; ")
   ))
#+end_src

******* config_work
:PROPERTIES:
:ID:       1f073518-b77a-460c-abc8-bc265c4f9e6c
:CREATED:  [2022-11-03 Thu 15:18]
:UPDATED:  [2022-11-03 Thu 15:34]
:ROAM_EXCLUDE: t
:END:

#+begin_src conf :tangle ./config/git/config_work
[includeif "gitdir:~/git/ns"]
    [user]
        signingkey = "290D5A69F2021C4E"
        email = "sculpepper@newstore.com"
#+end_src

***** network
:PROPERTIES:
:ID:       d9d8aa24-494b-4906-b5ab-0dd56c0bf070
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
****** bluetooth
:PROPERTIES:
:ID:       4f2da545-1b08-4465-9e3e-060a5dcbc4c5
:CREATED:  [2022-08-26 Fri 11:49]
:UPDATED:  [2022-08-29 Mon 17:40]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-bluetooth #:auto-enable? #t)
#+end_src
****** sshsocks
:PROPERTIES:
:ID:       a94c429f-77eb-4e96-b1d3-1019071e6f6e
:CREATED:  [2022-08-01 Mon 09:49]
:UPDATED:  [2022-08-01 Mon 12:30]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-ssh-socks-proxy
;; #:host "204:cbf:3e07:e67a:424f:93bc:fc5c:b3dc")
#+end_src

****** ip2d
:PROPERTIES:
:ID:       73a80c20-ac38-4929-abc1-171090b6c4dd
:CREATED:  [2022-08-01 Mon 10:41]
:UPDATED:  [2022-08-08 Mon 16:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-i2pd
;; #:outproxy 'http://acetone.i2p:8888
;; ;; 'purokishi.i2p
;; #:less-anonymous? #t)
#+end_src

****** transmission
:PROPERTIES:
:ID:       6357a61f-0d61-4e62-9b8b-b4442b6923d6
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-09-28 Wed 15:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-transmission #:auto-start? #f)
#+end_src

***** wm
:PROPERTIES:
:ID:       ffb41d6f-7d79-4bee-8f4a-809240572cf9
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
****** swaywm
:PROPERTIES:
:ID:       6b5b3a48-ad8a-4fa9-af06-325fd71530a0
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

******* sway
:PROPERTIES:
:ID:       05be317e-8f65-4a14-a83f-db104b19788f
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-10-28 Fri 13:37]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-sway
   ;; #:sway sway-latest ;; sway-last (transform-nvidia sway-latest)
   ;; #:sway (transform-nvidia sway-latest)
   ;; #:xdg-desktop-portal-wlr xdg-desktop-portal-wlr-latest
   ;; #:xdg-desktop-portal-wlr (transform-nvidia xdg-desktop-portal-wlr-latest)
   #:xwayland? #f
   ;; #:opacity 0.9 ;; TODO qzdl
   ;; #:wallpaper "$HOME/.cache/wallpaper.png" ;; TODO qzdl
   #:extra-config
   `(;;(include ,(local-file "./config/sway/config"))
     ;; TODO sway: toggle opacity for WINDOW
     (,#~"output eDP-1 bg ~/.cache/wallpaper.png fill")
     (,#~"output DP-2 res 3840x1080 bg ~/.cache/wallpaper.png fill")
     (,#~"output DP-1 res 3840x1080 bg ~/.cache/wallpaper.png fill")
     ;; TODO sway: wacom input rotation matrix
     (,#~"input \"*\" tool_mode \"*\" relative calibration_matrix 0.0 -1.0 1.0 1.0 0.0 0.0")
     ;; danke demis ht - Sharing Indicatortps://github.com/minikN/guix/blob/ca15b5a5954d50fe75e2b03f21afc019e002022b/config.scm#L173
     (for_window "[app_id=\"pavucontrol\"]" floating enable, border pixel)
     (for_window "[app_id=\"pinentry-qt\"]" floating enable, border pixel)

     (for_window "[title=\"Nightly - Sharing Indicator\"]" floating enable, border pixel)
     (for_window "[title=\"Emacs (Client) [pass]\"]" floating enable, border pixel)
     (for_window "[title=\"Application Launcher - Emacs Client\"]" floating enable, border pixel)
     (for_window "[title=\"pass - Emacs Client\"]" floating enable, border pixel)

     (bindsym $mod+Ctrl+o opacity set 1)
     (bindsym $mod+Ctrl+p opacity minus 0.1)

     (bindsym $mod+x exec $menu)
     (bindsym $mod+Period exec "tessen -a copy")

     (input type:touchpad
            ;; TODO: Move it to feature-sway or feature-mouse?
            (;; (natural_scroll enabled)
             (tap enabled)))

     (bindsym $mod+bracketright exec "pactl set-sink-volume @DEFAULT_SINK@ +5%")
     (bindsym $mod+bracketleft exec "pactl set-sink-volume @DEFAULT_SINK@ -5%")
     (bindsym $mod+Ctrl+bracketright exec "pactl set-sink-mute @DEFAULT_SINK@ toggle")
     (bindsym $mod+Ctrl+bracketleft exec "pactl set-source-mute @DEFAULT_SOURCE@ toggle")
     ;; alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo
     )))
#+end_src

#+RESULTS:

******* sway-run-on-tty
:PROPERTIES:
:ID:       1a67a54c-b9c9-4957-8bb7-24633e88c432
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-sway-run-on-tty
   #:sway-tty-number 2
   ;;#:launch-args "--unsupported-gpu" ;; 1.7-rc1+ https://github.com/swaywm/sway/releases/tag/1.7-rc1
   ;;#:launch-args "--unsupported-gpu --debug &>/tmp/sway"
   ))
#+end_src

******* TODO sway-tessen
:PROPERTIES:
:ID:       3649e55b-e0c1-4e97-a561-1c48f55a6c90
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (unless gaming?
;;   (feature-sway-tessen
;;    #:menu-arg "rofi"
;;    #:menu-package rofi-wayland))
#+end_src

******* sway-screenshot
:PROPERTIES:
:ID:       af8a8d1a-38ce-4e25-9c34-f1f0c8518394
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming? (feature-sway-screenshot))
#+end_src

******* waybar
:PROPERTIES:
:ID:       ddc53ffa-d988-47ee-b8cf-0ced515be0a8
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-11-08 Tue 12:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-waybar
   #:waybar-modules
   (list
    (waybar-sway-workspaces)
    ;; (waybar-sway-window)
    (waybar-tray)
    (waybar-idle-inhibitor)
    ;; (waybar-temperature)
    ;; (waybar-sway-language)
    (waybar-microphone)
    (waybar-volume #:scroll-step 10)
    (waybar-battery #:intense? #f)
    (waybar-clock))))
#+end_src

******* swayidle
:PROPERTIES:
:ID:       95052943-1d47-455f-903f-a40a1b8e086c
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; FIXME swayidle: external monitor resuming bug (probably gpu issue)e
;; https://github.com/swaywm/sway/issues/5759
(unless gaming?
  (feature-swayidle))
#+end_src

******* swaylock
:PROPERTIES:
:ID:       3f203601-b2fa-4e25-802a-65a539120fc7
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(unless gaming?
  (feature-swaylock
   #:swaylock (@ (gnu packages wm) swaylock-effects)
   ;; The blur of last-screen on lock screen is not privacy-friendly.
   ;; TODO use blurred wallpaper from $HOME/.cache/wallpaper.png
   #:extra-config '(;; (screenshots)
                    (effect-blur . 7x5)
                    (image . "~/.cache/wallpaper.png")
                    (scale . fill)
                    (clock))))
#+end_src

******* rofi
:PROPERTIES:
:ID:       3edaad94-3afa-47cf-8317-dadea891c9cf
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 12:17]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
(unless gaming?
  (feature-rofi
   #:theme (local-file "config/rofi/themes/base16-default-dark.rasi")))
#+end_src

******* swaywm
:PROPERTIES:
:ID:       59028f88-810e-467f-9c66-ea94f494e42c
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:

****** kanshi
:PROPERTIES:
:ID:       e9a4d259-45cc-43e9-89e5-69319a169928
:CREATED:  [2022-10-28 Fri 12:09]
:UPDATED:  [2022-11-01 Tue 18:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;; TODO understand why kanshi freezes my kernel (1200 seconds of cup sleep!! hard poweroff only)
(feature-kanshi
  #:extra-config
  `((profile laptop ((output eDP-1 enable)))
    (profile docked ((output eDP-1 disable)
                     (output DP-2 enable)))))
#+end_src

****** i3
:PROPERTIES:
:ID:       4a57548b-2784-4807-befb-a02d27a02012
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 12:18]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref null
;;     ;; --- WM -----------------------------------------
;;     ;; --- i3   --------

;;     ;;(feature-i3)
;;     ;; (feature-i3-run-on-tty
;;     ;;  #:i3-tty-number 2
;;     ;;  ;;#:launch-args "> /tmp/i3.log"
;;     ;;  )
#+end_src

***** dev
:PROPERTIES:
:ID:       6ec8a5e5-2620-4d95-98a1-f7e382e497ed
:CREATED:  [2022-09-28 Wed 15:59]
:UPDATED:  [2022-09-28 Wed 15:59]
:ROAM_EXCLUDE: t
:END:
****** emacs stuff
:PROPERTIES:
:ID:       c0924a65-73cc-4693-ba65-6abd6c6634dd
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-08 Mon 17:01]
:ROAM_EXCLUDE: t
:END:

******* emacs
:PROPERTIES:
:ID:       d2fc9152-8683-46c1-9ef2-4ca84510bb49
:CREATED:  [2022-09-28 Wed 16:14]
:UPDATED:  [2022-11-21 Mon 18:22]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs
 ;;#:emacs emacs-next-pgtk-latest
 #:emacs (@ (rde packages emacs) emacs-next-pgtk-latest)
 ;; (if (string=? (or (getenv "BUILD_SUBMITTER") "") "git.sr.ht")
 ;;     (@ (gnu packages emacs) emacs-next-pgtk)
 ;;     emacs-next-pgtk-latest)
 #:extra-init-el
 (append
  (list #~"(define-key key-translation-map [?\\C-x] [?\\C-u])\n"
        #~"(define-key key-translation-map [?\\C-u] [?\\C-x])\n")
  (list init-el)
  )
 #:additional-elisp-packages
 ;; TODO if feature-emacs-PACKAGE exists, advise its use
 (append
  (list ;;emacs-consult-dir

        ;;; QZDL
   emacs-sql-indent
   emacs-ob-go
   emacs-org-ml
   emacs-ox-jira
   emacs-moldable-emacs
   emacs-kubernetes
   python-pylsp-mypy
   emacs-ox-slack
   emacs-svg-clock
   ;;
   ;; emacs-consult-recoll ; TODO qzdl pkg
   ;; emacs-code-review    ; TODO qzdl pkg
   )
  (pkgs
   <<emacs-pkg>>
   ))
 )
#+end_src

******** emacs-pkgs                                                             :pkg:
:PROPERTIES:
:ID:       5f892275-23ad-429c-9651-f48f5e8576ec
:CREATED:  [2022-09-28 Wed 16:14]
:UPDATED:  [2022-10-26 Wed 11:45]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref emacs-pkg
"emacs-elfeed"
"emacs-calfw"
"emacs-debbugs"
"emacs-dimmer"
"emacs-edit-server"
"emacs-eglot"
"emacs-ement"
"emacs-eros"
"emacs-ess"
"emacs-explain-pause-mode"
"emacs-forge"
"emacs-ggtags"
"emacs-gnuplot"
"emacs-go-mode"
"emacs-guix"
"emacs-highlight-indent-guides"
"emacs-hl-todo"
"emacs-htmlize" ;; ement: - ox-export html: org src blocks
"emacs-hyperbole"
"emacs-jq-mode"
"emacs-json-snatcher"
"emacs-logview" ;; https://github.com/doublep/logview
"emacs-lsp-mode"
"emacs-lsp-ui"
"emacs-ob-async"
"emacs-org-download"
"emacs-org-edit-latex"
"emacs-org-fragtog"
"emacs-org-reveal"
"emacs-org-super-agenda"
"emacs-org-transclusion"
"emacs-ox-hugo"
"emacs-ox-pandoc"
"emacs-paredit"
"emacs-plantuml-mode"
"emacs-protobuf-mode"
"emacs-py-isort"
"emacs-python-black"
"emacs-repology"
"emacs-restart-emacs"
"emacs-slime"
"emacs-slime-repl-ansi-color"
"emacs-slime-volleyball"
"emacs-string-inflection"
"emacs-terraform-mode"
"emacs-yaml-mode"
"emacs-ytdl"
"emacs-org-jira"
"emacs-org-ql"
"emacs-orgit"        ;; TODO feature-version-control
"emacs-magit-todos"  ;; TODO feature-version-control
"emacs-adaptive-wrap" ;; TODO feature-olivetti
"emacs-org-tree-slide"
"emacs-chess"
;; TODO feature-emacs-lsp
;;"emacs-artbollocks"
;;"emacs-vlf" ;; TODO guix: package emacs-vlf

;; emacs-impostman
;; "emacs-org-autotangle"
#+end_src

******* emacs-appearance
:PROPERTIES:
:ID:       e7344b77-dfd0-4bc5-aade-cd6b92dc58da
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-28 Wed 15:37]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-appearance
 #:dark? #t
 #:extra-elisp
 `((setq modus-themes-syntax '(faint))
   ;; (setq modus-themes-region '(bg-only))
   ;; (setq modus-themes-paren-match '(underline))
   (setq modus-themes-org-blocks 'tinted-background)))
#+end_src

******* emacs-faces
:PROPERTIES:
:ID:       1b88781f-5746-47c1-9985-b15a23aefa8d
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:38]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-faces)
#+end_src

******* TODO emacs .. etc
:PROPERTIES:
:ID:       480434ca-5147-45f6-9b00-e47b87345dc2
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-11-03 Thu 15:10]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-completion
 #:mini-frame? #f
 #:marginalia-align 'right)
(feature-emacs-vertico)
(feature-emacs-project)
(feature-emacs-perspective)
(feature-emacs-input-methods)
(feature-emacs-which-key)
(feature-emacs-keycast)

;; (feature-emacs-perfect-margin ;; TODO QZDL
;;  #:visible-width 150)

(feature-emacs-dired)
;;(feature-emacs-vterm) ;; TODO QZDL merge with feature-vterm
(feature-emacs-monocle)
(feature-emacs-message)
#+end_src

******* emacs-smartparens
:PROPERTIES:
:ID:       01e9df44-bbc7-483d-b17a-0932d54be330
:CREATED:  [2022-09-28 Wed 15:37]
:UPDATED:  [2022-09-28 Wed 16:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-smartparens
 #:show-smartparens? #t)
#+end_src

#+RESULTS:

******* emacs-eglot
:PROPERTIES:
:ID:       74c844c2-55fa-4ac3-b394-6c53488e5cf7
:CREATED:  [2022-09-28 Wed 16:23]
:UPDATED:  [2022-09-28 Wed 16:23]
:ROAM_EXCLUDE: t
:END:

******* emacs-corfu
:PROPERTIES:
:ID:       2a3598dc-be14-4f8c-ae66-100d8d3f9552
:CREATED:  [2022-09-28 Wed 15:36]
:UPDATED:  [2022-09-28 Wed 15:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-corfu
 #:corfu-doc-auto #f)
#+end_src

******* emacs-tempel
:PROPERTIES:
:ID:       37e931d1-9093-484c-80ad-c7b30f20aa45
:CREATED:  [2022-09-28 Wed 15:38]
:UPDATED:  [2022-09-28 Wed 15:38]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-emacs-tempel
 #:default-templates? #t
 #:templates `(fundamental-mode
               ,#~""
               (t (format-time-string "%Y-%m-%d"))))
#+end_src

******* emacs-erc
:PROPERTIES:
:ID:       1019ae2e-1221-4883-bb1e-35270a6fb25d
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-erc
 #:erc-kill-buffers-on-quit #t
 #:erc-nick "qzdl"
 #:align-nicknames? #f
 #:erc-autojoin-channels-alist
 '((Libera.Chat "#guix" "#emacs" "#tropin" "#rde" "#sway")
   (OFTC        "#pipewire" "#wayland"))
 #:log? #t
 ;; #:erc-server "chat.sr.ht"
 #:extra-config
 `((setq rde-bouncer-network-alist
         `((irc.libera.chat . "qzdl")
           (irc.oftc.net . "qzdl")))
   (setq rde-bouncer-nick "qzdl")

   ;; Rename server buffers to reflect the current network name instead
   ;; of SERVER:PORT (e.g., "freenode" instead of "irc.freenode.net:6667").
   ;; This is useful when using a bouncer like ZNC where you have multiple
   ;; connections to the same server.
   (setq erc-rename-buffers t)

   (defun rde-erc-connect-bouncer-oftc ()
     (interactive)
     (setq erc-email-userid "qzdl/irc.oftc.net")
     (erc-tls :server "chat.sr.ht" :nick rde-bouncer-nick))
   (defun rde-erc-connect-bouncer-libera ()
     (interactive)
     (setq erc-email-userid "qzdl/irc.libera.chat")
     (erc-tls :server "chat.sr.ht" :nick rde-bouncer-nick))))
#+end_src

******* emacs-elpher
:PROPERTIES:
:ID:       7e6b37b2-717b-4be7-9dcc-f0dbe1cfe043
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-elpher)
#+end_src

******* emacs-ement
:PROPERTIES:
:ID:       18bb85c9-07d5-4b46-8719-5aac67d10670
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-emacs-ement) ;; TODO qzdl
#+end_src

******* emacs-telega
:PROPERTIES:
:ID:       49c1d710-7fd2-45f7-9db1-df885bb4db70
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-emacs-telega)
#+end_src

******* emacs-pdf-tools
:PROPERTIES:
:ID:       c1f0a657-91fc-4a27-b33b-df85bfaa9ff1
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-pdf-tools)
#+end_src

******* emacs-nov-el
:PROPERTIES:
:ID:       1103af98-4018-4f7d-b59d-89e4b844ce2e
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-nov-el)
#+end_src

******* emacs-git
:PROPERTIES:
:ID:       81f4c2b3-136b-4a37-a40b-3c3b44163bbe
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;     ;; TODO: Revisit <https://en.wikipedia.org/wiki/Git-annex>
(feature-emacs-git)
#+end_src

******* org stuff
:PROPERTIES:
:ID:       b3d5483b-2e0a-4075-baea-6c0a65e04d8f
:CREATED:  [2022-09-28 Wed 16:15]
:UPDATED:  [2022-09-28 Wed 16:15]
:ROAM_EXCLUDE: t
:END:

******** TODO org
:PROPERTIES:
:ID:       7fca8716-000f-4794-b174-2ed192d51c26
:CREATED:  [2022-08-01 Mon 12:46]
:UPDATED:  [2022-09-28 Wed 15:37]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb-ref main
(feature-emacs-org
 #:org-directory my-org-directory
 #:org-indent? #f
 #:org-modern? #f
 ;;#:org-agenda-directory my-notes-directory ;; TODO qzdl
 )
#+end_src

******** org-agenda
:PROPERTIES:
:ID:       20c53b2d-bf63-48b9-ad00-ab417b2d9742
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 10:52]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-emacs-org-agenda
 #:org-agenda-files '("~/life/roam/inbox.org"))
#+end_src

******** TODO org-roam
:PROPERTIES:
:ID:       af1f484c-1958-426b-8377-9a1087079086
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; TODO: <https://www.labri.fr/perso/nrougier/GTD/index.html#table-of-contents>
(feature-emacs-org-roam
 ;; TODO: Rewrite to states
 #:org-roam-directory my-notes-directory
 ;;#:org-roam-dailies-directory (string-append my-notes-directory "/daily")) ;; TODO qzdl
 )
#+end_src

******** TODO org-roam-ui
:PROPERTIES:
:ID:       12eeeff3-fc57-497a-b344-c34824553904
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; FIXME guix: org-roam-ui: httpd communication problem (endemic to guix)
;; (feature-emacs-org-roam-ui)
#+end_src

******** TODO emacs-ref
:PROPERTIES:
:ID:       a122ca1d-751b-4af2-8abd-6980bb1a761b
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-08-01 Mon 12:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;; (feature-emacs-ref
;;  ;; why error with nil for reftex-default-bibliography
;;  ;; TODO: Rewrite to states
;;  #:bibliography-paths
;;  (list (string-append my-org-directory "/tex.bib"))
;;  #:bibliography-notes
;;  (list(string-append my-org-directory "/bib.org")
;;       #:bibliography-directory my-notes-directory)
#+end_src

******* TODO emacs-es/rest
:PROPERTIES:
:ID:       d5965300-1774-44b2-bfc4-f8201622b065
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-28 Wed 16:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;     ;; TODO qzdl (2) es/rest
;;     ;; (feature-emacs-es-mode
;;     ;;  #:package emacs-es-mode-latest)
;;     ;; (feature-emacs-restclient
;;     ;;  #:package-ob emacs-ob-restclient-latest)
#+end_src

****** clojure
:PROPERTIES:
:ID:       d2a0b255-bfd5-44d4-8a22-817ec9d19769
:CREATED:  [2022-10-28 Fri 12:16]
:UPDATED:  [2022-10-28 Fri 13:25]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
;;(feature-clojure)
#+end_src

***** mpv
:PROPERTIES:
:ID:       dc8200af-d1cd-4911-8c42-0b01e9361da2
:CREATED:  [2022-08-01 Mon 10:52]
:UPDATED:  [2022-09-29 Thu 11:44]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-mpv)
#+end_src

***** mail
:PROPERTIES:
:ID:       ecb39921-a2d6-4001-8f7c-1a8826ed4b67
:CREATED:  [2022-09-28 Wed 15:41]
:UPDATED:  [2022-09-28 Wed 15:41]
:ROAM_EXCLUDE: t
:END:
****** TODO isync                                                              :mail:
:PROPERTIES:
:ID:       5f12520a-369e-43bf-ab36-64a44c5bfb98
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-10-28 Fri 12:24]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-isync
 #:isync-verbose #t
 #:isync-serializers
 (append %default-isync-serializers
         `((bravehost . ,bravehost-isync-settings)
           (gmail-tls . ,gmail-tls-isync-settings))))
#+end_src

****** l2md                                                                    :mail:
:PROPERTIES:
:ID:       bd9b236d-db39-449b-8314-77a79ce89fe1
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-08-01 Mon 13:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-l2md)
#+end_src

****** msmtp                                                                   :mail:
:PROPERTIES:
:ID:       c5548269-6010-4a9c-b92f-83b27a722b76
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-08-29 Mon 17:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-msmtp
 #:msmtp-provider-settings
 (append
  %default-msmtp-provider-settings
  `((bravehost . ((host . "mail.bravehost.com")
                  (port . 465)
                  (tls_starttls . off)))
    (gmail-tls . ((host . "smtp.gmail.com")
                  (port . 465)
                  (tls_starttls . off))))))
#+end_src

****** notmuch                                                                 :mail:
:PROPERTIES:
:ID:       3b57f1e4-e156-4505-8d82-085ef082408c
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-10-28 Fri 12:25]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-notmuch
 #:extra-tag-updates-post
 '("notmuch tag +guix-home -- 'thread:\"\
{((subject:guix and subject:home) or (subject:service and subject:home) or \
subject:/home:/) and tag:new}\"'")
 #:notmuch-saved-searches
 (cons*
  '(:name "Inbox :: Personal"  :key "P"
          :query "tag:unread and tag:inbox and tag:personal")
  '(:name "Inbox :: Work"      :key "W"
          :query "tag:unread and tag:inbox and tag:work")
  '(:name "Inbox :: Guix Home" :key "H"
          :query "tag:unread and tag:guix-home")
  '(:name "Inbox :: RDE"       :key "R"
          :query "tag:unread and (to:/rde/ or cc:/rde/)")
  '(:name "Watching"           :key "tw"
          :query "thread:{tag:watch}")
  %rde-notmuch-saved-searches))
#+end_src

***** xdg
:PROPERTIES:
:ID:       2a190f7d-8013-42f2-ab78-49d4f61dd180
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-08-01 Mon 10:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-xdg
 #:xdg-user-directories-configuration
 (home-xdg-user-directories-configuration
  (music "$HOME/music")
  (videos "$HOME/vids")
  (pictures "$HOME/pics")
  (documents "$HOME/docs")
  (download "$HOME/dl")
  (desktop "$HOME")
  (publicshare "$HOME")
  (templates "$HOME")))
#+end_src

***** base packages                                                             :pkg:
:PROPERTIES:
:ID:       9490f8c2-7074-4a89-a62e-f82b6bfc2f2b
:CREATED:  [2022-08-01 Mon 10:55]
:UPDATED:  [2022-11-21 Mon 18:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :noweb-ref main
(feature-base-packages
 #:home-packages
 (append
  (pkgs
   "wl-clipboard"
   "figlet" ;; TODO: Move to emacs-artist-mode
   "calibre"
   "icecat" "nyxt"
   "ungoogled-chromium-wayland" "ublock-origin-chromium"

   "utox" "qtox" "jami"

   "alsa-utils" "mpv" "youtube-dl" "imv" "vim"
   "cozy" "pavucontrol"
   "wev"
   "obs" "obs-wlrobs"
   "recutils" "binutils"
   "fheroes2"
   ;; TODO: Enable pipewire support to chromium by default
   ;; chrome://flags/#enable-webrtc-pipewire-capturer
   "ispell"
   "nyxt"
   ;;
   "hicolor-icon-theme" "adwaita-icon-theme" "gnome-themes-extra"
   "papirus-icon-theme" "arc-theme"
   "thunar"
   ;; "glib:bin"

   ;; TODO: Fix telega package!
   "ffmpeg"

   "ripgrep" "curl" "make"
   "sqlite"

   ;;; PYTHON
   "python"
   "python-black"
   "python-flake8"
   "python-isort"
   "python-lsp-server"
   "python-lz4"
   "python-numpy"
   "python-pandas"
   "python-pip"
   "python-psycopg"
   "python-pyan3"
   "python-pytest-black"
   "python-pytest-isort"
   "python-pywal"
   "python-pyzstd"
   "python-scipy"
   "python-virtualenv"
   "python-yq"

   "libnotify"
   ))
 )


#+end_src

#+RESULTS:

*** debug: post-%main-features
:PROPERTIES:
:ID:       6a9522fb-fabc-4f94-97e4-2ab8d73905a1
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 18:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
;;(map pretty-print %main-features)
(pretty-print "post-%main-features")

#+end_src

*** hw/host features
:PROPERTIES:
:ID:       b34224fa-7b5c-4292-9a0d-27439812a042
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:

**** future
:PROPERTIES:
:ID:       23664f9a-bd24-460b-8537-22f9efd3d298
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

***** TODO Switch from UUIDs to partition labels For better reproducibilty and easier setup.
:PROPERTIES:
:ID:       8983d989-12c3-4e1b-8645-e346571cddcd
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

***** TODO Grub doesn't support luks2 yet.
:PROPERTIES:
:ID:       ea1aa05f-0279-4d55-a733-f40322f3c8f5
:CREATED:  [2022-07-29 Fri 18:22]
:UPDATED:  [2022-07-29 Fri 18:22]
:ROAM_EXCLUDE: t
:END:

**** ixy                                                                   :host:ixy:
:PROPERTIES:
:ID:       ffec3337-a453-4b25-8919-bdacb6c93562
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
***** mapped devices
:PROPERTIES:
:ID:       602eb92a-7d29-4c3a-8ca4-d6e9d61f0e4b
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define ixy-mapped-devices
  (list (mapped-device
         (source (uuid "cb453366-cc17-4742-ada1-91f7f569103f"))
         (target "sys-root")
         (type luks-device-mapping))))
#+end_src
***** file systems
:PROPERTIES:
:ID:       40a378fb-a7a1-456a-b5e8-f15f2f7c7dd3
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define ixy-file-systems
  (list (file-system
         (device (file-system-label "sys-root"))
         (mount-point "/")
         (type "ext4")
         (dependencies ixy-mapped-devices))
        (file-system
         (device "/dev/nvme0n1p1")
         (mount-point "/boot/efi")
         (type "vfat"))
        ))
#+end_src
***** file systems (from andrew)
:PROPERTIES:
:ID:       4228ac9b-1665-4978-9ded-bfa6e174961c
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;; (define ixy-file-systems
;;   (append
;;    (map (match-lambda
;;        ((subvol . mount-point)
;;         (file-system
;;           (type "btrfs")
;;           (device "/dev/mapper/enc")
;;           (mount-point mount-point)
;;           (options (format #f "subvol=~a" subvol))
;;           (dependencies ixy-mapped-devices))))
;;      '((root . "/")
;;        (boot . "/boot")
;;        (gnu  . "/gnu")
;;        (home . "/home")
;;        (data . "/data")
;;        (log  . "/var/log")))
;;    (list
;;     (file-system
;;       (mount-point "/boot/efi")
;;       (type "vfat")
;;       (device (uuid "8C99-0704" 'fat32))))))
#+end_src

***** imports
:PROPERTIES:
:ID:       5b8720fd-bc7e-4a8d-bbf7-3030b057d1b7
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-07-29 Fri 17:53]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules
 (gnu packages linux)
 ((nongnu packages linux) #:prefix nongnu:)
 ((nongnu system linux-initrd) #:prefix nongnu-sys:))
#+end_src

***** features
:PROPERTIES:
:ID:       3e09d87e-4895-4ab0-9109-4693e44ecb2d
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-11-01 Tue 11:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(define %ixy-features
  (list
   (feature-host-info
    #:host-name "ixy"
    #:timezone  "Europe/Berlin")
   ;;; Allows to declare specific bootloader configuration,
   ;;; grub-efi-bootloader used by default
   (feature-bootloader
    #:bootloader-configuration
    (bootloader-configuration
     (bootloader grub-efi-removable-bootloader)
     (targets '("/boot/efi"))))
   ;; os
   (feature-kernel
    ;;#:kernel nongnu:linux-lts ;; nvidia
    #:kernel nongnu:linux
    #:kernel-arguments
    '("quiet" "ipv6.disable=1" "net.ifnames=0"
      "nouveau.modeset=1"
      ;; https://forums.developer.nvidia.com/t/nvidia-495-on-sway-tutorial-questions-arch-based-distros/192212
      ;;"nvidia-drm.modeset=1" "nouveau.blacklist=1" "modprobe.blacklist=nouveau"
      )
    ;; removed "modprobe.blacklist=snd_hda_intel,snd_soc_skl"
    #:firmware (list nongnu:linux-firmware
                     nongnu:sof-firmware
                     ;;nvidia-driver
                     )
    #:initrd nongnu-sys:microcode-initrd
    #:kernel-loadable-modules (list v4l2loopback-linux-module
                                    ;;nvidia-driver
                                    ))
   (feature-file-systems
    #:mapped-devices ixy-mapped-devices
    #:file-systems   ixy-file-systems)
                                        ;(feature-hidpi)
   ))

(pretty-print "post-%ixy-features")
#+end_src

***** config
:PROPERTIES:
:ID:       797b1544-85d0-4a89-b0fe-be6ba45ab847
:CREATED:  [2022-07-29 Fri 17:53]
:UPDATED:  [2022-08-01 Mon 13:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme

;;; rde-config and helpers for generating home-environment and
;;; operating-system records.

(define-public ixy-config
  (rde-config
   (features
    (append
     %abcdw-features
     %main-features
     %ixy-features
     ))))
#+end_src

****** debug: config args (features)
:PROPERTIES:
:ID:       49cef365-d12e-41eb-9e29-b04123e4db0a
:CREATED:  [2022-07-29 Fri 18:04]
:UPDATED:  [2022-07-29 Fri 18:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
;; (map pretty-print
;;      (append %abcdw-features
;;              %main-features
;;              %ixy-features))
#+end_src

***** os
:PROPERTIES:
:ID:       9fa5b517-515a-4ce0-8b08-3717080553da
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;; TODISCUSS: Make rde-config-os/he to be a feature instead of getter?
(define-public ixy-os
  (rde-config-operating-system ixy-config))
#+end_src

****** debug: os
:PROPERTIES:
:ID:       24fc8fe1-79e9-45c9-a8b8-8e89db1161c5
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-ixy-os")
#+end_src

***** home-environment
:PROPERTIES:
:ID:       a8b0c3bc-c2f6-4460-8a67-9519d36f204c
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define ixy-he
  (rde-config-home-environment ixy-config))
#+end_src

****** debug: post-he
:PROPERTIES:
:ID:       58a97450-1bec-4243-b9b0-938862431fbf
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-ixy-he")
#+end_src

**** live                                                                 :host:live:
:PROPERTIES:
:ID:       f0223612-a7d9-4a9e-a6c9-993ac3cadcb2
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

***** filesystem
:PROPERTIES:
:ID:       fca68375-9c08-4e3d-96e0-7856e9d13268
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules (gnu system file-systems))

(define live-file-systems
  (list (file-system
         (mount-point "/")
         (device (file-system-label "Guix_image"))
         (type "ext4"))

        ;; Make /tmp a tmpfs instead of keeping the overlayfs.  This
        ;; originally was used for unionfs because FUSE creates
        ;; '.fuse_hiddenXYZ' files for each open file, and this confuses
        ;; Guix's test suite, for instance (see
        ;; <http://bugs.gnu.org/23056>).  We keep this for overlayfs to be
        ;; on the safe side.
        (file-system
         (mount-point "/tmp")
         (device "none")
         (type "tmpfs")
         (check? #f))

        ;; XXX: This should be %BASE-FILE-SYSTEMS but we don't need
        ;; elogind's cgroup file systems.
        ;; (list %pseudo-terminal-file-system
        ;;       %shared-memory-file-system
        ;;       %efivars-file-system
        ;;       %immutable-store)
        ))
#+end_src

***** config
:PROPERTIES:
:ID:       6f2c9531-48c8-4bed-b843-e271888e207c
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(use-modules (gnu services))
(define-public live-config
  (rde-config
   (features
    (append
     %abcdw-features
     %main-features
     (list
      (feature-host-info
       #:host-name "gnu"
       #:timezone  "Europe/Moscow")

      (feature-file-systems
       #:file-systems live-file-systems)
      (feature-hidpi)
      (feature-custom-services
       #:feature-name-prefix 'live
       #:system-services
       (list
        (simple-service
         'channels-and-sources
         etc-service-type
         `(("channels.scm" ,(local-file "live-channels"))
           ("guix-sources" ,(local-file "/home/bob/work/gnu/guix"
                                        #:recursive? #t))
           ("rde-sources" ,(local-file "/home/bob/work/abcdw/rde"
                                       #:recursive? #t))))
        ;; (service
        ;;  guix-home-service-type
        ;;  `(("bob" . ,ixy-he)))
        (service
         gc-root-service-type
         (list ixy-he))
        )))))))
#+end_src

***** os
:PROPERTIES:
:ID:       2c7c2f23-a1bd-4db4-8218-72035ff32495
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define-public live-os
  (rde-config-operating-system live-config))
#+end_src

***** debug: post live
:PROPERTIES:
:ID:       735d9883-dafd-4b64-bca8-ba5559995532
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(pretty-print "post-live-config")
#+end_src

*** dispatcher
:PROPERTIES:
:ID:       a607e231-867a-4f99-b24d-afc9324611e2
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
(define (dispatcher)
  (let ((rde-target (getenv "RDE_TARGET")))
    (match rde-target
      ("ixy-home" ixy-he)
      ("ixy-system" ixy-os)
      ("live-system" live-os)
      (_ ixy-he))))
#+end_src
**** debug: total
:PROPERTIES:
:ID:       0ec86b5a-f300-4373-bb1e-ccd6c7327776
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-08-29 Mon 16:47]
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme
;; (pretty-print-rde-config ixy-config)
;; (use-modules (gnu services)
;;           (gnu services base))
;; (display
;;  (filter (lambda (x)
;;         (eq? (service-kind x) console-font-service-type))
;;       (rde-config-system-services ixy-config)))

;; (use-modules (rde features))
;; ((@ (ice-9 pretty-print) pretty-print)
;;  (map feature-name (rde-config-features ixy-config)))
#+end_src

**** debug: pre dispatch
:PROPERTIES:
:ID:       3ec71f5a-394c-42e9-8f7e-cd40908fe5bd
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(pretty-print "pre-dispatch")
#+end_src

*** dispatch
:PROPERTIES:
:ID:       305b2df4-7b0c-4dc5-9c40-3f50e5d289f8
:CREATED:  [2022-07-29 Fri 18:19]
:UPDATED:  [2022-07-29 Fri 18:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme
(dispatcher)
#+end_src

*** channels
:PROPERTIES:
:ID:       4ef23979-355a-4858-841a-3551e4af3eb2
:CREATED:  [2022-08-29 Mon 16:40]
:UPDATED:  [2022-09-29 Thu 12:19]
:ROAM_EXCLUDE: t
:END:

**** channels.tmpl
:PROPERTIES:
:ID:       21ce54e0-18e0-460f-82c7-2b43e243ad45
:CREATED:  [2022-08-29 Mon 16:40]
:UPDATED:  [2022-08-29 Mon 17:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src scheme :tangle ../channels.tmpl :noweb-ref 2chan
;; -*- mode: scheme -*-
(use-modules (guix ci)
             (guix channels))

(list
 %default-guix-channel
 (channel
  (name 'rde)
  (url "https://git.sr.ht/~abcdw/rde")
  (introduction
   (make-channel-introduction
    "257cebd587b66e4d865b3537a9a88cccd7107c95"
    (openpgp-fingerprint
     "2841 9AC6 5038 7440 C7E9  2FFA 2208 D209 58C1 DEB0"))))
 (channel
  (name 'nonguix)
  (url "https://gitlab.com/nonguix/nonguix")))
#+end_src

** emacs config
:PROPERTIES:
:ID:       0b25418b-3898-42da-81f2-cfc93aa51017
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-01-19 Thu 10:59]
:END:

*** AAA tangle emacs
:PROPERTIES:
:ID:       4527ed19-6609-47bd-8892-a00c4cba575c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:37]
:END:
**** ensure headings are sorted alphabetically                                 :demo:
:PROPERTIES:
:ID:       0b7994f5-f5b8-4f02-b54d-995f7119a67a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 12:17]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(dotimes (_ 2) (org-up-heading-or-point-min))

(org-map-entries
 (lambda ()
   (when (org-get-heading)
     (org-sort-entries t ?a))))
#+end_src

**** noweb tangler ; root                                                      :meta:
:PROPERTIES:
:ID:       1b524325-ce8c-4d9a-8496-69a393a036e1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:12]
:END:

#+begin_src scheme :tangle emacs.scm :noweb-ref base-emacs
(define-module (rde examples abcdw emacs)
  #:use-module (rde serializers elisp)
  #:export (init-el))

(define init-el
  (elisp-serialize
   '(

     ;; NOWEB GENERAL START
     <<general>>
     ;; NOWEB GENERAL END

     ;; NOWEB CONF START
     <<conf-emacs>>
     ;; NOWEB CONF END
     )))
#+end_src

*** bindings                                                                    :kbd:
:PROPERTIES:
:ID:       a0f75539-b0cc-4906-acb1-705744822bfe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-30 Fri 14:11]
:END:


**** {C-c C-j}         :: imenu overrides
:PROPERTIES:
:ID:       1c984cd6-ef53-4c6d-a8c5-03cd3f475859
:CREATED:  [2022-10-13 Thu 10:27]
:UPDATED:  [2022-10-13 Thu 10:27]
:ROAM_EXCLUDE: t
:END:
***** {C-c C-j} consult-org-heading (replaces org-got))
:PROPERTIES:
:ID:       4ab6afa3-817d-4039-82e0-27340483d081
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

imenu's leaf-nodes-only display is wack and cba to find out why right
now.

If I could add something to this package, it would be to normalize the
padding of each headline level with a prefix arg supplied.

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-j") 'consult-org-heading)
#+end_src

#+RESULTS:
: consult-org-heading

****** consult-org--headings                                                   :demo:
:PROPERTIES:
:ID:       29f3b8ca-60ce-42fa-9d5a-fb18752e0ac6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no :noweb-ref null
(require 'consult)
(require 's)

(pp (let ((h (s-join "/" (org-get-outline-path nil nil))))
      (car (seq-filter (lambda (s)
                         (message "%s BONK %s" h s)
                         (s-contains? h s))
                       (consult-org--headings nil nil nil)))))
#+end_src

#+RESULTS:
:results:
#("bindings/{C-c C-j} +org-goto+ -> consult-org-heading􀜋" 0 1
(face org-level-1 consult-org--heading
(#<marker at 1803 in emacs.org> 2 nil nil))
1 8
(face org-level-1)
9 52
(face org-level-2)
52 53
(consult-strip t invisible t))
:end:

******* assoc                                                                  :demo:
:PROPERTIES:
:ID:       5827c69b-012f-4394-8973-139c454bd947
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no :noweb-ref null
(pp (assoc (s-join "/" (org-get-outline-path t nil))
           (consult-org--headings nil nil nil)))
#+end_src

#+RESULTS:
:results:
nil
:end:

#+RESULTS:
: bindings/{C-c C-j} +org-goto+ -> consult-org-heading/outline path ; to assoc

******** org-babel-indent-block ; indent babel
:PROPERTIES:
:ID:       a2e3f5db-5cc5-4531-9c9d-470183f5e8aa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 16:57]
:END:

#+begin_src emacs-lisp :noweb-ref org
(defvar qz/org-babel-indent-exclude-lang
  '("yaml")
  "org-babel languages to exclude from auto indent/format.")

;;(setq qz/org-babel-indent-exclude-lang nil)
;;(setq qz/debug t)

(defun qz/org-babel-indent-block (beg end &rest args)
  (interactive "r")
  (and qz/debug (message "qz/org-babel-indent-block: BEG %s END %s ARGS %s" beg end args))
  (save-mark-and-excursion
    (when (and (funcall-interactively 'org-babel-mark-block)
               (not (seq-contains-p
                     qz/org-babel-indent-exclude-lang
                     (car (car (cdr (car (org-babel-tangle-single-block 1 t))))))))
      (call-interactively 'indent-region))))

(define-key org-mode-map
            (kbd "C-c C-v C-\\") 'qz/org-babel-indent-block)

;; NOTE: blocks default
;;(add-to-list 'org-ctrl-c-ctrl-c-hook 'qz/org-babel-indent-block)
;;(setq org-ctrl-c-ctrl-c-hook nil)
;;
;; NOTE: not the right eval/exec fn for `{C-c C-c}'
;;(advice-add 'org-babel-eval :before 'qz/org-babel-indent-block)
;;(advice-remove 'org-babel-eval 'qz/org-babel-indent-block)
;;
;; conclusion: use `advice' so as not to block standard org-mode
;; `{C-c C-c}' behaviour like with `org-ctrl-c-ctrl-c-hook'

(qz/advice- org-babel-execute-src-block :before qz/org-babel-indent-block)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-babel-indent-block | qz/advice-disable--org-babel-execute-src-block--qz/org-babel-indent-block |

******** org-babel-refresh-graphics
:PROPERTIES:
:ID:       4d9573c9-c758-40a1-9af3-8d61f65e97bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-04 Mon 13:09]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-refresh-inline-images (&rest args)
  (org-toggle-inline-images t)
  (org-toggle-inline-images t))

(qz/advice- org-babel-execute-src-block :after qz/org-refresh-inline-images)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-refresh-inline-images | qz/advice-disable--org-babel-execute-src-block--qz/org-refresh-inline-images |

******** re-sorting to emulate initial position                                :demo:
:PROPERTIES:
:ID:       c26dda0d-fbd1-4c47-8763-6852e710aacc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:07>
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(let* ((c 0)
       (cands (consult--with-increased-gc (consult-org--headings nil nil nil)))
       (olp (s-join "/" (org-get-outline-path t nil)))
       (current-cand (seq-find (lambda (s)
                                 (setq c (+ 1 c))
                                 (and qz/debug (message "%s BONK %s" olp s))
                                 (s-contains? olp s))
                               (consult-org--headings nil nil nil))))

  (message "%s" (list current-cand c (length cands)))

  (append
   (cl-subseq cands (- 1 c) (length cands))
   (cl-subseq cands 0 (- c 2)))

  ;;  (nth (- 1 c) cands)
  ;; (message
  ;;  "%S"
  ;;  (mapc 'org-no-properties
  ;;        (list
  ;;         (nth (- 1 c) cands)
  ;;         (nth c cands)
  ;;         (nth (1+ c) cands))))
  )
#+end_src

#+RESULTS:
: ("bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽" "bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁖬" "system commands􁹖")
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽"
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁒉"
"system commands􁴲")

****** consult-org-heading ; redef                                             :demo:
:PROPERTIES:
:ID:       4c4443b8-861c-4002-9e71-495dad5df214
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:06>
:END:

hmm. although some proxy for 'initial position' - it doesn't actually
work so nicely.

#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun consult-org-heading (&optional match scope)
  "Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered."
  (interactive (unless (derived-mode-p 'org-mode)
                 (user-error "Must be called from an Org buffer")))
  (let* ((c 0)
         (prefix (not (memq scope '(nil tree region region-start-level file))))
         (cands (consult--with-increased-gc (consult-org--headings prefix match scope)))
         (olp (s-join "/" (org-get-outline-path t nil)))
         (current-cand (seq-find (lambda (s)
                                   (setq c (+ 1 c))
                                   (and qz/debug (message "%s BONK %s" olp s))
                                   (s-contains? olp s))
                                 (consult-org--headings nil nil nil))))
    (message "%s" c)
    (setq consult-initial-position (- c 1))
    (consult--read
     (if (and nil current-cand)
         (append
          (cl-subseq cands (- c 1) (length cands))
          (cl-subseq cands 0 (- c 2)))
       cands)

     :prompt "Go to heading: "
     ;; `default' will just make some nonsense value which doesn't respect the setup (ordering, selection)
     ;;   instead what we're going for is to
     ;;     - make the cand list, sort
     ;;     - jump to `default-candidate', retaining sort
     ;;       - note that a 'jump' can be some numerical index of cands, therefore an intial-position key
     ;;       - where relevance of candidate is given by some function of candidates
     ;;     - a resort can emulate 'initial-position'
     ;; `initial' will filter all other cands, which makes it totally unsuitable


     :category 'consult-org-heading
     :sort nil
     :require-match t
     :history '(:input consult-org--history)
     :narrow (consult-org--narrow)
     :state (consult--jump-state)
     :group
     (when prefix
       (lambda (cand transform)
         (let ((name (buffer-name
                      (marker-buffer
                       (car (get-text-property 0 'consult-org--heading cand))))))
           (if transform (substring cand (+ 1 (length name))) name))))
     :lookup
     (lambda (_ candidates cand)
       (when-let (found (member cand candidates))
         (car (get-text-property 0 'consult-org--heading (car found))))))))

(defun qz/vertico-set-initial-position()
  (when consult-initial-position
    (vertico-next consult-initial-position)))

(setq vertico-mode-hook nil)

                                        ;(add-hook 'vertico-mode-hook 'qz/vertico-set-initial-position)
#+end_src

#+RESULTS:
| qz/vertico-set-initial-position |
***** {C-c C-j} consult-imenu (global)
:PROPERTIES:
:ID:       fa04c049-503f-4f43-ada2-9d2101473db6
:CREATED:  [2022-10-13 Thu 10:27]
:UPDATED:  [2022-10-13 Thu 10:27]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref null
(with-eval-after-load 'consult
  (define-key global-map (kbd "C-c C-j") 'consult-imenu)
  (define-key python-mode-map (kbd "C-c C-j") 'consult-imenu)

  )
#+end_src

**** {C-c C-M-i}       :: org-global-cycle
:PROPERTIES:
:ID:       9a8fc009-7e01-46ab-a467-4d639723a060
:CREATED:  <2022-02-28 Mon 09:42>
:UPDATED:  [2022-10-05 Wed 15:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
;; (define-key org-mode-map (kbd "C-c C-M-i")
;;             (lambda ()
;;               "go to default opening mode -- see `org-startup-folded'"
;;               (interactive)
;;               (let ((org-startup-folded (if current-prefix-arg
;;                                             t
;;                                           org-startup-folded)))
;;                 (funcall-interactively 'org-global-cycle '(4)))))

(defun qz/org-fold ()
  "go to default opening mode -- see `org-startup-folded'"
  (interactive)
  (let ((prefix-arg current-prefix-arg))
    (funcall-interactively 'org-content (or current-prefix-arg 9999))))


;; current subtree
;; given some tree

"
a
aa
 aa
  ab
ab
ac
aca
 cb
  ba
 cd
ad
"

(define-key org-mode-map (kbd "C-c C-M-i") 'qz/org-fold)
#+end_src

#+RESULTS:
: qz/org-fold

**** {C-c C-x C-j}     :: (global) org-goto
:PROPERTIES:
:ID:       3a0acecd-46ff-4132-b009-5bb4964eb288
:CREATED:  [2022-10-21 Fri 12:02]
:UPDATED:  [2022-10-21 Fri 12:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c C-x C-j") 'org-clock-goto)
#+end_src

**** {C-c !}           :: (global) org-time-stamp-inactive
:PROPERTIES:
:ID:       2af330e9-98b1-4192-acd2-6b80b39cca0f
:CREATED:  [2022-10-21 Fri 12:00]
:UPDATED:  [2022-10-21 Fri 12:00]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c !") 'org-time-stamp-inactive)
#+end_src

**** {C-M-j}           :: delete-indentation
:PROPERTIES:
:ID:       ce4366f0-6d05-4e8b-b0f8-93dc87e8bf5b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
maximum [[id:6eb04531-fbcc-45da-86e9-499b48caeb8a][ergonomics]]

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "C-M-j") 'delete-indentation)
#+end_src

**** {C-M-y}           :: consult-yank
:PROPERTIES:
:ID:       bad4e8e6-d723-4422-8053-9ed48d6196b1
:CREATED:  [2022-04-08 Fri 10:29]
:UPDATED:  [2022-04-08 Fri 10:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-M-y") 'consult-yank-from-kill-ring)
#+end_src

**** {C-x C-M-f}       :: consult-recent-file
:PROPERTIES:
:ID:       b3499da4-4d04-4186-9183-f205befcc5b4
:CREATED:  <2022-02-24 Thu 16:13>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:43>
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-x C-M-f") 'consult-recent-file)
#+end_src

**** {C-x} <-> {C-u}   :: translation
:PROPERTIES:
:ID:       c8b38800-ee6c-499e-adba-359d0bd1afe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-21 Fri 12:03]
:END:

This is so core and unchanging that I put it in the RDE emacs config
elisp, so even if my user config is fucked, I am not a helpless deer
getting C-u and C-x mixed up; see [[id:d2fc9152-8683-46c1-9ef2-4ca84510bb49][(rde . config) emacs]]

**** {C-z}             :: newline-above
:PROPERTIES:
:ID:       e24287bd-30ba-448b-8fec-202fc913c71d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref kbd
;;(custom-set-variables
;; '(org-disputed-keys '([(shift o)] . [(meta shift o)])))

(defun qz/newline-above ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (newline))
  (indent-according-to-mode))

(define-key global-map (kbd "C-z") 'qz/newline-above)
;;(define-key global-map (kbd "C-o") 'open-line)
;;
;;(org-remap org-mode-map
;;           'open-line 'org-open-line)

#+end_src

#+RESULTS:
: qz/newline-above

**** {H-M-s-h}jkl      :: windmove swap
:PROPERTIES:
:ID:       e12feea7-bf2a-44b8-acfe-95e2af12357e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:26]
:END:

I don't use this very much, as it curls my whole left hand up (qwerty troubles)

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "M-s-l") 'windmove-swap-states-right)
(define-key global-map (kbd "H-M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "H-M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "H-M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "H-M-s-l") 'windmove-swap-states-right)
#+end_src

#+RESULTS:
: windmove-swap-states-right

**** {H-s-h}jkl        :: windmove
:PROPERTIES:
:ID:       e3015f6e-f7ca-4e31-aa05-290a438862da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-01-12 Thu 20:34]
:END:

#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "H-s-h") 'windmove-left)
(define-key global-map (kbd "s-h")   'windmove-left)
(define-key global-map (kbd "H-s-j") 'windmove-down)
(define-key global-map (kbd "s-j")   'windmove-down)
(define-key global-map (kbd "H-s-k") 'windmove-up)
(define-key global-map (kbd "s-k")   'windmove-up)
(define-key global-map (kbd "H-s-l") 'windmove-right)
(define-key global-map (kbd "s-l")   'windmove-right)
#+end_src

#+RESULTS:
: windmove-right

**** isearch ... {C-o} :: pop occur from isearch
:PROPERTIES:
:ID:       7a81203e-e7c0-474a-941b-b6c8a2e51a8d
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-21 Fri 12:05]
:END:

***** isearch-local occur
:PROPERTIES:
:ID:       75441f13-8830-42fe-b3fe-b22b2dbf4275
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:57]
:END:

#+begin_src emacs-lisp :noweb-ref kbd
;; Activate occur easily inside isearch

(define-key isearch-mode-map (kbd "C-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (occur (if isearch-regexp
                           isearch-string
                         (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (let ((case-fold-search isearch-case-fold-search)) (occur (if isearch-regexp isearch-string (regexp-quote isearch-string)))) |

***** TODO isearch-local consult-line
:PROPERTIES:
:ID:       7d110b1d-33d4-4d00-9bd2-fcb11356a57c
:CREATED:  <2022-02-25 Fri 10:19>
:ROAM_EXCLUDE: t
:END:

hmm, doesn't allow further input

#+begin_src emacs-lisp :noweb-ref kbd
(define-key isearch-mode-map (kbd "M-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (consult-line (if isearch-regexp
                                  isearch-string
                                (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (let ((case-fold-search isearch-case-fold-search)) (consult-line (if isearch-regexp isearch-string (regexp-quote isearch-string)))) |

***** regexp as default
:PROPERTIES:
:ID:       99f00fd1-d744-4bac-b3a1-11151ce843a3
:CREATED:  <2022-02-25 Fri 10:09>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref kbd
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

#+RESULTS:
: isearch-backward

**** noweb-tangler
:PROPERTIES:
:ID:       92b9eb8a-c76c-4284-8dfe-74870f4dcab9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:11]
:END:

#+begin_src emacs-lisp
;; NOWEB KBD START
<<kbd>>
;; NOWEB KBD END
#+end_src
**** {s-\}             :: org-store-link
:PROPERTIES:
:ID:       344c5143-a1c9-4a3e-9ff1-3be2d104f974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref kbd
(define-key global-map (kbd "s-\\") 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link

**** {s-TAB} | {C-s-i} :: dwim-fold
:PROPERTIES:
:ID:       0c29ea9e-6cd2-43a5-8062-a8b8f557906a
:CREATED:  [2022-10-05 Wed 15:41]
:UPDATED:  [2022-11-18 Fri 19:46]
:ROAM_EXCLUDE: t
:END:

- see also :: [[id:9a8fc009-7e01-46ab-a467-4d639723a060][{C-c C-M-i} org-global-cycle]]

yes, my WM[fn:4] uses {s-TAB} to switch workspaces, but emacs only
dispatches on /received/ inputs; it won't capture 'horizontally' from

- {s-TAB} is equivalent to {s-C-i}
  - because
    - {C-i} is equivalent to {TAB}

#+begin_src emacs-lisp
(defun qz/dwim-fold ()
  (interactive)
  (let* ((is-or-derives (lambda (mode)
                          (or (eq major-mode mode)
                              (derived-mode-p major-mode mode))))
         (fold-fn
          (cond ((funcall is-or-derives 'org-mode) 'qz/org-fold)
                ((funcall is-or-derives 'magit-diff-mode) 'magit-section-cycle-diffs)
                (t (message "no dwim path configured, honey")))))
    (when (symbolp fold-fn)
      (call-interactively fold-fn))))

(define-key global-map (kbd "s-TAB") 'qz/dwim-fold)
#+end_src

#+RESULTS:
: qz/dwim-fold

the next development from here would be some dwim-next, dwim-previous;
e.g. in org-mode, navigating via visible elements;

if beginner movement is
| C-n   | C-p   |
| C-M-n | C-M-p |
| M-f   | M-b   |
| C-M-f | C-M-b |

intermediate movement is
| M-a   | backward-sentence  |
| M-e   | forward-sentence   |
| C-M-e | end-of-defun       |
| C-M-a | beginning-of-defun |
| C-M-u | backward-up-list   |
| C-M-d | down-list          |

seems like lots of ways to move

**** {C-s-u} :: dwim-unfold
:PROPERTIES:
:ID:       ab36de5a-2dd8-430a-a94f-796f8c7b0376
:CREATED:  [2023-03-02 Thu 12:21]
:UPDATED:  [2023-03-02 Thu 14:46]
:ROAM_EXCLUDE: t
:END:

- from :: [[id:8f062390-ab92-43d8-bcfd-d2babb287c07][[16:34] trying org-cycle]]

#+begin_src emacs-lisp
(defun qz/dwim-unfold ()
  (interactive)
  (let* ((is-or-derives (lambda (mode)
                          (or (eq major-mode mode)
                              (derived-mode-p major-mode mode))))
         (fold-fn
          (cond ((funcall is-or-derives 'org-mode) 'qz/org-unfold)
                ;; FIXME outline: cycle: magit :: prefix to unfold wholly?
                ((funcall is-or-derives 'magit-diff-mode) 'magit-section-cycle-diffs)
                (t (message "no dwim path configured, honey")))))
    (when (symbolp fold-fn)
      (call-interactively fold-fn))))

(defun qz/org-show-all ()
  (interactive)
  (run-hook-with-args 'org-pre-cycle-hook 'all)
  (org-show-all '(headings blocks))
  (setq org-cycle-global-status 'all)
  (run-hook-with-args 'org-cycle-hook 'all))

(defalias 'qz/org-unfold 'qz/org-show-all)

(define-key global-map (kbd "C-s-u") 'qz/dwim-unfold)
#+end_src

#+RESULTS:
: qz/dwim-unfold

**** toggle
:PROPERTIES:
:ID:       c724ddea-fffe-4fba-a908-a6cb1b8fed3b
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-04 Tue 18:12]
:ROAM_EXCLUDE: t
:END:

***** debug
:PROPERTIES:
:ID:       18fff442-12e3-4268-a1f3-13eb23826ceb
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-04 Tue 18:12]
:ROAM_EXCLUDE: t
:END:

****** -on-error
:PROPERTIES:
:ID:       4ac601d5-4d2b-4377-a29c-1118a0f24707
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-26 Wed 11:56]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref kbd
(define-key rde-toggle-map (kbd "d")   'toggle-debug-on-error)

(define-key rde-toggle-map (kbd "h c") 'highlight-changes-mode)
(define-key rde-toggle-map (kbd "h C") 'global-highlight-changes-mode)

(define-key rde-toggle-map (kbd "h i") 'highlight-indent-guides-mode)

;; a bit sus, but maybe equivalent to toggling off hi-lock-mode
(define-key rde-toggle-map (kbd "h p") 'unhighlight-regexp)
(define-key rde-toggle-map (kbd "h P") 'global-hi-lock-mode)

;; for the incessant observers demanding more than {M-g M-g}
(define-key rde-toggle-map (kbd "l")   'linum-mode)
(define-key rde-toggle-map (kbd "L")   'global-linum-mode)
#+end_src

#+RESULTS:
: toggle-debug-on-error

*** home-grown
:PROPERTIES:
:ID:       04af18a1-8d83-4ca0-a28f-7ecc2f886959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 14:31]
:END:
**** noweb tangler                                                             :meta:
:PROPERTIES:
:ID:       9756d355-cbde-4d15-b83b-4f54d31b8e05
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;; NOWEB CUSTOM START
<<custom>>
;; NOWEB CUSTOM END
#+end_src

**** org-imenu-depth                                                            :var:
:PROPERTIES:
:ID:       284a5e13-b1b2-4848-ac51-db4b94fa591b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: help:imenu-create-index-function
- :: help:org-imenu-get-tree
- :: help:imenu
- :: info:elisp#Imenu

#+begin_src emacs-lisp :noweb-ref custom
(custom-set-variables
 '(org-imenu-depth 99))
#+end_src

#+RESULTS:

(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)
***** COMMENT it would be nice to have individual headings present, not just 'leaves'
:PROPERTIES:
:ID:       927d486d-50ae-4e2e-806c-ab6776485c6f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-25 Fri 10:39]
:END:
#+begin_src emacs-lisp :results code
(org-imenu-get-tree)
#+end_src

#+RESULTS:

**** aws
:PROPERTIES:
:ID:       11aa93f5-5d65-4d2e-a3cd-6c5455bfb255
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-10-12 Wed 13:42]
:ROAM_EXCLUDE: t
:END:

***** aws-env
:PROPERTIES:
:ID:       efd7880f-07c1-4ef3-97fe-916fc7a51cb9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:37]
:END:

#+begin_src emacs-lisp
(defvar qz/aws-env nil
  "the aws login configuration, managed through saml2aws

to manipulate, run
$ saml2aws login -a PROFILE_ALIAS

files of note
`$HOME/.aws/'
`$HOME/.saml2aws'")
#+end_src

#+RESULTS:
: qz/aws-env

***** choose
:PROPERTIES:
:ID:       6663fecd-c4a2-4218-aa18-4bc4bb3e922f
:ROAM_EXCLUDE: t
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-10-12 Wed 13:49]
:END:

#+begin_src emacs-lisp
(defun qz/choose-aws-env (&optional env)
  (interactive)
  (setq qz/aws-env
        (or env (completing-read
                 "aws-env: "
                 (->> (shell-command-to-string
                       "cat ~/.saml2aws | grep '^name' | cut -d'=' -f2")
                      (s-split "\n")
                      (remove "")))))
  (async-shell-command
   (format "saml2aws login -a %s && echo all good yo || echo uh-oh" qz/aws-env)
   "*aws*"
   "*error - aws*"))
#+end_src

**** kubernetes
:PROPERTIES:
:ID:       299fa738-35c3-45f6-83fb-e26db3a40ce5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** kubectl-context                                                           :var:
:PROPERTIES:
:ID:       48fa15cd-93c1-49e6-9e4b-c610959c4b11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defvar qz/kubectl-context nil
  "the operating kubernetes context.

to check, at a shell, run:
`$ kubectl config get-contexts -o name'
or
`$ kubectl config current-context")
#+end_src
***** choose                                                                   :func:
:PROPERTIES:
:ID:       48e170f6-acf1-48d3-af8d-bb06069db027
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/choose-kubectl-context (ctx)
  (interactive)
  (setq qz/kubectl-context
        (or ctx (completing-read "k8s ctx: "
                                 (qz/shell-command-to-list-of-strings
                                  "kubectl config get-contexts -o name"))))
  (async-shell-command (format "kubectl config use-context %s"
                               qz/kubectl-context)
                       "*kubectl*"))

;; optional; quality of life improvement to bury kubectl buffer
(add-to-list 'display-buffer-alist '("*kubectl*" display-buffer-no-window))
#+end_src

**** read-tab
:PROPERTIES:
:ID:       c053accd-329e-440d-be77-735ecea9f0b3
:CREATED:  [2022-10-31 Mon 13:16]
:UPDATED:  [2023-01-12 Thu 20:25]
:ROAM_EXCLUDE: t
:END:

#+name: elisp-read-tab
#+begin_src emacs-lisp
(defun qz/read-tab ()
  (interactive)
  (let* ((file (s-trim (shell-command-to-string "python3 $HOME/life/scratch/tabs.py")))
         (jd   (mapcar (lambda (o) (cons (gethash "title" o) o))
                       (cl-sort ;; accessed ASC
                        (with-temp-buffer
                          (insert-file-contents file)
                          (json-parse-buffer))
                        'lt :key (lambda (o)
                                   (gethash "accessed" o)))))
         (choice (cdr (assoc
                       (consult--read
                        (mapcar 'car jd)
                        :prompt "choose tab: "
                        :default (car (seq-take jd 1))
                        :sort nil)
                       jd))))
    (insert
     (cl-destructuring-bind (title url)
         (list (gethash "title" choice)
               (gethash "url" choice))
       (cl-case major-mode
         (org-mode (org-make-link-string url title))
         (t (format "%s :: %s" title url)))))))

(define-key global-map (kbd "C-c C-s-l") 'qz/read-tab)
#+end_src

***** tabs.py
:PROPERTIES:
:ID:       5af6010e-4010-4c80-80c7-4050a689eeab
:CREATED:  [2022-10-31 Mon 13:22]
:UPDATED:  [2022-10-31 Mon 13:30]
:ROAM_EXCLUDE: t
:END:

#+name: python-read-tab
#+begin_src python :tangle ~/life/scratch/tabs.py :noweb yes
# tabs.py -- a script to rip condensed tabs from firefox as json
#
# Copyright (C) 2022  Samuel Culpepper <samuel@samuelculpepper.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# See footer for elisp companion, to `completing-read' inside emacs

import json
import lz4.block
import pathlib
from time import time

debug = False
output = "/tmp/tabs-out.json"

# Set up path and regex for files
path = pathlib.Path.home().joinpath(".mozilla/firefox")
files = list(path.glob("*default*/sessionstore-backups/recovery.jsonlz4"))
# files = path.glob("oxd0gsnm.default-release-1/sessionstore-backups/recovery" + ".jsonlz4")

debug and print(files)

ID = lambda t: (t.get("ID"))
CHILD = lambda t: (t.get("children", []))

tabs = []

# ID =   [(ID(t), ID(c)) for tt in t.get('entries') for c in tt.get('children')]


def go():
    for f in files:
        # decompress if necessary
        b = f.read_bytes()
        if b[:8] == b"mozLz40\0":
            b = lz4.block.decompress(b[8:])

        j = json.loads(b)
        with open("/tmp/tabs-in.json", "w+") as f:
            json.dump(j, f, indent=2)

        if "windows" not in j.keys():
            break
        for w in j["windows"]:
            most_recent_tab_index = ""
            min_time = 1000

            debug and print("w.tabs len", len(w["tabs"]))
            for t in w["tabs"]:
                i = t["index"] - 1  # Firefox does not 0-index
                debug and print(
                    "(ID . (length t/entries/[i]/children))",
                    t["entries"][i]["ID"],
                    [
                        [ID(c), [ID(cc) for cc in CHILD(c)]]
                        for c in CHILD(t["entries"][i])
                    ],
                )
                # time -> seconds elapsed
                access_time = int((int(time() * 1000) - t["lastAccessed"]) / 600)
                if access_time < min_time:
                    most_recent_tab_index = t["entries"][i]["url"]
                # [(ID(t), ID(c)) for tt in t.get('entries') for c in tt.get('children')]

                hi = t["entries"][i]
                tabs.append(
                    {
                        "id": hi.get("ID"),
                        "url": hi.get("url"),
                        "title": hi.get("title"),
                        "accessed": access_time,
                    }
                )
                debug and print("MOST RECENT TAB: ", most_recent_tab_index)

        with open(output, "w") as f:
            json.dump(tabs, f, indent=2)
        print(output)


go()

# <<elisp-read-tab>>
#+end_src

*** general
:PROPERTIES:
:ID:       8f3dada6-e104-4726-aaa2-25c1475c534e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** advice                                                              :func:macro:
:PROPERTIES:
:ID:       f061bce6-701f-4f81-b0e2-dc97554b58c2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defmacro qz/advice- (target-fn state advice-fn)
  (let* ((s-advice (lambda (e)
                     (intern (format "qz/advice-%s--%s--%s"
                                     e target-fn advice-fn))))
         (enable (funcall s-advice 'enable))
         (disable (funcall s-advice 'disable)))
    `(progn
       (defun ,enable ()
         (interactive)
         (advice-add ',target-fn ,state ',advice-fn))

       (defun ,(funcall s-advice 'disable) ()
         (interactive)
         (advice-remove ',target-fn ',advice-fn))

       (,enable)
       (list ',enable ',disable))))
#+end_src

#+RESULTS:
: qz/advice-
**** org-babel: elisp: cons->table
:PROPERTIES:
:ID:       4841fe9c-4a58-48a2-8882-efcc289ead9f
:CREATED:  [2022-04-11 Mon 10:46]
:UPDATED:  [2022-04-11 Mon 11:02]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-04-11 Mon 10:07]--[2022-04-11 Mon 10:47] =>  0:40
:END:

- see also :: [[id:317eb3df-458c-411b-a8d3-32507d3f025e][org-table]]

just kind of wack to see
: ((1 . a) (2 . b))
all the time, especially when the results are massive

#+name: elisp-cons->table
#+begin_src emacs-lisp :noweb-ref general
(defun cons->table (body &optional &key cols tail-fn)
  "a transformation helper for org-babel, which has defaults
to parse robustly the proper-list[1] over the simple cons[2]

body      *values you wish to transform*: a list; cons, proper,
          a-, etc.
:cols     *column headers for the results*: wrap the result in
          ((co1 col2) . (hline . (..res..)); as such, they will
          be made in addition to any headers and/or `hlines'
          applied by `org-babel' (esp. those from `:colnames').
:tail-fn  *control the parsing of each entry of `body'*:
          by default, `cdr' because for a simple `cons' '(a . b),
          cdr will yield 'b -> (cdr '(a . b)).  If operating on
          some `list' '(a b), then the analog for `'b' is `cadr'
          -> (cadr '(a b)) -> `'b'

[1] proper-list: '(a b)   ; '(a . (b . nil))
[2] simple-cons: '(a . b) ; '(a . b)"
  (let ((res (mapcar (lambda (c)
                       (list (car c)
                             (funcall (or tail-fn 'cdr) c)))
                     body)))
    (if cols
        (cons cols (cons 'hline res))
      res)))

;;; e.g  {C-n C-SPC M-e C-p C-x C-;}
;; (cons->table
;;  '((56 . "/home/samuel/life/roam/20210420T114708Z-newstore.org")
;;    (11 . "/home/samuel/life/roam/20210813T161035Z-kubernetes.org")
;;    (10 . "/home/samuel/life/roam/20200515T151822Z-postgresql.org"))
;;  :cols '(count file))
#+end_src

#+RESULTS: elisp-cons->table
: cons->table

**** ensure-list
:PROPERTIES:
:ID:       8861b226-59df-4ce4-a54d-24695f1a5d4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/ensure-list (s)
  (if (listp s)
      s
    (list s)))
#+end_src

#+RESULTS:
: qz/ensure-list

**** TODO debug
:PROPERTIES:
:ID:       fe64fe7a-bb4c-4828-bb8b-5f263df8b3e9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defvar qz/debug 0 "debugging assists")

(defmacro qz/debug- (&rest body)
  (if qz/debug
      `(progn ,@body)))

(qz/debug- (message "yo"))
#+end_src

#+RESULTS:
: yo
***** demo ;; what is happening here? why is message evaluated
:PROPERTIES:
:ID:       759495b5-773d-4276-ae76-449267545e4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(view-echo-area-messages)
(setq qz/debug 0)
(qz/debug- (message "offffff"))
(setq qz/debug 1)
(qz/debug- (message "on"))
#+end_src

#+RESULTS:
: on

**** newstore
:PROPERTIES:
:ID:       f4fe201f-b26c-48cf-9c15-5a3f5095306d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref general
(require 's)

(setq qz/newstore-envs '(sandbox staging production)
      qz/newstore-env-current nil
      qz/newstore-envs-abbrev '((sandbox . x) (staging . s) (production . p))
      qz/newstore-tenant-current nil
      qz/newstore-tenants '("dodici" "windsor"
                            "boardriders" "marine-layer"
                            "frankandoak" "vince"))

(defun qz/newstore-choose-env (&optional env)
  (interactive)
  (message "qz/newstore-env-current: %s"
           (setq qz/newstore-env-current
                 (or env (completing-read "env: " qz/newstore-envs))))
  (qz/restclient-choose-env qz/newstore-env-current)
  (qz/es-choose-url nil nil qz/newstore-env-current))

(defun qz/newstore-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/newstore-tenant-current: %s"
           (setq qz/newstore-tenant-current
                 (or tenant (completing-read "tenant: " qz/newstore-tenants))))
  (qz/restclient-choose-tenant qz/newstore-tenant-current))

(defun qz/newstore-auth-current ()
  (message "qz/newstore-auth-cache: <for qz/newstore-env-current: %s>"
           qz/newstore-env-current)
  (setq qz/newstore-auth-cache
        (qz/newstore-auth qz/newstore-env-current)))

(defun qz/newstore-auth (env)
  "get the auth (password) associated with
a given `env' from `qz/newstore/envs'

to populate, just fill a `pass' entry like so echo mypass | pass
  insert -e newstore/production"
  (s-trim (shell-command-to-string
           (format "pass newstore/%s" env))))

;; (defun qz/newstore-quick-auth ()
;;   (interactive)
;;   (qz/newstore-choose-tenant)
;;   (qz/newstore-choose-env)
;;   (org-sbe "newstore-token"))
#+end_src

#+RESULTS:
: qz/newstore-quick-auth

**** shell-command-to-list-of-strings                                          :func:
:PROPERTIES:
:ID:       0fbf9125-f032-4c1b-ac6b-af600057cc66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/shell-command-to-list-of-strings (command)
  (remove "" (s-split "\n" (shell-command-to-string command))))
#+end_src

#+RESULTS:
: qz/shell-command-to-list-of-strings

**** revert-buffer-no-confirm                                                  :func:
:PROPERTIES:
:ID:       0105c4f8-016b-47a8-a425-e18911027d11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: http://www.emacswiki.org/emacs-en/download/misc-cmds.el

#+begin_src emacs-lisp :noweb-ref general
(defun qz/revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))
#+end_src
**** dwim-narrow
:PROPERTIES:
:ID:       33f19a38-eb70-473d-8445-c916b7c3c2ff
:CREATED:  <2022-03-11 Fri 11:53>
:UPDATED:  [2022-04-12 Tue 09:26]
:ROAM_EXCLUDE: t
:END:

- :: [[id:23f2a12f-8537-4eb7-a150-adb82ba182d6][ergonomics: emacs: dwim narrowing]]
  - :: https://writequit.org/articles/working-with-logs-in-emacs.html

#+begin_src emacs-lisp
(defun eos/narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key global-map (kbd "C-x C-n") 'eos/narrow-or-widen-dwim)
#+end_src

**** yq-interactively
:PROPERTIES:
:ID:       d31efc58-0563-43df-b372-61428272022f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/yq-interactively ()
  "haha yaml loophole"
  (interactive)
  (let ((jq-interactive-command "yq"))
    (call-interactively 'jq-interactively)))
#+end_src

#+RESULTS:
: qz/yq-interactively

**** insert-gpl
:PROPERTIES:
:ID:       12f23b79-b0b4-49a7-afd3-1ea730673140
:CREATED:  [2022-10-25 Tue 15:55]
:UPDATED:  [2023-02-19 Sun 18:09]
:ROAM_EXCLUDE: t
:END:

- inspired by https://efxa.org/2013/05/01/lisp-function-gnu-gpl-emacs

#+begin_src emacs-lisp
(defun qz/insert-gpl ()
  "Insert the short brief of GNU GPL v3."
  (interactive)
  (save-mark-and-excursion
    (push-mark)
    (insert "
<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.")
    (comment-region (mark) (point))))
#+end_src

#+RESULTS:
: insert-gpl

*** programming
:PROPERTIES:
:ID:       5fe66077-8fc2-4d04-905d-d0b5ef925a6d
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
**** [[id:eae3ee00-be74-4f59-8a4d-b638baebc9f8][sql]]
:PROPERTIES:
:ID:       7be3838d-a859-469e-ae8c-049a299b658a
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:
***** sql-indent
:PROPERTIES:
:ID:       d8965285-d090-4286-a4b5-e43e593b913b
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-03-17 Thu 10:06]--[2022-03-17 Thu 11:32] =>  1:26
:END:

****** TODO add-hook ;
:PROPERTIES:
:ID:       ed32b595-8b57-4f28-86b7-0a5e97651ae0
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp

#+end_src

****** indent tweaks
:PROPERTIES:
:ID:       7436d41f-37b5-4aa9-9b61-be884f4ac459
:CREATED:  [2022-05-24 Tue 12:14]
:UPDATED:  [2022-05-24 Tue 12:21]
:ROAM_EXCLUDE: t
:END:

******* sqlind-indentation-offsets-alist
:PROPERTIES:
:ID:       eaeefe83-2fbf-4eab-81e7-34c0a278bdca
:CREATED:  [2022-05-24 Tue 12:25]
:UPDATED:  [2022-10-10 Mon 10:42]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables
 '(sqlind-indentation-offsets-alist
   '((syntax-error sqlind-report-sytax-error)
     (in-string sqlind-report-runaway-string)


     (comment-continuation sqlind-indent-comment-continuation)
     (comment-start sqlind-indent-comment-start)
     (toplevel 0)
     (in-block +)
     (in-begin-block +)
     (block-start 0)
     (block-end 0)
     (declare-statement +)
     (package ++)
     (package-body 0)
     (create-statement +)
     (defun-start +)
     (labeled-statement-start 0)
     (statement-continuation +)
     (nested-statement-open sqlind-use-anchor-indentation +)
     (nested-statement-continuation sqlind-use-previous-line-indentation)
     (nested-statement-close sqlind-use-anchor-indentation)
     (with-clause sqlind-use-anchor-indentation)
     (with-clause-cte +)
     (with-clause-cte-cont ++)
     (case-clause 0)
     (case-clause-item sqlind-use-anchor-indentation +)
     (case-clause-item-cont sqlind-right-justify-clause)
     (select-clause sqlind-right-justify-clause)
     (select-column sqlind-indent-select-column)
     (select-column-continuation sqlind-indent-select-column +)
     ;; ((default . ++) (kinda . +) ( . sqlind-use-anchor-indentation))
     (select-join-condition ++) ; this should wrap
     (select-table sqlind-indent-select-table)
     (select-table-continuation sqlind-indent-select-table +)
     (in-select-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (insert-clause sqlind-right-justify-clause)
     (in-insert-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (delete-clause sqlind-right-justify-clause)
     (in-delete-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (update-clause sqlind-right-justify-clause)
     (in-update-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator))))
#+end_src

#+RESULTS:

******* sqlind-default-indentation-offsets-alist
:PROPERTIES:
:ID:       07314dae-5651-44cb-a74d-332ded269f4a
:CREATED:  [2022-05-24 Tue 12:25]
:UPDATED:  [2022-07-09 Sat 17:48]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables
 '(sqlind-default-indentation-offsets-alist
   '((syntax-error sqlind-report-sytax-error)
     (in-string sqlind-report-runaway-string)
     (comment-continuation sqlind-indent-comment-continuation)
     (comment-start sqlind-indent-comment-start)
     (toplevel 0)
     (in-block +)
     (in-begin-block +)
     (block-start 0)
     (block-end 0)
     (declare-statement +)
     (package ++)
     (package-body 0)
     (create-statement +)
     (defun-start +)
     (labeled-statement-start 0)
     (statement-continuation +)
     (nested-statement-open sqlind-use-anchor-indentation +)
     (nested-statement-continuation sqlind-use-previous-line-indentation)
     (nested-statement-close sqlind-use-anchor-indentation)
     (with-clause sqlind-use-anchor-indentation)
     (with-clause-cte +)
     (with-clause-cte-cont ++)
     (case-clause 0)
     (case-clause-item sqlind-use-anchor-indentation +)
     (case-clause-item-cont sqlind-right-justify-clause)
     (select-clause sqlind-right-justify-clause)
     (select-column sqlind-indent-select-column)
     (select-column-continuation sqlind-indent-select-column +)
     (select-join-condition -- --)
     (select-table sqlind-indent-select-table)
     (select-table-continuation sqlind-indent-select-table +)
     (in-select-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (insert-clause sqlind-right-justify-clause)
     (in-insert-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (delete-clause sqlind-right-justify-clause)
     (in-delete-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator)
     (update-clause sqlind-right-justify-clause)
     (in-update-clause sqlind-lineup-to-clause-end sqlind-right-justify-logical-operator))))
#+end_src

#+RESULTS:
***** org-babel-default-header-args:sql
:PROPERTIES:
:ID:       51e144e6-da9d-4293-974d-9639cbee4173
:CREATED:  [2022-08-11 Thu 11:01]
:UPDATED:  [2022-08-11 Thu 12:04]
:END:
#+begin_src emacs-lisp :noweb-ref org

(setq org-babel-default-header-args:sql
      '((:engine . "postgres")
        (:dbport . 5432) ;; NEVER connect to an external on 5433 by default
        (:dbhost . "localhost")
        ))

#+end_src

#+RESULTS:
: ((:engine . postgres) (:dbport . 5432) (:dbhost . localhost))

**** [[id:091ac573-6b34-4e0e-88b8-415785d5ae85][python]]
:PROPERTIES:
:ID:       ed0b9a5d-4287-48f0-a518-4303fb2efe32
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
***** add-py-debug                                                             :func:
:PROPERTIES:
:ID:       a8049444-d35b-4b3c-a3eb-54678a3a17aa
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-05-02 Mon 12:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/add-pdb-py-debug ()
  "add debug code and move line down"
  (interactive)
  (back-to-indentation)
  (insert "import pdb; pdb.set_trace();\n"))
#+end_src

#+RESULTS:
: qz/add-pdb-py-debug

***** org-babel-python-command
:PROPERTIES:
:ID:       8c209f94-c43d-4cd8-94f9-2a027b6ddaa3
:CREATED:  [2022-05-02 Mon 10:55]
:UPDATED:  [2022-05-02 Mon 11:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-python-command "python3")
#+end_src

***** python-indent-offset
:PROPERTIES:
:ID:       ec1b6b85-1309-4c5c-8dfa-6bae0750eb21
:CREATED:  [2022-11-08 Tue 13:00]
:UPDATED:  [2022-11-08 Tue 13:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(custom-set-variables '(python-indent-offset 4))
#+end_src

**** [[id:0c02b1ad-3964-4b51-ba59-d2de0e05428f][golang]]
:PROPERTIES:
:ID:       f38578c6-09c1-4da0-8da0-90e0899a2ab1
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
***** [[id:0aea7eaa-6d92-4eac-b575-64cea859302c][golines: emacs: set =gofmt-command= to =golines=, > =gofmt=]]
:PROPERTIES:
:ID:       68efdd3b-c5d0-4358-8e19-5db46d0685c6
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(setq gofmt-command "golines")
#+end_src

***** [[id:b387816a-6048-4378-b2f6-a40fd82858c4][gofmt: emacs: before-save hook]]
:PROPERTIES:
:ID:       05c0788d-0df4-472f-920d-e21d0b68d0ad
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-31 Thu 09:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(add-hook 'go-mode-hook
          (lambda () (add-hook 'before-save-hook
                               'gofmt-before-save
                               nil 'local)))
#+end_src

***** noweb tangler
:PROPERTIES:
:ID:       83d3fafb-7891-4dd6-bbca-4a4b1ca2f042
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;; NOWEB GOLANG START
(with-eval-after-load 'go-mode
  <<golang>>
  )
;; NOWEB GOLANG END
#+end_src
**** jq
:PROPERTIES:
:ID:       c2c34c3c-55e3-4854-b902-5ad11d3a58b4
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2022-04-05 Tue 12:49]
:ROAM_EXCLUDE: t
:END:

***** org-babel-default-header-args:jq
:PROPERTIES:
:ID:       eddd1740-904d-4bfe-becc-d662a43f0447
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2022-04-05 Tue 12:49]
:ROAM_EXCLUDE: t
:END:

it's nice to get a consistent wrap of the result

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-default-header-args:jq
      '((:results . "output")
        (:compact . "no")
        (:wrap . "src json")))
#+end_src

#+RESULTS:
: ((:results . output) (:compact . no) (:wrap . src baba))

**** es-mode
:PROPERTIES:
:ID:       acd0dc77-8aae-4777-99ba-e1f39d2a03f5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** choose
:PROPERTIES:
:ID:       46a9f275-2dc9-4a10-9641-224c3afa5415
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** es-choose-url
:PROPERTIES:
:ID:       8dba72bc-f72e-42b8-8e58-3c92b3aad47b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-url (&optional url backend env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-url: %s"
                         (list url backend env)))
  (let* ((backend (qz/es-choose-backend backend))
         (url (or url
                  (and backend env
                       (qz/es-choose-env env)
                       (format qz/newstore-es-string backend env)))))
    (message "es-default-url: %s"
             (setq es-default-url
                   (or url (completing-read
                            "es-url: " qz/newstore-es-urls)))))
  es-default-url)

(defun qz/es-choose-backend (&optional backend)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-backend: %s" backend))
  (message "qz/newstore-es-backend-current: %s"
           (setq qz/newstore-es-backend-current
                 (or backend (completing-read "es-backend: " qz/newstore-es-backends))))
  qz/newstore-es-backend-current)

(defun qz/es-choose-env (&optional env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-env: %s" env))
  (message "qz/newstore-es-env-current: %s"
           (setq qz/newstore-es-env-current
                 (or env (completing-read "es-env: " qz/newstore-envs))))
  qz/newstore-es-env-current)

(defun qz/test-es-ui (&optional url backend env)
  (setq qz/newstore-es-env-current nil
        qz/newstore-es-backend-current nil)
  (funcall-interactively 'qz/es-choose-url url backend env)
  (list
   qz/newstore-es-env-current
   qz/newstore-es-backend-current
   es-default-url))

;;(qz/test-es-ui)              ;; prompt, noset
;;(qz/test-es-ui nil)          ;; prompt, noset
;;(qz/test-es-ui nil nil)      ;; prompt, noset
;;(qz/test-es-ui nil nil nil)  ;; prompt, noset
;;(qz/test-es-ui nil 'kibana 'production)    ;; noprompt, set

#+end_src

#+RESULTS:
: qz/test-es-ui

****** es-choose-cookie-headers
:PROPERTIES:
:ID:       3afd3b6e-400a-49ba-a3bd-1f007531a257
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-08 Fri 10:59]
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-cookie-headers ()
  "TODO"
  (interactive)
  (message
   "es-default-headers: %s"
   (setq es-default-headers `(("Content-Type" . "application/json; charset=UTF-8")
                              ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                                                   (read-from-minibuffer "es cookie: ")))))))
#+end_src

#+RESULTS:
: qz/es-choose-cookie-headers

***** noweb tangler
:PROPERTIES:
:ID:       43699aa6-0e26-487b-a597-902577ddf22a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-05-25 Wed 12:35]
:END:
#+begin_src emacs-lisp
;; NOWEB ES START
(with-eval-after-load 'restclient
  <<es>>
  )
;; NOWEB ES END
#+end_src


****** settings
:PROPERTIES:
:ID:       8d39050f-25ab-45c0-8b58-bed537d895e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(setq es-default-url "https://elasticsearch-production.newstore.luminatesec.com"
      es-current-url es-default-url
      es-default-headers nil
      es-always-pretty-print t
      es-default-headers
      `(("Content-Type" . "application/json; charset=UTF-8")
        ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                             "11fdbe68-b0f3-4dd0-9894-f97afe3662dc"))))

(setq qz/newstore-es-string "https://%s-%s.newstore.luminatesec.com"
      qz/newstore-es-backends '(kibana elasticsearch)
      qz/newstore-es-backend-current nil
      qz/newstore-es-env-current nil
      qz/newstore-es-urls (cl-loop for env in qz/newstore-envs
                                   append (cl-loop for es-backend in qz/newstore-es-backends
                                                   collect (format qz/newstore-es-string es-backend env))))
#+end_src

#+RESULTS:
| https://kibana-sandbox.newstore.luminatesec.com | https://elasticsearch-sandbox.newstore.luminatesec.com | https://kibana-staging.newstore.luminatesec.com | https://elasticsearch-staging.newstore.luminatesec.com | https://kibana-production.newstore.luminatesec.com | https://elasticsearch-production.newstore.luminatesec.com |

**** restclient
:PROPERTIES:
:ID:       879159c8-76fa-4688-815f-7a4e186e203e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** choose
:PROPERTIES:
:ID:       ada7f597-ebc8-43f2-bc32-7cb09a31a088
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** restclient-choose-env
:PROPERTIES:
:ID:       b88fa094-45e8-4426-8ed8-cdd333afde7a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-env nil)

(defun qz/restclient-choose-env (&optional env)
  (interactive)
  (message "qz/restclient-env: %s"
           (setq qz/restclient-env
                 (cdr (assoc (intern (or env
                                         (completing-read "restclient-env: " qz/newstore-envs)))
                             qz/newstore-envs-abbrev))))
  qz/restclient-env)
#+end_src

#+RESULTS:
: qz/restclient-choose-env

****** restclient-choose-tenant
:PROPERTIES:
:ID:       7555ab8b-5c16-432e-bedb-1159b08b940a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-tenant nil)

(defun qz/restclient-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/restclient-tenant: %s"
           (setq qz/restclient-tenant
                 (or tenant (completing-read
                             "restclient-tenant: " qz/newstore-tenants))))
  qz/restclient-tenant)
#+end_src

#+RESULTS:
: qz/restclient-choose-tenant
***** noweb tangler
:PROPERTIES:
:ID:       515b64aa-7f64-45dd-adb6-253e4a24f387
:CREATED:  [2022-04-20 Wed 15:14]
:UPDATED:  [2022-04-22 Fri 12:05]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
;; NOWEB RESTCLIENT START
(with-eval-after-load 'restclient
  <<restclient>>
  )
;; NOWEB RESTCLIENT END
#+end_src
***** token
:PROPERTIES:
:ID:       7136479f-df01-4628-b15d-c5878b4e45bf
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-20 Wed 15:15]
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-token nil)
(defvar qz/restclient-token-field 'access_token)

(defun qz/restclient-hook ()
  "Update token from a request."
  ;; url is visible while the hook is running.
  (let ((result))
    (save-excursion
      (cond
       ((string-suffix-p "/token" url)
        (condition-case nil
            (progn
              (setq result (cdr (assoc qz/restclient-token-field (json-read))))
              (when (stringp result)
                (progn
                  (setq qz/restclient-token result)
                  (message (concat "stored token: " qz/restclient-token)))))
          (error (message "That wasn't cleanly handled."))))))))

(add-hook 'restclient-response-loaded-hook 'qz/restclient-hook)
(provide 'restclient-hooks)
#+end_src

#+RESULTS:
: restclient-hooks

**** magit
:PROPERTIES:
:ID:       797bc5e1-ca1f-4e1b-abc3-e7bbef7423b8
:CREATED:  [2022-11-01 Tue 18:51]
:UPDATED:  [2022-11-01 Tue 18:51]
:ROAM_EXCLUDE: t
:END:

***** magit-project-status
:PROPERTIES:
:ID:       818d180a-ff9f-4012-bf2c-3e7acca048b7
:CREATED:  [2022-11-01 Tue 18:51]
:UPDATED:  [2022-11-08 Tue 13:43]
:ROAM_EXCLUDE: t
:END:

this gets clobbered from RDE

#+begin_src emacs-lisp
(setq magit-bind-magit-project-status t)
(with-eval-after-load 'project
  (with-eval-after-load 'magit
    ;; Only more recent versions of project.el have `project-prefix-map' and
    ;; `project-switch-commands', though project.el is available in Emacs 25.
    (when (and magit-bind-magit-project-status
               (boundp 'project-prefix-map))
      (unless ;; Only modify if it hasn't already been modified.
          (equal project-switch-commands
                 (eval (car (get 'project-switch-commands 'standard-value))
                       t))
        (message "qz: setting magit-project-status, but project-switch-commands has been changed already"))
      (progn
        (define-key project-prefix-map "m" 'magit-project-status)
        (add-to-list 'project-switch-commands '(magit-project-status "Magit") t)))))
#+end_src

#+RESULTS:
| project-find-file    | Find file      |
| project-find-regexp  | Find regexp    |
| project-find-dir     | Find directory |
| project-vc-dir       | VC-Dir         |
| project-eshell       | Eshell         |
| project-compile      | Compile        |
| magit-project-status | Magit          |

*** package config
:PROPERTIES:
:ID:       2fa9d7ef-cfd9-4d3c-aca8-09e1d6243705
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2022-09-28 Wed 16:36]
:ROAM_EXCLUDE: t
:END:
**** embark
:PROPERTIES:
:ID:       dfab35d0-222c-4d67-82d8-07a2d068a597
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** noweb tangler
:PROPERTIES:
:ID:       0336dc83-f896-4b36-9f70-c1784b997019
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
;; NOWEB EMBARK START
<<embark-hoist>>
(with-eval-after-load 'embark
  <<embark>>
  )
;; NOWEB EMBARK END
#+end_src

***** {C-.} -> embark-act                                                       :kbd:
:PROPERTIES:
:ID:       8234c6dc-773a-4da2-8e8a-e96970f8c47f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref embark-hoist
(define-key global-map (kbd "C-.") 'embark-act)
#+end_src

#+RESULTS:
: embark-act

***** embark
:PROPERTIES:
:ID:       8a00fc8c-1be0-4f6f-8c5e-9b9018f65298
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref embark
#+end_src
**** consult
:PROPERTIES:
:ID:       969bce5f-b959-496e-afe4-81f2407592f3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** noweb tangler
:PROPERTIES:
:ID:       2c2c7344-4b82-4f3e-9b52-f64699a295c3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
;; NOWEB CONSULT START
(with-eval-after-load 'consult
  <<consult>>
  )
;; NOWEB CONSULT END
#+end_src

***** consult-ripgrep-files                                                    :func:
:PROPERTIES:
:ID:       d047d7c0-1031-42b8-b86a-0bcfbb30901a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

not elegant AT ALL, but the API to ripgrep from consult uses
'default-directory', so suck it up

#+begin_src emacs-lisp :noweb-ref consult
(require 's)

(defun qz/consult-ripgrep-files (files)
  (let* ((consult-ripgrep-args (concat consult-ripgrep-args " -L"))
         (rg-dir "/tmp/null"))
    (f-delete rg-dir t)
    (mkdir rg-dir t)
    (mapcar (lambda (f)
              (f-symlink (expand-file-name f)
                         (format "%s/%s-%s"
                                 rg-dir (gensym) (s-replace "/" "-" f))))
            files)
    (consult-ripgrep rg-dir)))
#+end_src

#+RESULTS:
: qz/consult-ripgrep-files

***** {C-c b s} consult-ripgrep-bookmark                                   :func:kbd:
:PROPERTIES:
:ID:       1ec5c6fe-e672-457a-ab67-82e358244df3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

consuming

#+begin_src emacs-lisp :noweb-ref consult
(defun qz/consult-ripgrep-bookmark ()
  (interactive)
  (let ((files (mapcar (lambda (b) (cdr (assoc 'filename b)))
                       bookmark-alist)))
    (qz/consult-ripgrep-files files)))

(define-key global-map (kbd "C-c b s") 'qz/consult-ripgrep-bookmark)
#+end_src

#+RESULTS:
: qz/consult-ripgrep-bookmark

***** {C-x C-M-SPC} consult-mark
:PROPERTIES:
:ID:       a4470ca2-9b0e-4ab4-a1d0-32b86da18abd
:CREATED:  [2022-03-31 Thu 11:07]
:UPDATED:  [2022-03-31 Thu 11:08]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref consult
(define-key global-map (kbd "C-x C-M-SPC") 'consult-global-mark)
#+end_src

***** {M-s L}  :: consult-line-multi
:PROPERTIES:
:ID:       5778ec90-f568-48d3-87cb-9dae958ceeb9
:CREATED:  [2022-11-17 Thu 13:09]
:UPDATED:  [2022-11-17 Thu 13:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "M-s L") 'consult-line-multi)
#+end_src

#+RESULTS:
: consult-line-multi

***** project-commands
:PROPERTIES:
:ID:       16928472-fd8f-4fe9-9c12-6144d5c05998
:CREATED:  [2022-11-14 Mon 12:27]
:UPDATED:  [2022-11-14 Mon 12:29]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref consult
(with-eval-after-load 'project
  (define-key project-prefix-map (kbd "M-g") 'consult-ripgrep)
  (add-to-list 'project-switch-commands '(consult-ripgrep "ripgrep") t))
#+end_src

#+RESULTS:
| project-find-file    | Find file      |
| project-find-regexp  | Find regexp    |
| project-find-dir     | Find directory |
| project-vc-dir       | VC-Dir         |
| project-eshell       | Eshell         |
| project-compile      | Compile        |
| magit-project-status | Magit          |
| consult-ripgrep      | ripgrep        |

***** basic remaps
:PROPERTIES:
:ID:       0209d41e-b385-4428-a6c5-a95929250975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:08]
:END:
#+begin_src emacs-lisp :noweb-ref consult
(mapcar (lambda (bind)
          (define-key global-map (kbd (car bind)) (cadr bind)))
        '(("C-x b" consult-buffer)))
#+end_src

#+RESULTS:
| consult-buffer |
**** pdf-view
:PROPERTIES:
:ID:       90477387-9ef3-4e7b-8d80-d2344623d521
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
***** midnight-minor-mode ; dark-mode filter on pdfs                         :visual:
:PROPERTIES:
:ID:       539f2eb0-e47d-4976-8c96-6c5a7705835a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-25 Mon 10:10]
:END:
#+begin_src emacs-lisp
(with-eval-after-load 'pdf-view
  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode))
#+end_src
**** HACK nov-el
:PROPERTIES:
:ID:       628a3caa-7fbd-4c56-bc5e-221cfdb2a5da
:CREATED:  [2022-10-04 Tue 18:12]
:UPDATED:  [2022-10-04 Tue 18:13]
:ROAM_EXCLUDE: t
:END:

it's [2022-10-04 Tue]; I have just retrieved the dirtiest hack in a
while from the archive; but I mean... [[id:0f7be177-127d-4476-9a0f-a1ed3a570400][look at it]][fn:3]

#+begin_src emacs-lisp
(defun pj-line-width () 650)
#+end_src

***** screenshot
:PROPERTIES:
:ID:       0f7be177-127d-4476-9a0f-a1ed3a570400
:CREATED:  [2022-10-04 Tue 18:13]
:UPDATED:  [2022-10-04 Tue 18:13]
:END:

#+DOWNLOADED: screenshot @ 2022-10-04 18:13:11
[[file:configs/2022-10-04_18-13-11_screenshot.png]]

**** hyperbole
:PROPERTIES:
:ID:       530fac5a-4f90-489a-83d8-69b1b75ab249
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** TODO (require 'hyperbole)
:PROPERTIES:
:ID:       03b4c561-6d9e-4c53-97ea-559dfbfc7eff
:ROAM_EXCLUDE: t
:UPDATED:  [2022-08-03 Wed 13:16]
:END:
#+begin_src emacs-lisp
;;(require 'hyperbole) ;; TODO klink
#+end_src

***** {C-<mouse-2} hkey-either
:PROPERTIES:
:ID:       ccc12df3-8b40-4bec-937f-c28692f1fed4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(define-key global-map (kbd "C-<down-mouse-2>") 'hkey-either)
(define-key global-map (kbd "M-<return>") 'hkey-either)
#+end_src

#+RESULTS:
: hkey-either

**** kubernetes
:PROPERTIES:
:ID:       97ae5500-35f5-43c9-b2cb-088159ae2f2b
:CREATED:  [2022-10-12 Wed 13:43]
:UPDATED:  [2022-10-12 Wed 13:43]
:ROAM_EXCLUDE: t
:END:
**** hl-todo                                                            :mode:global:
:PROPERTIES:
:ID:       edde55d4-808b-49e3-8e9f-67c7b55ec0a3
:CREATED:  [2022-10-21 Fri 12:27]
:UPDATED:  [2022-10-26 Wed 11:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(global-hl-todo-mode 1)
#+end_src

#+RESULTS:
: t

**** hl-phrase                                                          :mode:global:
:PROPERTIES:
:ID:       ad0691da-c0b2-464b-a031-021d50f6b258
:CREATED:  [2022-10-26 Wed 11:50]
:UPDATED:  [2022-10-26 Wed 11:51]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(global-hi-lock-mode 1)
#+end_src

#+RESULTS:
: t

*** [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org]]
:PROPERTIES:
:ID:       71e29a1b-5349-4d90-965f-b628210f1fdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** -
:PROPERTIES:
:ID:       760039ac-145f-46b1-8e5a-60d3771c0c44
:CREATED:  [2022-09-29 Thu 13:08]
:UPDATED:  [2022-09-29 Thu 13:08]
:ROAM_EXCLUDE: t
:END:
***** agenda
:PROPERTIES:
:ID:       a5e89ace-6b97-4d12-9b79-03b7f0a19bf7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** data
:PROPERTIES:
:ID:       23a8e79a-4999-43ba-b5a7-2d8316a15507
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* setters
:PROPERTIES:
:ID:       bf117458-29ec-4a39-8fee-07c2482eba6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** [[id:ec8b00b4-3bd3-458c-9777-d2581c0f6fd5][agenda-files-update]]                                               :func:var:
:PROPERTIES:
:ID:       30c87ac3-057a-46c0-a969-456eee6d2de9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update (&rest _)
  "Update the value of `org-agenda-files' with relevant candidates"
  (interactive)
  (setq org-agenda-files (qz/files-agenda)
        qz/agenda-daily-files (qz/agenda-daily-files-f)))
#+end_src

#+RESULTS:
: qz/agenda-files-update
******** agenda-files-update-clock                                         :func:var:
:PROPERTIES:
:ID:       5eb48172-a3c0-40d0-a8f3-bd2ae916b116
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update-clock (&rest _)
  "An optimisation for org-clock, which is SO SLOW.
 Returns a LIST of files that contain CLOCK, which reduces
processing a lot"
  (interactive)
  (setq org-agenda-files (qz/clock-files)))
#+end_src

#+RESULTS:
: qz/agenda-files-update-clock

********* advice: org-clock-resolve
:PROPERTIES:
:ID:       fa191643-0cf4-4fd4-a5c9-0de9108435d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

- used in 'org-resolve-clocks

#+begin_src emacs-lisp :noweb-ref agenda
(list
 ;; optimisation setup: setup subset of clock files
 (qz/advice- org-clock-resolve :before qz/agenda-files-update-clock)
 ;; optimisation teardown: restore full set of agenda-files
 (qz/advice- org-clock-resolve :after qz/agenda-files-update))
#+end_src

#+RESULTS:
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update-clock | qz/advice-disable--org-clock-resolve--qz/agenda-files-update-clock |
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update       | qz/advice-disable--org-clock-resolve--qz/agenda-files-update       |

******* [[id:9b0676a9-93d3-4449-ac82-721d4e20d4d6][daily-files]]                                                        :func:var:
:PROPERTIES:
:ID:       f6bedbac-927c-46aa-bd67-e241af09bd76
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(setq qz/daily-title-regexp ".?[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}.?")

(defun qz/agenda-daily-files-f ()
  (seq-filter (lambda (s) (string-match qz/daily-title-regexp s))
              org-agenda-files))

;;(qz/agenda-daily-files-f)
#+end_src

#+RESULTS:
:results:
qz/agenda-daily-files-f
:end:

******* clock-files
:PROPERTIES:
:ID:       91873c41-446a-4eb1-9c28-c62e922ab5b3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/clock-files ()
  (split-string
   (shell-command-to-string
    "rg CLOCK ~/life/roam/ -c | grep -v 'org#' | awk -F '[,:]' '{print $1}'")))
#+end_src

#+RESULTS:
: qz/clock-files

******* files-agenda                                                           :func:
:PROPERTIES:
:ID:       53b918cd-26d6-4d02-9e6d-b0a4bffc9c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(defun qz/files-agenda ()
  (seq-uniq (append qz/org-agenda-files (qz/project-files))))
#+end_src

******* [[id:cb81cfd7-fb16-4965-af20-69129cf4fd97][project-files]]                                                          :func:
:PROPERTIES:
:ID:       8279b4e0-f23a-44f9-a1af-07a44b5de957
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/project-files ()
  "Return a list of note files containing Project tag."
  (seq-map
   'car
   (org-roam-db-query
    '(:select :distinct file
              :from tags
              :inner :join nodes
              :on (= tags:node_id nodes:id)
              :where (= tags:tag "project")))))
#+end_src

#+RESULTS:
: qz/project-files
******* private-files                                                          :func:
:PROPERTIES:
:ID:       2c1e97dd-8d37-4ff8-b6cd-9440553adea1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-roam-private-files ()
  "Return a list of note files containing tag =private="
  (seq-map
   'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag "private")])))
#+end_src
******* test
:PROPERTIES:
:ID:       6316d72a-a741-45a4-a239-d743ac860e6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** inspect-agenda-files
:PROPERTIES:
:ID:       d0faae20-6f08-445c-8ce3-ebaf9df2031b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-files ()
  `((org-files-list . ,(length (org-files-list)))
    ((org-agenda-files . ,(length (org-agenda-files)))
     ((qz/project-files . ,(length (qz/project-files)))
      (qz/agenda-daily-files-f . ,(length (qz/agenda-daily-files-f)))))))
#+end_src

#+RESULTS:
: qz/inspect-agenda-files

********* do
:PROPERTIES:
:ID:       b0e05fcc-998f-429e-89be-989241bff5e6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((qorg-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

******** inspect-agenda-updates
:PROPERTIES:
:ID:       7b5c6190-56ab-4aeb-85a8-309261cfd948
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:39>
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-updates ()
  (mapcar (lambda (s) `(,s . (,(progn (funcall s)
                                      (qz/inspect-agenda-files)))))
          '(qz/agenda-files-update qz/agenda-files-update-clock)))
#+end_src

#+RESULTS:
: qz/inspect-agenda-updates

********* do
:PROPERTIES:
:ID:       7d9a11fd-6239-44c4-a7e1-d8ccabcb64af
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((org-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

****** custom commands
:PROPERTIES:
:ID:       d1ac0c13-3aeb-423f-9385-afeafd2025a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******* {C-c n t } daily TODOs
:PROPERTIES:
:ID:       7e41b5a2-8678-4921-aebd-dcffecb0bbe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-06 Thu 12:24]
:END:
#+begin_src emacs-lisp :noweb-ref agenda
;; current (default) sorting strat
'((agenda habit-down time-up priority-down category-keep)
  (todo priority-down category-keep)
  (tags priority-down category-keep)
  (search category-keep))


(defun qz/agenda-todo-dailies ()
  "the most necessary simple invention in months.
(as of [2022-01-19 Wed])

get a list of `TODO' entries, from daily files, ordered by date (from filename/category) DESCENDING.

- see `qz/agenda-daily-files-f' for the subset view of `org-agenda-files'
- see `org-agenda-sorting-strategy' for sort permutations."
  (interactive)
  (let* ((org-agenda-files (qz/agenda-daily-files-f))
         (org-agenda-sorting-strategy '(timestamp-down category-down)))
    (org-todo-list)))

(define-key global-map (kbd "C-c n t") 'qz/agenda-todo-dailies)
#+end_src

#+RESULTS:
: qz/agenda-todo-dailies

******* g ; GTD
:PROPERTIES:
:ID:       ebd9c208-4ac6-49cc-8bdc-3f22f3554b6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-08-17 Wed 16:21]
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-agenda-gtd ()
  (interactive)
  (org-agenda nil "g")
  (goto-char (point-min))
  (org-agenda-goto-today))

;; HACK safe agenda ops on load
(when (not (boundp 'org-agenda-custom-commands))
  (setq org-agenda-custom-commands nil))

(require 'org-roam)

;; (message "agenda: setting custom commands\n%s" org-agenda-custom-commands)

(add-to-list
 'org-agenda-custom-commands
 `("g" "GTD"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "now"
               ((org-agenda-overriding-header "\nnow\n")))
    (tags-todo "wip"
               ((org-agenda-overriding-header "\nwip\n")))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto process\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "inbox.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\ndaily inbox\n")
           (org-agenda-files qz/agenda-daily-files)))
    (todo "TODO"
          ((org-agenda-overriding-header "\nemails\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emails.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\none-off Tasks\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "next.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto yak shave\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emacs.org"))))))))
#+end_src

#+RESULTS:
| g | GTD | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo now ((org-agenda-overriding-header |

#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("c" "create"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "diy+create+do+buy+make+wip"
               ((org-agenda-overriding-header "wip")))
    (tags-todo "diy+create+do"
               ((org-agenda-overriding-header "create")))
    (tags-todo "buy"
               ((org-agenda-overriding-header "buy")))
    (tags-todo "make"
               ((org-agenda-overriding-header "make"))))))
#+end_src

#+RESULTS:
| c  | create             | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo diy+create+do+buy+make+wip ((org-agenda-overriding-header wip))) (tags-todo diy+create+do ((org-agenda-overriding-header create))) (tags-todo buy ((org-agenda-overriding-header buy))) (tags-todo make ((org-agenda-overriding-header make))))           |
|  | Agenda for the day | ((agenda  ((org-agenda-span 1) (org-agenda-scheduled-leaders '( Sched.%2dx: )) (org-agenda-block-separator nil) (org-agenda-entry-types '(:scheduled :timestamp :sexp)) (org-scheduled-past-days 0) (org-agenda-day-face-function (lambda (date) 'org-agenda-date)) (org-agenda-format-date %A %-e %B %Y) (org-agenda-overriding-header |

******* w ; work
:PROPERTIES:
:ID:       02a112d7-ef32-44d3-b06b-cde3d0df4038
:CREATED:  [2022-03-31 Thu 09:41]
:UPDATED:  [2022-06-27 Mon 10:55]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("w" "work"
   ((tags-todo "{work}+wip"
               ((org-agenda-overriding-header "wip")
                (org-tags-match-list-sublevels nil) ;; show subheadings!!!! inherited!!!!
                ;; (org-agenda-hide-tags-regexp
                ;;  (concat org-agenda-hide-tags-regexp "\\|work"))
                ))
    (tags-todo "{work}"
               ((org-agenda-overriding-header "work")))
    )))

;;(pp org-agenda-custom-commands)
#+end_src

#+RESULTS:
| w  | work     | ((tags-todo {work}+wip ((org-agenda-overriding-header wip) (org-tags-match-list-sublevels nil))) (tags-todo {work} ((org-agenda-overriding-header work))))                                                                                                                                                                                                                         |
|  | Overview | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |

#+begin_src emacs-lisp  :results code :noweb-ref null
;; remove keyed by KEY
(defun qz/filter-agenda-key (key &optional agenda-commands)
  (let ((agenda-commands (or agenda-commands
                             org-agenda-custom-commands)))
    (seq-filter (lambda (a) (not (equal key (car a))))
                org-agenda-custom-commands)))

(setq org-agenda-custom-commands (qz/filter-agenda-key "w"))
#+end_src

#+RESULTS:l
#+begin_src emacs-lisp :noweb-ref null
(("" "Overview"
  ((agenda ""
           ((org-agenda-time-grid nil)
            (org-agenda-start-on-weekday nil)
            (org-agenda-start-day "+1d")
            (org-agenda-span 14)
            (org-agenda-show-all-dates nil)
            (org-agenda-time-grid nil)
            (org-deadline-warning-days 0)
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:deadline))
            (org-agenda-skip-function
             '(org-agenda-skip-entry-if 'done))
            (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))
   (agenda "*"
           ((org-agenda-block-separator nil)
            (org-agenda-span 14)
            (org-agenda-overriding-header "\nAgenda\n")))
   (alltodo ""
            ((org-agenda-block-separator nil)
             (org-agenda-skip-function
              '(or
                (org-agenda-skip-if nil
                                    '(scheduled deadline))))
             (org-agenda-overriding-header "\nBacklog\n")))))
 ("" "Agenda for the day"
  ((agenda ""
           ((org-agenda-span 1)
            (org-agenda-scheduled-leaders
             '("" "Sched.%2dx: "))
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:scheduled :timestamp :sexp))
            (org-scheduled-past-days 0)
            (org-agenda-day-face-function
             (lambda
               (date)
               'org-agenda-date))
            (org-agenda-format-date "%A %-e %B %Y")
            (org-agenda-overriding-header "\nAgenda for the day\n")))
   (todo "NEXT"
         ((org-agenda-block-separator nil)
          (org-agenda-overriding-header "\nCurrent Tasks\n")))))
 ("c" "create"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "diy+create+do+buy+make+wip"
              ((org-agenda-overriding-header "wip")))
   (tags-todo "diy+create+do"
              ((org-agenda-overriding-header "create")))
   (tags-todo "buy"
              ((org-agenda-overriding-header "buy")))
   (tags-todo "make"
              ((org-agenda-overriding-header "make")))))
 ("g" "GTD"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "now"
              ((org-agenda-overriding-header "\nnow\n")))
   (tags-todo "wip"
              ((org-agenda-overriding-header "\nwip\n")))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto process\n")
          (org-agenda-files
           '("~/life//roam/inbox.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\ndaily inbox\n")
          (org-agenda-files qz/agenda-daily-files)))
   (todo "TODO"
         ((org-agenda-overriding-header "\nemails\n")
          (org-agenda-files
           '("~/life//roam/emails.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\none-off Tasks\n")
          (org-agenda-files
           '("~/life//roam/next.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto yak shave\n")
          (org-agenda-files
           '("~/life//roam/emacs.org"))))))
 ("n" "Agenda and all TODOs"
  ((agenda "")
   (alltodo ""))))
#+end_src

******* 1 ; events
:PROPERTIES:
:ID:       57a17f21-6c71-4527-8d30-744a8701874c
:CREATED:  [2022-06-27 Mon 10:55]
:UPDATED:  [2022-06-27 Mon 10:57]
:ROAM_EXCLUDE: t
:END:

could do with some love; dates above are a bit redundant maybe

- :: https://emacs.stackexchange.com/questions/22077/org-agenda-how-to-show-only-todos-with-deadline

#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 '("1" "Events" agenda "display deadlines and exclude scheduled"
   ((org-agenda-span 'year)
    (org-agenda-time-grid nil)
    (org-agenda-show-all-dates nil)
    (org-agenda-entry-types '(:deadline)) ;; this entry excludes :scheduled
    (org-deadline-warning-days 0) )))

#+end_src

#+RESULTS:
|  1 | Events   | agenda                                                                                                                                                                                                                                                                                                                                                                             | display deadlines and exclude scheduled | ((org-agenda-span 'year) (org-agenda-time-grid nil) (org-agenda-show-all-dates nil) (org-agenda-entry-types '(:deadline)) (org-deadline-warning-days 0))  |
|  1 | Events   | agenda                                                                                                                                                                                                                                                                                                                                                                             | display deadlines and exclude scheduled | ((org-agenda-span 'month) (org-agenda-time-grid nil) (org-agenda-show-all-dates nil) (org-agenda-entry-types '(:deadline)) (org-deadline-warning-days 0)) |
|  | Overview | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |                                         |                                                                                                                                                           |

******* 0 ; moving
:PROPERTIES:
:ID:       d132d405-315d-4801-914f-b18126f2afa5
:CREATED:  [2022-10-06 Thu 12:00]
:UPDATED:  [2022-10-06 Thu 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda

(defun zin/org-agenda-skip-tag (tag &optional others)
  "Skip all entries that correspond to TAG.

If OTHERS is true, skip all entries that do not correspond to TAG."
  (let ((next-headline (save-excursion (or (outline-next-heading) (point-max))))
        (current-headline (or (and (org-at-heading-p)
                                   (point))
                              (save-excursion (org-back-to-heading)))))
    (if others
        (if (not (member tag (org-get-tags-at current-headline)))
            next-headline
          nil)
      (if (member tag (org-get-tags-at current-headline))
          next-headline
        nil))))


(add-to-list
 'org-agenda-custom-commands
 '("0" "moving"
   ;; TODO: Add A priority to the top.
   ((agenda
     ""
     ((org-agenda-time-grid nil)
      (org-agenda-start-on-weekday nil)
      (org-agenda-start-day "+1d")
      (org-agenda-span 160)
      (org-agenda-show-all-dates nil)
      (org-agenda-time-grid nil)
      (org-agenda-show-future-repeats nil)
      (org-agenda-block-separator nil)
      (org-agenda-entry-types '(:deadline))
      (org-agenda-skip-function
       '(not
         (zin/org-agenda-skip-tag "moving" 't)
         ;; '(org-agenda-skip-entry-if 'notregexp":moving:") ; no love for inherited tags
         ))
      (org-agenda-overriding-header "\nUpcoming deadlines (+160d)\n")))
    (agenda
     "*"
     ((org-agenda-block-separator nil)
      (org-agenda-span 160)
      (org-agenda-show-future-repeats nil)
      (org-agenda-skip-deadline-prewarning-if-scheduled t)
      (org-agenda-skip-function
       '(org-agenda-skip-entry-if 'notregexp":moving:"))
      (org-agenda-overriding-header "\nAgenda\n")))
    (tags-todo "moving"
               ((org-agenda-block-separator nil)
                (org-agenda-skip-function '(or (org-agenda-skip-if nil '(scheduled))))
                (org-agenda-overriding-header "\nMoving Backlog\n"))))))
#+end_src

#+RESULTS:
| 0 | moving | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 160) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-agenda-show-future-repeats nil) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp :moving:)) (org-agenda-overriding-header |

******* destroy
:PROPERTIES:
:ID:       a1d82c8a-d0ed-4da8-9e9e-9705f76cb824
:CREATED:  [2022-10-06 Thu 12:35]
:UPDATED:  [2022-10-06 Thu 12:35]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null
(when-let ((cmd (assoc "0" org-agenda-custom-commands)))
  (setq org-agenda-custom-commands
        (remove cmd org-agenda-custom-commands)))
#+end_src

#+RESULTS:
| 0 | moving | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-agenda-show-future-repeats nil) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |

****** noweb tangler
:PROPERTIES:
:ID:       3719c9a6-45ea-497e-a3ee-bc4c64a566e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-19 Tue 16:20]
:END:
#+begin_src emacs-lisp  :noweb-ref org

;; NOWEB AGENDA START

(with-eval-after-load 'org-agenda
  (message "AGENDA start")
  <<agenda>>
  )

;; NOWEB AGENDA END

#+end_src

****** settings                                                                 :var:
:PROPERTIES:
:ID:       359219d7-3d55-44aa-b8f2-c5046125bb29
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-06 Thu 12:26]
:END:
******* org-agenda-files
:PROPERTIES:
:ID:       0e532fda-1e96-4bc4-84ad-fb4ecc809c5d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(setq qz/org-agenda-files
      (mapcar (lambda (f) (expand-file-name (format "%s/%s" org-roam-directory f)))
              '("calendar-home.org" "calendar-work.org" "schedule.org")))
#+end_src

#+RESULTS:
| /home/samuel/life/roam/calendar-home.org | /home/samuel/life/roam/calendar-work.org | /home/samuel/life/roam/schedule.org |
******* org-agenda-daily-files
:PROPERTIES:
:ID:       77414dfd-4a4c-440a-be63-5241d5e5407c
:CREATED:  [2022-03-16 Wed 08:51]
:UPDATED:  [2022-03-16 Wed 08:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defvar qz/agenda-daily-files nil)
#+end_src
******* org-agenda-hide-tags-regexp
:PROPERTIES:
:ID:       42309c7b-5946-4c86-b2bc-3f1c92e88d21
:CREATED:  [2022-03-31 Thu 10:49]
:UPDATED:  [2022-09-28 Wed 17:04]
:ROAM_EXCLUDE: t
:END:

because a mechanism for the discovery of =TODO= entries is

#+begin_src emacs-lisp :noweb-ref agenda
(setq org-agenda-hide-tags-regexp "project")
#+end_src

#+RESULTS:
: project

****** visual
:PROPERTIES:
:ID:       a9e4cf66-2163-4b4e-a523-53c4a1ff47fc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* category :: agenda format refinement                                    :org:
:PROPERTIES:
:ID:       428c5706-9498-44e8-8960-2e893347d737
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 09:52]
:END:
******** org-category ;; agenda
:PROPERTIES:
:ID:       0dd4254a-f725-4df0-8843-a25e22b4b299
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-04-22 Fri 09:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-category (&optional len)
  (let* ((len (or len 25)))
    (->>
     (if buffer-file-name
         (file-name-sans-extension (file-name-nondirectory buffer-file-name))
       "")
     (replace-regexp-in-string "private-" "")
     (replace-regexp-in-string
      ;; datetime from file, could do "[0-9]\\{6\\}T[0-9]\\{6\\}Z?-"
      (concat "[0-9][0-9][0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]"
              "T" "[0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]" "Z-")
      "")
     (s-pad-right len " ")
     (s-truncate len))))

;;(qz/org-category)
#+end_src

#+RESULTS:
: qz/org-category

******** org-agenda-prefix-format
:PROPERTIES:
:ID:       9ce2b921-9c56-42b8-aa6a-579972a92a60
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-06-27 Mon 10:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(let* ((agenda "  %(qz/org-category)%-12t% s")
       (other "%i%(qz/org-category 12)%l"))
  (setq org-agenda-prefix-format (list (cons 'agenda agenda)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'search other))))

#+end_src

#+RESULTS:
: ((agenda .   %(qz/org-category)%-12t% s) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (search . %i%(qz/org-category 12)%l))

******** vulpea's category refinement
:PROPERTIES:
:ID:       6c717faa-ecc5-41b3-a93e-606fa9170d7a
:CREATED:  [2022-04-22 Fri 09:53]
:UPDATED:  [2022-04-22 Fri 09:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:
- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" Emacs Configuration %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (qz/node-title))
         (category (org-get-category))
         (result
          (or (if (and title
                       (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

#+RESULTS:
: vulpea-agenda-category
****** etc
:PROPERTIES:
:ID:       d21041e2-b257-4f84-93bd-c43fd895c33b
:CREATED:  [2022-04-21 Thu 15:26]
:UPDATED:  [2022-04-21 Thu 15:26]
:ROAM_EXCLUDE: t
:END:
******* lunar phases
:PROPERTIES:
:ID:       730db291-2c3d-4995-928f-81685991be07
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

- :: https://orgmode.org/worg/org-hacks.html#org92f0a44

******** org-lunar-phases                                                      :func:
:PROPERTIES:
:ID:       84219025-9fc0-41c0-b43b-70c5d61aed77
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(org-no-warnings (defvar date))
(defun qz/org-lunar-phases ()
  "Show lunar phase in Agenda buffer."
  (require 'lunar)
  (let* ((phase-list (lunar-phase-list (nth 0 date)
                                       (nth 2 date)))
         (phase (cl-find-if (lambda (phase)
                              (equal (car phase) date))
                            phase-list)))
    (when phase
      (setq ret (concat (lunar-phase-name (nth 2 phase)))))))
#+end_src

#+RESULTS:
: qz/org-lunar-phases

******** lunar-phase-names
:PROPERTIES:
:ID:       f8dbfc55-a12f-4481-909c-aa7e15339931
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-07-09 Sat 17:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
;; 🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜
(setq lunar-phase-names
      '("🌚 new moon" ; unicode symbol : 🌑 use full circle as fallback
        "🌛 first quarter moon"
        "🌝 full moon" ; unicode symbol: 🌕 use empty circle as fallback
        "🌜 last quarter moon"))
#+end_src

#+RESULTS:
| 🌚 new moon | 🌛 first quarter moon | 🌝 full moon | 🌜 last quarter moon |

******* sunrise + set
:PROPERTIES:
:ID:       8bcfd1c5-2002-4e81-90fe-39a98ff678b1
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-21 Thu 15:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(setq calendar-latitude 52.5)  ; imprecise
(setq calendar-longitude 13.4)
(setq calendar-location-name "berlin")

(autoload 'solar-sunrise-sunset "solar.el")
(autoload 'solar-time-string "solar.el")
(defun qz/diary-sunrise ()
  "Local time of sunrise as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (car l)
      (concat
       (if (string= entry "")
           "🌄 sunrise"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caar l) nil)))))

(defun qz/diary-sunset ()
  "Local time of sunset as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (cadr l)
      (concat
       (if (string= entry "")
           "🌅 sunset"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caadr l) nil)))))
#+end_src

#+RESULTS:
: qz/diary-sunset
***** jira
:PROPERTIES:
:ID:       5fd74f4a-26f8-40d8-9947-01927e0f06ed
:CREATED:  [2022-10-11 Tue 17:40]
:UPDATED:  [2022-10-11 Tue 17:40]
:ROAM_EXCLUDE: t
:END:
****** helpers
:PROPERTIES:
:ID:       0968480e-2a2e-44bf-9641-e672e440aa3b
:CREATED:  [2022-10-11 Tue 17:40]
:UPDATED:  [2022-10-11 Tue 17:40]
:ROAM_EXCLUDE: t
:END:
******* vars
:PROPERTIES:
:ID:       ef22499a-482b-44c9-b552-0378962f11f8
:CREATED:  [2023-03-02 Thu 12:16]
:UPDATED:  [2023-03-02 Thu 12:16]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq jiralib-url "https://goodscloud.atlassian.net")
#+end_src

******* jql query strings
:PROPERTIES:
:ID:       db44f704-f514-4caf-9d37-a17bcbabc366
:CREATED:  [2023-03-02 Thu 12:16]
:UPDATED:  [2023-03-02 Thu 12:16]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noreb-ref org
(setq qz/newstore/jira/TOO-active-issues
      "project = TOO AND issuetype in standardIssueTypes() AND issueType != epic AND status = 'in progress' ORDER BY  order by statusCategoryChangedDate asc")
#+end_src

******* make-query shorthand
:PROPERTIES:
:ID:       fce45d29-0148-4d20-bb6c-8f689199b105
:CREATED:  [2023-03-02 Thu 12:16]
:UPDATED:  [2023-03-02 Thu 12:16]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp  :noweb-ref org
(defun qz/jql (jql)
  (jiralib-do-jql-search jql (and 'limit 999)))
#+end_src

******* parser: emacs-json: jira
:PROPERTIES:
:ID:       87744104-dc2d-4d76-82ec-79fc93441e3d
:CREATED:  [2023-03-02 Thu 12:16]
:UPDATED:  [2023-03-02 Thu 12:16]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/jira/parse-issues (res)
  (cl-labels ((get (key data) (cdr (assoc key data)))
              (fget (key data) (get key (get 'fields data))))
    (mapcar (lambda (i)
              (let ((v (cdr i)))
                (list (get 'key v)
                      (get 'emailAddress (fget 'assignee v))
                      (fget 'statuscategorychangedate v)
                      (fget 'summary v)
                      ;; ...
                      )))
            res)))
#+end_src




***** [[id:0213945d-cba5-4dd0-812c-9c01d6f51148][babel]]
:PROPERTIES:
:ID:       5bfb32fe-c5fb-46cb-a5ed-fe819d17949e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** async
:PROPERTIES:
:ID:       9ae0cd25-0fd9-4c5e-a5af-d5ac80b3a425
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: [[id:4062856a-e182-4820-bc7b-817a693518a3][emacs-ob-async]]

#+begin_src emacs-lisp :noweb-ref org
                                        ;(require 'ob-async)
#+end_src

#+RESULTS:
: ob-async

****** src options                                                              :var:
:PROPERTIES:
:ID:       1ea03a77-5511-41cd-bd74-6ff19e750f4b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-confirm-babel-evaluate nil)
(setq org-structure-template-alist
      '(;; yp
        ("d"  . "definition")
        ("ee" . "example")
        ("es" . "src es")
        ("el" . "src emacs-lisp")
        ("q"  . "quote")
        ("sb" . "src shell")
        ("se" . "src emacs-lisp")
        ("sl" . "src scheme")
        ("sp" . "src sql :engine postgres")
        ("sr" . "src R")
        ("ss" . "src")
        ("jp" . "src jupyter-python")
        ("jr" . "src jupyter-R")
        ("r"  . "src restclient")))
#+end_src

#+RESULTS:
: ((d . definition) (ee . example) (es . src es) (el . src emacs-lisp) (q . quote) (sb . src shell) (se . src emacs-lisp) (sl . src scheme) (sp . src sql :engine postgres) (sr . src R) (ss . src) (jp . src jupyter-python) (jr . src jupyter-R) (r . src restclient))

****** do-load-languages
:PROPERTIES:
:ID:       f098ceb7-c98e-4e99-ab07-c8833f5a853b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
fuck the speed my man; {M-x load-library RET ob-} is so annoying
#+begin_src emacs-lisp :noweb-ref org
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   ;;(jupyter . t)
   (python . t)
   (jq . t)
   ;;(ipython . t)
   (scheme . t)
   (sql . t)
   ;;(plant-uml . t)
   (shell . t)
   (sqlite . t)
   ;;(elasticsearch . t)j ;; TODO rde package es/rest
   ;;(restclient . t)
   (R . t)))
#+end_src

#+RESULTS:

****** library of babel
:PROPERTIES:
:ID:       922a7334-bfde-448a-bdf2-809f1b8eeb14
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon
>
******* lob-ingest-files                                                   :var:func:
:PROPERTIES:
:ID:       05415208-95bf-4153-b65c-32e10112c582
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-24 Mon 14:25]
:END:
CREATED: <2021-11-29 Mon>


#+begin_src emacs-lisp :noweb-ref roam :colnames '(count file)
(defvar qz/org-babel-lob-ingest-files
  (append (mapcar (lambda (s)
                    (when-let ((n (org-roam-node-from-title-or-alias s)))
                      (org-roam-node-file n)))
                  '("NewStore"
                    "kubernetes"
                    "postgres"
                    "es-mode"
                    "elisp"
                    "plantuml"
                    "GNU Guix"
                    "git"
                    ))
          ;; .. other files
          nil
          ;; ..
          )
  "files from which named `src' blocks should be loaded")

(defun qz/org-babel-do-lob-ingest-files (&optional files)
  (interactive)
  (let ((r (mapcar (lambda (f) (cons (org-babel-lob-ingest f) f))
                   (append qz/org-babel-lob-ingest-files files))))
    ;;(message "%s" (pp r))
    r))

(cons->table
 (qz/org-babel-do-lob-ingest-files))
#+end_src

#+RESULTS:
| count | file                                                   |
|-------+--------------------------------------------------------|
|    75 | /home/samuel/life/roam/20210420T114708Z-newstore.org   |
|    11 | /home/samuel/life/roam/20210813T161035Z-kubernetes.org |
|    26 | /home/samuel/life/roam/20200515T151822Z-postgresql.org |
|     4 | /home/samuel/life/roam/20210813T161035Z-es_mode.org    |
|     2 | /home/samuel/life/roam/20200415T145703Z-emacs_lisp.org |
|     1 | /home/samuel/life/roam/20210505T135556Z-plantuml.org   |
|     1 | /home/samuel/life/roam/20200919T152005Z-gnu_guix.org   |
|     1 | /home/samuel/life/roam/20200511T150956Z-git.org        |

******* choose babel block                                                     :func:
:PROPERTIES:
:ID:       d8ebb517-f247-48a2-af5f-08a3d6c6c3ae
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mo>n

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-choose-block (&optional lob)
  "choose block, insert scaffold for args.

might honestly be better to generate `yas' template when we load
blocks with `qz/org-babel-do-lob-ingest-files', but I've never used
yas so idk

use a prefix arg to shortcut (org-table-get-constant \"bonk\"
"
  (interactive)
  (message "prefix: %s" (list current-prefix-arg prefix-arg lob))
  (let ((lob (or lob
                 (intern (completing-read
                          "lob: " (mapcar 'car org-babel-library-of-babel))))))
    (with-current-buffer (current-buffer)
      (end-of-line)
      (newline)
      (insert (format "#+name: call-%s\n#+call: %s(%s)"
                      lob lob (or (and current-prefix-arg
                                       "(org-table-get-constant \"bonk\")")
                                  "")))

      (when-let
          ((args (remove
                  nil (cl-loop for a in (assoc lob org-babel-library-of-babel)
                               append
                               (when (listp a)
                                 (cl-loop for b in a
                                          collect
                                          (when (eq :var (car b)) (cdr b))))))))
        (message "%s" args)
        (insert (format "(%s)" (s-join ", " args)))))))

;;(qz/org-babel-choose-block 'newstore-get-order-by-type)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

******* goto babel block
:PROPERTIES:
:ID:       899ee4ec-7b38-4cc7-9435-9015b7adf618
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-get-named-src-block-body (name)
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pt)
        (org-babel-expand-src-block)))))

;;(apply 'format "hey %s %s %s" (list 1 2 4))

(defun qz/named (name &rest args)
  "shorthand wrapper of `qz/lob-get-named-src-block-body', for clearer header args"
  (apply 'format (qz/lob-get-named-src-block-body name) args))

(defun qz/lob-get-named-src-block (name)
  (message "checking name: %s" name)
  (cl-block named    ; thank u cltl, thank u 1980s, thank u guy steele
    (save-excursion  ; check current-buffer
      (when (not (org-babel-goto-named-src-block name))
        (cl-return-from named (cons (buffer-file-name) (point)))))
    (mapcar (lambda (f)
              (with-current-buffer (find-file-noselect f)
                (save-excursion
                  ;; it's odd that nil means "i found it"
                  (when (not (org-babel-goto-named-src-block name))
                    (cl-return-from named (cons f (point)))))))
            (remove nil qz/org-babel-lob-ingest-files))))

(defun qz/lob-goto-named-src-block (name)
  (interactive
   (list
    (completing-read "lob: " (mapcar 'car org-babel-library-of-babel))))
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (find-file file)
    (goto-char pt)))
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

******** restclient-copy-as-curl + org-babel
:PROPERTIES:
:ID:       b35f66b8-f8d5-404c-9305-ca6c74d24b73
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
we use LOB blocks as

,#+name: call-my-block-name
,#+call: my-block-name(arg="value")

so with the point on =my-block-name=, of the =call= we can invoke:
- {M-x qz/lob-restclient-copy-curl-command}
... to copy the corresponding block reference's restclient definition

to improve:
- format in the call arguments before copying
  - this might be achieved by using =org-element-babel-call-parser= to
    get the components of the call, if no other /interim state/ of the
    called block exists
  - ideally this can be general enough, so as to use the
    =variable-format= type specified by the babel backend's =:var= header
    arg. idk how or where this is though -- reference the list parsing
    in ob-restclient[fn:2] -- literally just smashing it in at the top



#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-restclient-copy-curl-command (&optional name)
  "this one was a struggle"
  (interactive)
  (when-let ((name (or name (thing-at-point 'symbol))))
    (cl-destructuring-bind
        (file . pt) (qz/lob-get-named-src-block name)
      (save-excursion
        (with-current-buffer (find-file-noselect file)
          (goto-char pt)
          (next-line)
          (let ((expanded (org-babel-expand-src-block)))
            (message "expanded: %s" expanded)
            (with-temp-buffer ;;(get-buffer-create "*restclient*") ;;TODO replace w temp
              (restclient-mode)
              (insert expanded)
              (goto-char (point-min))
              (restclient-jump-next)
              (restclient-copy-curl-command))))))))
#+end_src

#+RESULTS:
: qz/lob-restclient-copy-curl-command

******* {M-l} bind lob-choose-babel-block to insert convention                  :kbd:
:PROPERTIES:
:ID:       7f29a561-60a0-4c5e-9004-ba32910ab0ef
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon>

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

******* {M-g} bind lob-goto-named-src-block to insert convention                :kbd:
:PROPERTIES:
:ID:       fb0c5f97-b758-43fe-85a0-a2fb2514df84
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon>

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block
#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-g") 'qz/lob-goto-named-src-block)
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

****** helpers
:PROPERTIES:
:ID:       22e5c99c-afed-4be2-9cd1-296172ca0e09
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* make-table-constants                                               :func:kbd:
:PROPERTIES:
:ID:       3c5750a5-620d-4b44-9a38-fd0fb218b584
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-12 Tue 16:35]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-make-table-constants ()
  "exec from the top of a tree"
  (interactive)
  (let* ((hi-lock-auto-select-face t)
         (write-constants (equal '(4) current-prefix-arg))
         ;; above is 100x better when you patch `hi-lock-face-symbol-at-point'
         ;; with `(or (and hi-lock-auto-select-face (hi-lock-read-face-name)) 'hi-yellow)'
         (col '()))
    (save-mark-and-excursion
      (org-map-tree
       (lambda ()
         (when-let* ((s (org-get-heading))
                     (s (org-no-properties s))
                     (i (string-match "::" s))
                     (k (substring s 0 (- i 1)))
                     (v (substring s (+ 3 i))))
           (message "key: %s" k)
           (message "value: %s" v)
           (setq col (cons (format "%s=%s" k v) col))
           (funcall-interactively 'highlight-phrase v)
           (message "applied highlight for '%s'" v)
           )))
      (when write-constants
        (org-back-to-heading)
        (next-line)
        (newline)
        (previous-line)
        (insert (format "#+constants: %s" (s-join " " (reverse col))))))
    (message "col: %s" col)
    col))

(define-key org-babel-map (kbd "M-d") 'qz/org-babel-make-table-constants)
#+end_src

#+RESULTS:
: qz/org-babel-make-table-constants
******* {C-c C-v C-RET} ob-shell->terminal                                 :func:kbd:
:PROPERTIES:
:ID:       3ed48629-8f96-4dfe-9cc8-894cfb2920c0
:CREATED:  [2022-06-21 Tue 23:58]
:UPDATED:  [2022-08-29 Mon 10:19]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/to-shell (command)
  (interactive) ;; TODO how to interactive bind to `command'??
  (with-current-buffer (vterm "*to-shell*")
    (mapc
     (lambda (c)
       (message c)
       (vterm-send-string c)
       (vterm-send-return))
     (qz/ensure-list command))))

(defun qz/current-src-block ()
  (interactive)
  (s-split
   "[\n]"
   (kill-new (nth 6 (car ;; lspec
                     (cdr (car
                           (save-excursion
                             (when-let ((head (org-babel-where-is-src-block-head)))
                               (goto-char head))
                             (org-babel-tangle-single-block 1 t)))))))))

(defun qz/shell-current-src-block ()
  (interactive)
  (when-let ((command (qz/current-src-block)))
    (qz/to-shell command)))

(define-key org-babel-map (kbd "C-<return>") 'qz/shell-current-src-block)
#+end_src
******* {C-c C-v M-w} org-kill-expanded-src-block                          :func:kbd:
:PROPERTIES:
:ID:       b156336c-2c1e-4ec6-9944-076c6566933f
:CREATED:  [2022-08-16 Tue 18:21]
:UPDATED:  [2022-08-16 Tue 18:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-kill-expanded-src-block ()
  (interactive)
  (kill-new (org-babel-expand-src-block))
  (message "copied: %s" (s-truncate 25 (car kill-ring))))

(define-key org-babel-map (kbd "M-w") 'qz/org-kill-expanded-src-block)
#+end_src

#+RESULTS:
: qz/org-kill-expanded-src-block

******* list->rows                                                             :func:
:PROPERTIES:
:ID:       5e08ae52-4e0f-40b7-9595-f3c325390959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel--list->rows (name lst)
  (cons (list name)
        (cons 'hline (mapcar 'list lst))))
#+end_src

#+RESULTS:
: qz/org-babel--list->rows

******* patching
:PROPERTIES:
:ID:       71c9cef1-f758-4691-a223-446dc82705fd
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-29 Fri 12:08]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
  Uses the next face from `hi-lock-face-defaults' without prompting,
  unless you use a prefix argument.
  Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

  If REGEXP contains upper case characters (excluding those preceded by `\\')
  and `search-upper-case' is non-nil, the matching is case-sensitive.

  This uses Font lock mode if it is enabled; otherwise it uses overlays,
  in which case the highlighting will not update as you type.  The Font
  Lock mode is considered \"enabled\" in a buffer if its `major-mode'
  causes `font-lock-specified-p' to return non-nil, which means
  the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face
                            (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))

(defun hi-lock-face-phrase-buffer (regexp &optional face)
  "Set face of each match of phrase REGEXP to FACE.
  Interactively, prompt for REGEXP using `read-regexp', then FACE.
  Use the global history list for FACE.

  If REGEXP contains upper case characters (excluding those preceded by `\\')
  and `search-upper-case' is non-nil, the matching is case-sensitive.
  Also set `search-spaces-regexp' to the value of `search-whitespace-regexp'.

  Use Font lock mode, if enabled, to highlight REGEXP.  Otherwise,
  use overlays for highlighting.  If overlays are used, the
highlighting will not update as you type.  The Font Lock mode
is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive
   (list
    (hi-lock-regexp-okay
     (read-regexp "Phrase to highlight" 'regexp-history-last))
    (hi-lock-read-face-name)))
  (or (facep face)
      (setq face (or (and hi-lock-auto-select-face
                          (hi-lock-read-face-name))
                     'hi-yellow)))
  (unless hi-lock-mode (hi-lock-mode 1))
  (hi-lock-set-pattern
   regexp face nil nil
   (if (and case-fold-search search-upper-case)
       (isearch-no-upper-case-p regexp t)
     case-fold-search)
   search-whitespace-regexp))
#+end_src

#+RESULTS:
: hi-lock-face-phrase-buffer

***** [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][roam]]
:PROPERTIES:
:ID:       c2c9a0bc-98e8-4053-82e2-88e91f1531f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** ensure org-agenda-directory
:PROPERTIES:
:ID:       49b913ee-235d-419e-862a-3e372946e181
:CREATED:  [2022-08-08 Mon 12:11]
:UPDATED:  [2022-08-08 Mon 12:11]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(unless (boundp 'org-agenda-directory)
  (setq org-agenda-directory nil))
#+end_src
****** create node :: ensure id, and non-exclusion
:PROPERTIES:
:ID:       38d5adfe-f060-4d06-af94-eba7fbe74621
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/create-node ()
  "assumes point is at the desired headline"
  (interactive)
  (org-id-get-create)
  (org-delete-property "ROAM_EXCLUDE"))

(defun qz/exclude-node ()
  "assumes point is at the desired headline -- unlikely to work for files"
  (org-set-property "ROAM_EXCLUDE" "t"))

(define-key org-mode-map (kbd "C-c C-x i") 'qz/create-node)
(define-key org-mode-map (kbd "C-c C-x i") 'qz/create-node)
#+end_src

#+RESULTS:
: qz/create-node

****** capture
:PROPERTIES:
:ID:       cdc7fe5d-e44e-45a2-af7d-c2f5bce5d8fa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* helpers                                                                :func:
:PROPERTIES:
:ID:       cbb71c7a-93f0-48b9-b262-781128398302
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** capture current, todo
:PROPERTIES:
:ID:       dd40d2ba-097a-49bf-9992-47f4af9b7bd1
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qz/roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (cl-destructuring-bind (thing region)
      (qz/thing-at-point-or-region-and-region)
    (org-roam-capture- :goto t
                       :keys "n"
                       :node (org-roam-node-create :title thing)
                       :props `(:immediate-finish t :jump-to-captured nil
                                                  :region ,region     :insert-at ,(point-marker)
                                                  :finalize 'insert-link))
    (qz/capture-last-captured)))
#+end_src
******** utc timestamp
:PROPERTIES:
:ID:       50e60437-87cf-487f-aca3-850a76b02fdc
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))
#+end_src

******* templates                                                               :var:
:PROPERTIES:
:ID:       5a0c855e-f0ed-4dee-bf03-b7dfec2f023b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-14 Mon 10:53]
:END:

#+begin_src emacs-lisp  :noweb-ref roam
(setq qz/org-roam-capture-head "#+title: ${title}\n")
(setq qz/capture-title-timestamp-roam "%(qz/utc-timestamp)-${slug}.org")

(setq org-roam-capture-templates
      `(("d" "default" plain "%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :unnarrowed t)
        ("n" "empty" plain "%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :immediate-finish t)
        ))
#+end_src

#+RESULTS:
| d | default | plain | %? | :if-new | (file+head %(qz/utc-timestamp)-${slug}.org #+title: ${title} |

****** core bindings                                                            :kbd:
:PROPERTIES:
:ID:       9ba6a0a6-fd3e-406f-8ac9-8b63216a469a
:CREATED:  [2022-08-15 Mon 15:37]
:UPDATED:  [2022-09-16 Fri 11:04]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-c n j") 'org-roam-dailies-capture-today)
(define-key global-map (kbd "C-c n J") 'org-roam-dailies-goto-today)

(define-key global-map (kbd "C-c n C-r") 'org-roam-refile)
(define-key global-map (kbd "C-c n r") 'org-roam-node-random)

(define-key global-map (kbd "C-c n a r") 'org-roam-ref-add)
(define-key global-map (kbd "C-c n a t") 'org-roam-tag-add)
(define-key global-map (kbd "C-c n a a") 'org-roam-alias-add)

(defun qz/consult-notes ()
  (interactive)
  (let ((default-directory org-roam-directory))
    (call-interactively 'consult-ripgrep)))

(define-key global-map (kbd "C-c n s") 'qz/consult-notes)
#+end_src


#+RESULTS:
: qz/consult-notes

****** dailies
:PROPERTIES:
:ID:       a82c9727-9f53-48f2-b7b8-7c981feeebc2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* capture                                                                 :var:
:PROPERTIES:
:ID:       6a756610-847e-410f-a79b-baa70b74e029
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** templates
:PROPERTIES:
:ID:       46fed150-b670-4899-aaa2-b029262db572
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-02-08 Wed 10:55]
:END:

- see also :: about capture templates

#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-dailies-capture-templates
      `(("d" "default" entry
         ,(s-join "\n" '("* [%<%H:%M:%S>] %?"
                         ;;"CREATED: <%<%Y-%m-%d %H:%M>>"
                         "- from :: %a"
                         ;;"- from (point) :: %f"
                         "- clocking :: %K" ; REVIEW does this solve tangents?
                         ;; the region one is a bit tricky
                         ;;"- region ::\n  #+begin_quote\n%(\"%i\")\n#+end_quote"
                         ))
         :if-new (file+head+olp
                  ,qz/org-roam-dailies-filespec
                  ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
                                  "#+filetags: daily private project" "" ""
                                  "%(qz/today-dateref)" "" ""
                                  "* today, I will"))
                  ("journal")))))

(setq qz/org-roam-dailies-capture-templates--tangent
      '("d" "default" entry
        ,(s-join "\n" '("* TANGENT [%<%H:%M>] %?"
                        ;;"CREATED: <%<%Y-%m-%d %H:%M>>"
                        "- from :: %a"))
        :if-new (file+head+olp
                 ,qz/org-roam-dailies-filespec
                 ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
                                 "#+filetags: daily private project" ""
                                 "%(qz/today-dateref)" ""
                                 "* today, I will"
                                 "* journal"
                                 "* tangent"))
                 ("tangent"))))
#+end_src

#+RESULTS:
| d | default | entry | (, (s-join |

******** helpers
:PROPERTIES:
:ID:       3c0c901e-65d7-4269-af39-da71d60997fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* today's date reference as roam links                         :project:func:
:PROPERTIES:
:ID:       24cca9c1-2a89-4de2-b840-5d2adb9180931
:END:

this is just a nice reference spec to include in the daily notes.

I've used explicit lookups for day/month here, because it's quicker to =assoc= a
small list than to hit the cache (=>2k=) or hit the database a bunch.

=year= is left as a call to =(org-roam-node-from-title-or-alias "2021")= as years
are less discrete; I haven't made all possible years, and it's infrequent to
make a new year in this case.

********** day-lookup                                                           :var:
:PROPERTIES:
:ID:       cc4d4945-4083-40d4-9b62-8c337112be2e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
;;; day lookup
(defvar qz/day-lookup
  '((Mon . "[[id:d5ad0bac-e82b-43d0-960f-26eeb1daf91b][Monday]]")
    (Tue . "[[id:cb662cc6-bde2-4f9c-b3fa-62346c6df27a][Tuesday]]")
    (Wed . "[[id:411a8e5a-8d89-4886-b2ea-047a3970710a][Wednesday]]")
    (Thu . "[[id:659b9931-ae09-422b-8e91-1bf4cc58e94c][Thursday]]")
    (Fri . "[[id:b3255cd1-db37-4e07-99cf-5e60d52a2579][Friday]]")
    (Sat . "[[id:b63897c3-30cc-42eb-83b5-c8e372e5af9a][Saturday]]")
    (Sun . "[[id:2e28574b-4793-4c05-b83d-e36e9a77515b][Sunday]]"))
  "an index; get days from abbrev (assoc 'Mon qz/day-lookup)")
#+end_src

#+RESULTS:
: qz/day-lookup

********** month-lookup                                                         :var:
:PROPERTIES:
:ID:       c9f144b9-f170-4193-898f-a7d73c514ee3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defvar qz/month-lookup
  '("[[id:b92355d7-110e-467c-b7a7-d02b2043af3f][January]]"
    "[[id:7e0af966-8d3e-4e88-b53f-d074902e175a][February]]"
    "[[id:f41751f8-a2a9-4b38-ba03-2ceec2fae4cc][March]]"
    "[[id:ae0ae458-2216-4178-8073-4a26f23747d9][April]]"
    "[[id:6a680100-e842-4257-819f-8cf6cbedddbc][May]]"
    "[[id:f811621c-1b37-43f7-9d01-52bdf9f27637][June]]"
    "[[id:a4d5c8fe-3910-4483-b59e-ce50cd6699a7][July]]"
    "[[id:94e9b0a7-6cd0-4104-821e-613876fe76e3][August]]"
    "[[id:f9ad8160-cae5-4195-a85f-0160710ce8dd][September]]"
    "[[id:da9f0d53-e3f7-4f72-bc1a-d060bc2d1745][October]]"
    "[[id:a4e3a97a-dac9-4bc6-a5e9-5949f707a6de][November]]"
    "[[id:f874ca1a-0d3f-4840-8340-511ed0ac286f][December]]")
  "an index; get days from abbrev (nth 0 qz/month-lookup)")
#+end_src

#+RESULTS:
: qz/month-lookup

********** today-dateref                                                       :func:
:PROPERTIES:
:ID:       6b0faf7e-37a2-4112-b02f-1c5f74ae48de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-dateref (&optional time)
  (cl-destructuring-bind (day nday month year)
      (split-string
       (format-time-string "%a:%d:%m:%Y" (or nil (current-time))) ":")
    (format "%s %s %s, %s"
            (cdr (assoc (intern day) qz/day-lookup))
            nday
            (nth (- (string-to-number month) 1) qz/month-lookup)
            (or (if-let ((node (org-roam-node-from-title-or-alias year)))
                    (org-link-make-string
                     (concat "id:" (org-roam-node-id node))
                     (org-roam-node-title node)))
                year))))
#+end_src
********* daily-tangent-capture[fn:1]                                          :func:
:PROPERTIES:
:ID:       8d1c9152-3401-4414-a446-b8389523e5d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
so we can use it as a COMMAND. better traceability than a lambda
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-daily-tangent-capture ()
  (interactive)
  "Capture the inevitable tangent"
  (org-capture nil "t"))
#+end_src

#+RESULTS:
: qz/org-daily-tangent-capture
********* today-as-dailies-file
:PROPERTIES:
:ID:       82ad41ee-9e11-46c9-893e-7b196ea4ce5c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-as-daily-file ()
  (format-time-string "private-%Y-%m-%d.org"))
#+end_src

******* dailies-filespec                                                        :var:
:PROPERTIES:
:ID:       b1f6f66c-c613-4c68-8c0d-4bc95da8d1cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam-hoist
(setq qz/org-roam-dailies-filespec "private-%<%Y-%m-%d>.org")
#+end_src

#+RESULTS:
: private-%<%Y-%m-%d>.org

***l* helpers
:PROPERTIES:
:ID:       dc267fb6-e7bd-43e8-8259-a01fabefc5b9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* current-roam-link
:PROPERTIES:
:ID:       506b53c2-b95d-42dd-8876-92d03ad8714d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-08-02 Tue 13:56]
:END:
#+begin_src emacs-lisp :noweb-ref roam
;; [[file:~/.doom.d/config.org::*capture convenience functions][capture convenience functions]]
(defun qz/current-roam-link ()
  "Get link to org-roam file with title"
  (interactive)

  (concat "* TODO "
          (let ((n (qz/org-roam-node-at-point)))
            (org-link-make-string
             (concat "id:" (org-roam-node-id n))
             (org-roam-node-title n)))))
#+end_src

******** TODO rename this to ~qz/roam-current-node-as-link~
:PROPERTIES:
:ID:       0d8d4cc4-e9fb-47f7-890d-a245424b37c1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* node-tags                                                              :func:
:PROPERTIES:
:ID:       9c5dcf12-9eec-4900-af35-f9302cd86975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-tags (&optional node)
  (or (and node (org-roam-node-tags node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (split-string-and-unquote (or (cadr (car (org-collect-keywords '("filetags")))) ""))
          (org-get-tags)))))

#+end_src

#+RESULTS:
: qz/node-tags

******* node-title
:PROPERTIES:
:ID:       32772be5-0c73-4fff-ba5d-2f33e351b974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-title (&optional node limit)
  (or (and node (org-roam-node-title node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (cadr (car (org-collect-keywords '("title"))))
          (substring-no-properties (org-get-heading t t t))))))
#+end_src

#+RESULTS:
: qz/node-title

******* title->roam-id
:PROPERTIES:
:ID:       a38a5df2-81dd-43ea-ac8a-f5f4b0036d37
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title->roam-id (title)
  (org-roam-node-id (org-roam-node-from-title-or-alias title)))
#+end_src

#+RESULTS:
: qz/title->roam-id

******* ensure-tag
:PROPERTIES:
:ID:       f5a8bd2b-121a-4ee3-a99f-5d0454377e23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/ensure-tag (tagstring tag)
  "Apply `org-roam-tag-add' for `tag' to `(OR node@pt NODE)'"
  (let ((ltag (-flatten (or (and (listp tag) tag)
                            (list tag)))))
    (message "ensuring tag for %s" ltag)
    (org-roam-tag-add ltag)))
#+end_src

#+RESULTS:
: qz/ensure-tag

******* ensure-alias
:PROPERTIES:
:ID:       43ded7a8-abd0-4835-9aa7-aaf4b235762a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/ensure-alias (alias &optional node)
  (let ((node (or node  (org-roam-node-at-point 'assert))))
    (save-excursion
      (with-current-buffer (find-file-noselect (org-roam-node-file node))
        (goto-char (org-roam-node-point node))
        (org-roam-alias-add alias)))))
#+end_src

#+RESULTS:
: qz/ensure-alias

****** TODO noweb tangler                                                      :meta:
:PROPERTIES:
:ID:       2bb19766-f330-4c47-9a61-93445e72ef38
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref org
(with-eval-after-load 'org-roam
  ;; NOWEB ROAM START
  (message "roam start")
  <<roam-hoist>>

  <<roam>>
  ;; NOWEB ROAM END
  )
#+end_src

****** hooks
:PROPERTIES:
:ID:       6b268794-f120-4f0e-b0d6-c6badb3c6f55
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 14:52>
:END:

******* make metadata on node created/updated
:PROPERTIES:
:ID:       5aa025eb-cc43-4866-9401-bd043ecf971b
:CREATED:  [2021-12-12 Sun 22:34]
:UPDATED:  [2022-03-10 Thu 18:48]
:END:

- :: [[id:6ae36e2f-ab6d-45bc-9448-8dce233c8528][data-driven automatic actions in org roam]]

lifted from [[id:c6c1e44f-bb16-459b-9ba3-2d4657649816][Proposal for timestamping notes at time of capture (V2) ·
Issue #1485 · org-roam/org-roam]].

it is beneficial to attach to 'org-id-get-create as =:after= advice too,
as this is my current mechanism for making a [[id:5d31286f-eef2-490a-8d44-0cded26c6475][node]] from a headline.

#+begin_src emacs-lisp :noweb-ref roam

(defun qz/org-roam--insert-timestamp (&rest args)
  (when (not (org-entry-get nil "CREATED"))
    (org-entry-put nil "CREATED" (format-time-string "[%Y-%m-%d %a %H:%M]")))
  (qz/org-roam--updated-timestamp))

(defun qz/org-roam--updated-timestamp (&rest args)
  "on the current-heading, and current-node"
  (interactive)
  (mapcar (lambda (pt)
            (when pt
              (org-entry-put
               pt "UPDATED"
               (format-time-string "[%Y-%m-%d %a %H:%M]"))))
          (list (and (org-roam-node-at-point)
                     (org-roam-node-point (org-roam-node-at-point)))
                (save-excursion
                  (org-back-to-heading-or-point-min)
                  (point)))))

(add-hook 'org-roam-capture-new-node-hook 'qz/org-roam--insert-timestamp)
(add-hook 'org-mode-hook (lambda ()
                           (add-hook 'before-save-hook
                                     'qz/org-roam--updated-timestamp nil t)))
(qz/advice- org-id-get-create :after qz/org-roam--insert-timestamp)
#+end_src

#+RESULTS:
| qz/advice-enable--org-id-get-create--qz/org-roam--insert-timestamp | qz/advice-disable--org-id-get-create--qz/org-roam--insert-timestamp |
******* auto-tagging
:PROPERTIES:
:ID:       bac18b83-9a07-4c4b-ac68-82a4ba1b480c
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-04-22 Fri 12:06]
:ROAM_EXCLUDE: t
:END:

******** test
:PROPERTIES:
:ID:       6301a181-545d-4d78-838b-b8b6849481a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:07]
:END:
********* predicate
:PROPERTIES:
:ID:       030fee83-cc3b-4bea-8e90-1183553ecdff
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** should-be-private-p; interactive sanity check the current file for privacy
:PROPERTIES:
:ID:       5b753b66-4804-41b8-9ebd-068445b66e4f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/should-be-private-p (file)
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (qz/is-private-p)))

(defun qz/is-file-private ()
  (interactive)
  (message (concat "should " (f-this-file) " be private..? "
                   (or (and (qz/should-be-private-p (f-this-file)) "yes") "no"))))
#+end_src

#+RESULTS:
: qz/is-file-private

******** helpers
:PROPERTIES:
:ID:       7658fa6d-a033-4e97-8fb1-19c6ccb09fbd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* plumbing
:PROPERTIES:
:ID:       80941280-8587-4a9b-84c4-d9af3892e7a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** refresh filetags cache
:PROPERTIES:
:ID:       755ba202-4a54-4d18-a196-56fd80e9ce83
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
addressing caching & consistency problems with :PROPERTIES: drawer and #+properties

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/hard-refresh-org-tags-in-buffer ()
  (interactive)
  (setq org-file-tags nil)      ; blast the cache
  (org-set-regexps-and-options) ; regen property detection regexp
  (org-get-tags))               ; write to cache
#+end_src
********* transformations
:PROPERTIES:
:ID:       6b3ffc25-dc8f-4bcb-9571-1169bbb57f20
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** title-to-tag
:PROPERTIES:
:ID:       b1a87e36-cb29-410c-a8af-9ef422a702de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title-to-tag (title &optional capitalize?)
  "Convert TITLE to tag."
  (if (equal "@" (cl-subseq title 0 1))
      title
    (concat "@" (s-replace " " ""
                           (or (and capitalize?
                                    (capitalize title))
                               title)))))
#+end_src

#+RESULTS:
: qz/title-to-tag
********* data
:PROPERTIES:
:ID:       66045845-0060-470d-9d0e-77c6afac1461
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** get-file-by-tag; add multi AND/OR
:PROPERTIES:
:ID:       ddbd6abb-43d8-4178-87ad-e1a43cfebaa7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-node-from-tag (tag)
  (seq-map
   'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag tag)])))
#+end_src

#+RESULTS:
: qz/org-roam-node-from-tag

*********** test
:PROPERTIES:
:ID:       6a2330ff-8636-4eb8-8af9-7fe43c2ae1c9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:44]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
(let ((s (qz/org-roam-node-from-tag "project")))
  (list (length s)
        (car s)))
#+end_src

#+RESULTS:
| 563 | /home/samuel/life/roam/20200706T122138Z-meeting_epic_cleanup.org |
********* predicates
:PROPERTIES:
:ID:       c168d9bc-6095-46e3-94c9-a4b9e1bc6ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** content-based
:PROPERTIES:
:ID:       015dff9b-6d3b-4086-b187-c2da15c23c57
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
from filepath, or structural properties of the file

*********** note-buffer-p
:PROPERTIES:
:ID:       9f3f1779-400b-48df-9af0-4af4777ebfdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/note-buffer-p (&optional node &rest _)
  "Return non-nil if the currently visited buffer is a note."
  (interactive)
  (or (org-roam-node-p node)
      (and buffer-file-name (org-roam-file-p buffer-file-name))))
#+end_src

#+RESULTS:
: qz/note-buffer-p

*********** is-private-p
:PROPERTIES:
:ID:       59ebb422-7c9a-4a33-aa8d-d52b8d718f9e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/is-private-p (&optional node &rest _)
  (interactive)
  (let ((title (qz/node-title node)))
    (if (not title)
        (and (message "unable to evaluate privateness; no title") nil) ; return false (not private)
      (or (string-match-p qz/daily-title-regexp title) ; daily
          (string-match-p "meeting" title)             ; concerns a meeting
          (qz/has-link-to-p                            ; concerns work
           (mapcar 'qz/title->roam-id
                   (list "thinkproject" "NewStore")))))))
#+end_src

#+RESULTS:
: qz/is-private-p

*********** is-daily-p
:PROPERTIES:
:ID:       d3e4a57e-bf2b-4ef5-b99f-bbb407809a48
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-daily-p (&optional node &rest _)
  (if-let ((title (qz/node-title node)))
      (string-match-p qz/daily-title-regexp title)))
#+end_src

#+RESULTS:
: qz/is-daily-p

*********** is-project-p
:PROPERTIES:
:ID:       a08ff855-c475-4718-a2e4-f11ce12f1b4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/is-project-p (&optional node &rest _)
  (or (qz/file-has-todo-p node _)
      (qz/is-daily-p node _)))
#+end_src

#+RESULTS:
: qz/is-project-p
*********** is-person-p
:PROPERTIES:
:ID:       883f7cfa-f698-4b1f-92ba-32b41b8db3da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-person-p (&optional node &rest _)
  (qz/has-link-to-p (qz/title->roam-id "person")
                    (and node (org-roam-node-p node)
                         (org-roam-node-id node))))
#+end_src

#+RESULTS:
: qz/is-person-p

*********** file-has-todo-p
:PROPERTIES:
:ID:       53530907-3b29-401c-a25d-f647d10fa98f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/file-has-todo-p (&optional node &rest _)
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks.

(1) parse the buffer using org-element-parse-buffer. It
  returns an abstract syntax tree of the current Org buffer. But
  since we care only about headings, we ask it to return only them
  by passing a GRANULARITY parameter - 'headline. This makes
  things faster.

(2) Then we extract information about TODO keyword from
  headline AST, which contains a property we are interested in -
  :todo-type, which returns the type of TODO keyword according to
  org-todo-keywords - 'done, 'todo or nil (when keyword is not
  present).

(3) Now all we have to do is to check if the buffer list contains
  at least one keyword with 'todo type. We could use seq=find on
  the result of org-element-map, but it turns out that it provides
  an optional first-match argument that can be used for our needs."
  (save-excursion
    (with-current-buffer (or (and node (org-roam-node-p node)
                                  (find-file-noselect (org-roam-node-file node)))
                             (current-buffer))
      (org-with-wide-buffer
       (org-element-map                          ; (2)
           (org-element-parse-buffer 'headline) ; (1)
           'headline
         (lambda (h)
           (eq (org-element-property :todo-type h)
               'todo))
         nil 'first-match)))))                     ; (3)

#+end_src

#+RESULTS:
: qz/file-has-todo-p

********** link-based
:PROPERTIES:
:ID:       41b87a22-731f-49c1-bd2d-6c41db00d779
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*********** has-links
:PROPERTIES:
:ID:       25c75e9d-08a4-4dba-8c0d-a187f9802c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-links (node)
  "connections exist, for id of `node'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or  (= dest $s1)
                        (= source $s1))]
   node))

(defun qz/node-has-links (node)
  "connections exist, for `node'"
  (qz/has-links (org-roam-node-id node)))
#+end_src

#+RESULTS:
: qz/node-has-links

*********** has-link-p
:PROPERTIES:
:ID:       3e6964b3-2f21-435f-8d75-bd2b728cdd6a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/has-link-p (src dst)
  "undirected connection exists, from `src' to `dst'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or (and (= dest $s1) (= source $s2))
                       (and (= dest $s2) (= source $s1)))]
   src dst))

(defun qz/node-has-link-p (src dst)
  (qz/has-link-p (org-roam-node-id src)
                 (org-roam-node-id dst)))
#+end_src

#+RESULTS:
: qz/node-has-link-p

*********** has-link-to-p
:PROPERTIES:
:ID:       0b994d06-666a-4085-baa6-b532599cf063
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-link-to-p (dst &optional src)
  "directed connection exists, from `src' to `dst'"
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (org-roam-db-query
       [:select dest
                :from links
                :where (and (= source $s1)
                            (IN dest $v2))]
       src (apply 'vector (qz/ensure-list dst)))))

(defun qz/node-has-link-to-p (dst &optional src)
  (qz/has-link-to-p (org-roam-node-id dst)
                    (and dst (org-roam-node-id dst))))
#+end_src

#+RESULTS:
: qz/node-has-link-to-p

*********** has-transitive-link-p
:PROPERTIES:
:ID:       5fcfabfe-ee6a-4151-98f4-7bd9efddf325
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(setq qz/transitive-query "
with recursive cte (id, degree) as (

  select n.id, 0 as degree
  from nodes n
  where n.id = $s1

  union all

  select distinct
    source as id, c.degree + 1 as degree
  from links l
  join cte c on l.dest = c.id
  where degree <= 1 -- therefore, yield 1st degree transitivity

)
select distinct id, degree
from cte
--where cte.id = $s2
--where degree = 2
order by degree desc
")

(defun qz/transitive-links (dst)
  (org-roam-db-query qz/transitive-query dst))

(defun qz/has-transitive-link-p (dst &optional src)
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (seq-contains
       (seq-map 'car
                (org-roam-db-query qz/transitive-query dst src))
       src)
    ))

;;(seq-contains '(1 2 4) 1)

(defun qz/node-has-transitive-link-p (dst &optional src)
  (qz/has-transitive-link (org-roam-node-id dst) src))

;;x(qz/has-transitive-link-p (qz/title->roam-id "emacs"))
#+end_src

#+RESULTS:

*********** TODO has-mutual-connection
:PROPERTIES:
:ID:       b08963dd-6cba-44c3-9ee8-29fa5f4904d2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

****** migrations
:PROPERTIES:
:ID:       36692fa1-a7e7-4847-b2d9-eba4b661979b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* helpers
:PROPERTIES:
:ID:       7fc45873-be1d-485c-b103-c60c148b74a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** migrate-jobs
:PROPERTIES:
:ID:       b7536d01-720c-4d41-b05b-cfa194a66dbc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/org-roam-migrate-jobs ()
  (interactive )
  (dolist (file (org-roam--list-all-files))
    (with-current-buffer (or (find-buffer-visiting file)
                             (find-file-noselect file))
      (message "%s visiting" file)
      (qz/dispatch-hook)
      (save-buffer))))

                                        ;(qz/org-roam-migrate-jobs)
#+end_src
******* TODO #roam_key -> =:ROAM_REFS:=
:PROPERTIES:
:ID:       1c775b12-32d0-4531-82e3-8813d3138d9b
:CREATED:  <2021-12-14 Tue 18:14>
:END:
#+roam_key: https://bonk.com

a function of a node
#+begin_src emacs-lisp

#+end_src

******* created && updated
:PROPERTIES:
:ID:       5367ec4f-24d6-4416-a8d9-18df8cb1c0c2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:49]
:END:
e.g https://commonplace.doubleloop.net/recentchanges
(or updated created)

entry log -> created
activity log -> (node, ?commit=HEAD) ?updated, created

created -> property:created, file-name:created
updated -> property:updated, file-name:updated

#+begin_src emacs-lisp
(defun qz/file-created-as-timestamp (&optional file)
  (when-let* ((file (or file (buffer-file-name (current-buffer))))
              (ffile (f-base file))
              (p (string-match "-" ffile))
              (s (substring ffile 0 p)))
    (cond
     ((= p 16) (let* ((td (timezone-parse-date s))
                      (tt (timezone-parse-time (elt td 3))))
                 (format "[%s %s]"
                         (s-join "-" (cl-subseq td nil 3))
                         (s-join ":" tt))))
     ((= p 14) (let* ((yy (substring s 0 4))
                      (mm (substring s 4 6))
                      (dd (substring s 6 8))
                      (hh (substring s 8 10))
                      (MM (substring s 10 12))
                      (ss (substring s 12 14)))
                 (format "[%s-%s-%s %s:%s:%s]"
                         yy mm dd
                         hh MM ss))))))

(defun qz/org-roam-node-updated-precedence (pt file)
  (list (org-roam-get-keyword "UPDATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "UPDATED"))))
          (when (not (string-empty-p v)) v))
        (format-time-string
         "[%Y-%m-%d %H:%M:%S]"
         (file-attribute-modification-time (file-attributes file)))))

(defun qz/org-roam-node-created-precedence (pt file)
  (list (org-roam-get-keyword "CREATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "CREATED"))))
          (when (not (string-empty-p v)) v))
        (qz/file-created-as-timestamp file)))

(defun qz/org-roam-node-date-precedence (node date-fn)
  (save-excursion
    (let* ((pt (org-roam-node-point node))
           (file (org-roam-node-file node)))
      (with-current-buffer (or (find-buffer-visiting file)
                               (find-file-noselect file))
        (goto-char pt)
        ;;(message "qz: getting node updated: %s" (org-roam-node-title node))
        (org-with-wide-buffer
         (car (remove nil (funcall date-fn pt file))))))))

(defun qz/org-roam-node-updated-date (node)
  (qz/org-roam-node-date-precedence
   node
   (lambda (pt file)
     (append (qz/org-roam-node-updated-precedence pt file)
             (qz/org-roam-node-created-precedence pt file)))))

(defun qz/org-roam-node-created-date (node)
  (qz/org-roam-node-date-precedence
   node
   '(lambda (pt file)
      (append (qz/org-roam-node-created-precedence pt file)
              (reverse (qz/org-roam-node-updated-precedence pt file))))))

;;(cl-subseq [1 2 3] 1 2)
;;(car [1 2 3])
;;(or (s-join "a" nil) "b")

;; (let ((node (org-roam-node-from-title-or-alias "wine")))
;;   (list (qz/org-roam-node-updated-date node)
;;         (qz/org-roam-node-created-date node)))

;;(funcall (lambda (a b c) (message "%s %s %s" a b c)) 1 2 3)

(defun qz/do-migration--created-updated ()
  (let ((org-mode-hook nil))
    (cl-loop for node in (seq-map 'car (org-roam-db-query [:select id :from nodes]))
             ;;(org-roam-node-list) groups erroneously
             collect
             (let ((node (org-roam-populate (org-roam-node-create :id node))))
               (format "%s,%s,%s,%s,%s"
                       ;;"%s:%s,%s,%s,%s" to show with point
                       (org-roam-node-id node)
                       ;;(org-roam-node-point node)
                       (qz/org-roam-node-updated-date node)
                       (qz/org-roam-node-created-date node)
                       (org-roam-node-title node))
               (kill-buffer (get-file-buffer (org-roam-node-file node)))))))
#+end_src

#+RESULTS:
: /tmp/oo

******** TODO add override in ordering if DATE is 20210803
:PROPERTIES:
:ID:       87bd401c-7c9b-4cb4-b299-513bce1792b3
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  <2022-03-11 Fri 14:32>
:ROAM_EXCLUDE: t
:END:
******** sanity
:PROPERTIES:
:ID:       80cb794e-d401-4569-adb2-b68dbc285db0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | wc -l
cat /tmp/oo | uniq -c | sort -r | wc -l
cat /tmp/oo | uniq -c | sort -r | head
#+end_src

#+RESULTS:
:results:
3394
3395
1 fffec49f-29e6-4eeb-bf72-8a332f758222,<2021-09-30 01:00:38>,<2020-07-13 09:03:06>,Why, and how much, extra disk space is required when upgrading with Slony-1?
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,pollo de limon
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2021-06-15>
1 ffa31214-f0c3-415a-be09-16971e46c56e,<2022-01-07 Fri 13:06>,<2022-01-07 Fri 13:06>,tig welding
1 ff7134e1-beed-4110-a1d1-299a77dcec12,<2021-10-05 11:01:34>,<2021-08-16 18:32:45>,how did you get into <<job>>
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76,<2021-10-19 08:47:34>,<2020-05-18 09:40:13>,meeting
1 ff4838ef-41ae-43d4-844e-c4d8a1451411,<2021-09-30 01:00:38>,<2021-08-13 16:10:35>,Arthur Holmes
1 ff318634-08d2-4987-8a82-3a436303c753,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2020-08-23>
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,wine
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963,<2021-12-15 Wed 11:36>,<2021-04-20 11:47:08>,NewStore
:end:

******** duplicate ids?
:PROPERTIES:
:ID:       bac1789e-70fa-4ab0-a762-befa8aee61a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
only if we use org-roam-node-list smh
#+begin_src shell :results drawer
cat /tmp/oo | cut -d, -f1 | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1 fffec49f-29e6-4eeb-bf72-8a332f758222
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f
1 ffa31214-f0c3-415a-be09-16971e46c56e
1 ff7134e1-beed-4110-a1d1-299a77dcec12
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76
1 ff4838ef-41ae-43d4-844e-c4d8a1451411
1 ff318634-08d2-4987-8a82-3a436303c753
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963
:end:

******** date distribution
:PROPERTIES:
:ID:       a51780f5-f313-43fd-9e4a-4ea9f1d5d03c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* updated
:PROPERTIES:
:ID:       19fe8ad7-4a01-426c-805f-60dcb3b0c76e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
534
2246 <2021-09-30 01:00:38>
96 <2022-01-06 12:46:02>
77 <2021-10-19 08:47:34>
35 <2022-01-12 20:09:37>
34 <2021-10-05 11:42:04>
14 <2022-01-12 16:47:20>
14 <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48>
11 <2021-10-01 16:24:07>
10 <2022-01-12 13:40:32>
:end:

********* created
:PROPERTIES:
:ID:       8a0ef7a7-d1ee-43be-86bc-3de2974c3df2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1893
500 <2021-08-13 16:10:35>
459 <2021-09-30 01:00:38>
102 <2021-04-20 11:47:08>
37 <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34>
20 <2020-05-15 16:39:41>
15 <2021-12-13 11:13:32>
13 <2022-01-12 Wed 16:58>
12 <2020-05-11 15:09:56>
11 <2021-06-08 08:19:23>
:end:

********* created,updated
:PROPERTIES:
:ID:       d902fa0b-bedc-4df0-b5a6-05247c4716a2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2,$3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
459 <2021-09-30 01:00:38> <2021-09-30 01:00:38>
241 <2021-09-30 01:00:38> <2021-08-13 16:10:35>
96 <2022-01-06 12:46:02> <2021-04-20 11:47:08>
35 <2022-01-12 20:09:37> <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34> <2021-10-19 08:47:34>
26 <2021-10-19 08:47:34> <2021-08-13 16:10:35>
19 <2021-10-05 11:42:04> <2021-08-13 16:10:35>
14 <2022-01-12 16:47:20> <2020-05-15 16:39:41>
14 <2021-12-13 11:13:32> <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48> <2021-06-08 08:19:23>
:end:

******** deciding on timeline formats
:PROPERTIES:
:ID:       f12933d5-0769-46bc-a6e5-d7d57fc4efe1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* node feed: timeline of created-only
:PROPERTIES:
:ID:       361cf6bc-5261-4c49-aef9-15ef7ce18640
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* activity feed: timeline of updated + created
:PROPERTIES:
:ID:       56804c59-f6a9-4e6b-b52d-c032939369f0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** updated instance = commit + updated value
:PROPERTIES:
:ID:       5df850d0-ef27-4ae4-b064-e388b6c13f10
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********** created instance = created value
:PROPERTIES:
:ID:       6b862e88-77f4-4718-8448-9184524fb714
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** TODO node timelone
:PROPERTIES:
:ID:       e5468ed2-9946-4e39-bfab-5a257f1b11cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

******* project-files (has todo)
:PROPERTIES:
:ID:       ff40dc98-d9dd-4ec5-85e6-48a33d459a79
:CREATED:  [2022-03-31 Thu 11:03]
:UPDATED:  [2022-03-31 Thu 11:03]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref null
(dolist (file (split-string (shell-command-to-string
                             "rg TODO ~/life/roam -t org --files-with-matches")
                            "\n"))
  (unless (string-empty-p file)
    (with-current-buffer (find-file-noselect f)
      (org-mode)
      (unless
          (qz/file-has-todo-p

#+end_src

****** protocol (ref)
:PROPERTIES:
:ID:       366af88d-6c6d-4638-970f-c00f33152ef6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* capture                                                                 :var:
:PROPERTIES:
:ID:       8c40e382-4b74-461c-a1fb-e64d108a89c5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** TODO templates
:PROPERTIES:
:ID:       a7f7f97d-d3c7-4941-a522-f3530bc8379c
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-14 Mon 11:12]
:END:

#+begin_src emacs-lisp  :noweb-ref roam  :results drawer
;;; ref capture
(setq org-roam-capture-ref-templates
      `(("r" "ref" plain
         "\n#+begin_quote\n${body}\n#+end_quote\n%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            "#+title: ${title}\n")
         :unnarrowed t)))
#+end_src

#+RESULTS:
:results:
((r ref plain
#+begin_quote
${body}
#+end_quote
%? :if-new (file+head %(qz/utc-timestamp)-${slug} #+title: ${title}
) :unnarrowed t))
:end:
****** visual
:PROPERTIES:
:ID:       ebccab15-1c63-43fe-be76-8b43d08ecf79
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* =*org-roam*= (backlinks) buffer                                      :var:func:
:PROPERTIES:
:ID:       fca1f0cb-46ad-4064-ad9d-925dc56b4ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** ... images should be small
:PROPERTIES:
:ID:       1a5a2369-eef1-4e73-b701-e5a91a11e22a
:CREATED:  <2021-12-12 Sun 22:38>
:END:

so set a buffer-local value to constrain the size of images across
their width with 'org-image-actual-width, and attach to the hook
'org-roam-mode-hook.

easy peasy, only took me 20 minutes

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/roam-buffer-image-width ()
  (setq-local org-image-actual-width 150)
  (org-redisplay-inline-images))

(add-hook 'org-roam-mode-hook 'qz/roam-buffer-image-width)
#+end_src
******** ... start buffer folded/collapsed
:PROPERTIES:
:ID:       87056aa9-d49b-42df-8f66-4a7f266785d0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
https://github.com/org-roam/org-roam/issues/991#issuecomment-882010053

#+begin_src emacs-lisp :noweb-ref roam
(cons->table
 (add-to-list 'magit-section-initial-visibility-alist (cons 'org-roam-node-section 'hide)))
#+end_src

#+RESULTS:
| org-roam-node-section | hide |
| stashes               | hide |

***** download                                                                  :var:
:PROPERTIES:
:ID:       b32477c3-9346-4c88-8710-043b6eb9824f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(require 'org-download)
#+end_src
**** capture
:PROPERTIES:
:ID:       609ab395-5ce2-4878-8bda-70dfe0182c78
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** helpers                                                                  :func:
:PROPERTIES:
:ID:       d5f2db01-4894-4e0b-90d2-e9123b87f5de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))
#+end_src

***** templates
:PROPERTIES:
:ID:       26499611-33f9-46a4-b46d-f6fe004a6620
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2023-03-01 Wed 13:59]
:END:

these are regular [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] capture templates, but we will defer to
org-roam loading, as we use it's variables.
- :: 'org-roam-directory
- :: 'org-roam-dailies-directory

#+begin_src emacs-lisp  :noweb-ref roam
;; [[file:~/.doom.d/config.org::*templates][templates]]
(setq org-capture-templates
      `(;; basic fire&forget
        ("i" "inbox" entry
         (file ,(concat org-roam-directory "/inbox.org"))
         "* TODO %? \n\n - from :: %a")

        ;; spanish language capturing
        ("v" "vocab; spanish" entry
         (file+headline ,(concat org-roam-directory "/spanish_language.org") "vocab, phrases")
         ,(s-join "\n" '("** \"%?\" :es:"
                         "- from :: %a" ""
                         "*** :en:" "")))

        ;; capture link to live `org-roam' thing
        ("n" "now, as in NOW" entry (file ,(concat org-roam-directory "/wip.org"))
         ,(s-join "\n" '("* TODO [#A1] %? "
                         "DEADLINE: %T"
                         "CREATED: %u")))

        ;; fire directly into inbox from outside of emacs
        ("c" "org-protocol-capture" entry (file ,(concat
                                                  org-roam-directory "/inbox.org"))
         ,(s-join "\n" '("* TODO [[%:link][%:description]]" ""
                         "#+begin_quote" ""
                         "%i"
                         "#+end_quote"))
         :immediate-finish t)

        ;; push last captured item into inbox
        ("l" "last-capture" entry (file ,(concat org-roam-directory "/inbox.org"))
         (function qz/inbox-last-captured)
         :immediate-finish t)

        ("I" "current-roam" entry (file ,(concat org-roam-directory "/inbox.org"))
         (function qz/current-roam-link)
         :immediate-finish t)

        ("W" "weekly review" entry
         (file+datetree ,(concat org-roam-directory "/reviews.org"))
         ;; ... from template
         (file ,(concat org-roam-directory "/templates/weekly_review.org")))

        ("D" "daily review" entry
         (file+datetree ,(concat org-roam-directory "/reviews.org"))
         ;; ... from template
         (file ,(concat org-roam-directory "/templates/daily_review.org")))

        ("S" "screenshot" entry
         (file ,(concat org-roam-directory "/screenshots.org"))
         ,(s-join "\n" '("* screenshot: %?" ""
                         "%(qz/screenshot-clip)"
                         )))
        ))


;; (defun qz/screenshot-clip ()
;;   (interactive)
;;   (let ((default-directory (concat org-roam-directory "/images")))
;;     (s-replace "file:" (format "file:%s/" default-directory)
;;                (with-temp-buffer
;;                  (let ((default-directory default-directory))
;;                    (org-mode)
;;                    (org-download-clipboard)
;;                    (buffer-string))))))

;; (setq org-screenshot-method ;;"/gnu/store/n4arghf8l3f6svv2xlxwnvw4jcwa48qk-sway-shot-output %s"
;;       "/gnu/store/am017g4gdhf45kvg5xkp3s2lhkbfdwzh-sway-shot-window-or-selection %s")


;; [[file:~/.doom.d/config.org::*capture templates][roam capture templates]]

#+end_src

#+RESULTS:
: qz/screenshot-clip







****** about capture templates
:PROPERTIES:
:ID:       7701c5b0-462f-46af-b7ba-5a8f8e65b2cc
:CREATED:  [2022-09-28 Wed 17:22]
:UPDATED:  [2022-09-28 Wed 17:22]
:ROAM_EXCLUDE: t
:END:

- info :: [[info:org#Template expansion][org#Template expansion]]

******* ~%a~ :: annotation (probably link from =org-store-link=
:PROPERTIES:
:ID:       f9a3eb73-b74a-457d-be03-4ec36eeb0990
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-09-28 Wed 17:24]
:ROAM_EXCLUDE: t
:END:

******* ~%f~ :: the file visited when capture was called
:PROPERTIES:
:ID:       b391a18b-7e41-4263-96c0-62ff13690d0b
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-09-28 Wed 17:24]
:ROAM_EXCLUDE: t
:END:

******* ~%K~ :: link to currently clocked task
:PROPERTIES:
:ID:       160e965f-6df4-4db7-8f59-83347f56f499
:CREATED:  [2022-09-28 Wed 17:24]
:UPDATED:  [2022-10-27 Thu 10:44]
:ROAM_EXCLUDE: t
:END:

**** core bindings
:PROPERTIES:
:ID:       e4977820-dc45-4bfe-bab2-7a568b573b24
:CREATED:  [2022-08-15 Mon 12:24]
:UPDATED:  [2022-09-28 Wed 16:29]
:ROAM_EXCLUDE: t
:END:

***** exposition
:PROPERTIES:
:ID:       cd3890a7-7211-4042-9331-b5b5d230ab62
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2022-09-28 Wed 16:36]
:ROAM_EXCLUDE: t
:END:

I find myself working structurally with the tree, for outlining
quickly and giving structure; it is super nice to be able to insert
siblings / children without


| bind    | action       | respect? |
|---------+--------------+----------|
| C-RET   | heading      | t        |
| C-S-RET | todo heading | t        |
| M-S-RET | todo heading | f        |
| C-M-RET | subheading   | f        |



C-
C-S

C-M
C-M-S

***** src
:PROPERTIES:
:ID:       ed581dc6-ce42-430a-921c-c07ac5c12698
:CREATED:  [2022-09-28 Wed 16:36]
:UPDATED:  [2022-10-26 Wed 11:57]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-<return>")
            'org-insert-heading-respect-content)
(define-key org-mode-map (kbd "C-S-<return>")
            'org-insert-heading)

(defun org-insert-subheading-respect-content (arg)
  (interactive "P")
  (let ((org-insert-heading-respect-content t))
    (org-insert-subheading arg)))

(define-key org-mode-map (kbd "C-M-<return>")
            'org-insert-subheading-respect-content)
(define-key org-mode-map (kbd "C-M-S-<return>")
            'org-insert-subheading)

(define-key org-mode-map (kbd "C-c C-M-<") 'org-do-promote)
(define-key org-mode-map (kbd "C-c C-M->") 'org-do-demote)

(define-key org-mode-map (kbd "C-c C-M-p")
             (lambda ()
               (interactive)
               (make-marker)
               (org-up-heading-or-point-min)))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (org-up-heading-or-point-min) |

**** effort estimates
:PROPERTIES:
:ID:       4139f89e-a615-43b6-a951-79880772cd4e
:CREATED:  [2022-09-28 Wed 17:36]
:UPDATED:  [2022-09-29 Thu 13:08]
:ROAM_EXCLUDE: t
:END:

***** how do estimates work?
:PROPERTIES:
:ID:       c196b300-6381-454c-9f9f-215c99ef5cb8
:CREATED:  [2022-09-28 Wed 17:34]
:UPDATED:  [2022-09-28 Wed 17:36]
:END:

****** :: [[info:org#Effort Estimates][org#Effort Estimates]]
:PROPERTIES:
:ID:       07604b9f-75e7-4bcc-84b4-63738e562080
:CREATED:  [2022-09-28 Wed 16:50]
:UPDATED:  [2022-09-28 Wed 17:36]
:ROAM_EXCLUDE: t
:END:
****** {C-c C-x e} :: org-set-effort || agenda: ~{e}~
:PROPERTIES:
:ID:       c8791cb2-989c-41c0-95a3-976eba8670fa
:CREATED:  [2022-09-28 Wed 16:51]
:UPDATED:  [2022-09-28 Wed 17:36]
:ROAM_EXCLUDE: t
:END:

#+begin_quote
Set the effort estimate for the current entry.  With a prefix
argument, set it to the next allowed value—see below.  This command is
also accessible from the agenda with the ‘e’ key.
#+end_quote

***** org-agenda-columns-add-appointments-to-effort-sum :: t = include
:PROPERTIES:
:ID:       c9c390d6-52ee-4604-ac6e-846c0f82d59d
:CREATED:  [2022-09-28 Wed 16:53]
:UPDATED:  [2022-09-28 Wed 17:41]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-agenda-columns-add-appointments-to-effort-sum t)
#+end_src

#+RESULTS:
: t

***** org-effort-property (default) :: ="Effort"=
:PROPERTIES:
:ID:       91b8820b-90e7-4cd0-b676-9276fe2c1f96
:CREATED:  [2022-09-28 Wed 17:42]
:UPDATED:  [2022-09-28 Wed 17:42]
:ROAM_EXCLUDE: t
:END:

***** org-agenda-default-appointment-duration (unit = minutes) :: 30 mins       :var:
:PROPERTIES:
:ID:       cfa2a1c8-b746-4612-88ae-42014e8dd15e
:CREATED:  [2022-09-28 Wed 16:53]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-agenda-default-appointment-duration 30)
#+end_src

#+RESULTS:
: 30

***** preset efforts; file-level, or org-global-properties
:PROPERTIES:
:ID:       b776cc47-5dab-40aa-a0e8-5dd113b6d926
:CREATED:  [2022-09-28 Wed 16:56]
:UPDATED:  [2022-09-28 Wed 16:56]
:ROAM_EXCLUDE: t
:END:

****** org-global-properties
:PROPERTIES:
:ID:       a5e61661-7e7a-4f93-9505-0844df4badf8
:CREATED:  [2022-09-28 Wed 17:04]
:UPDATED:  [2022-09-28 Wed 17:43]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(add-to-list 'org-global-properties
             '("Effort_ALL" . "0 0:15 0:30 1:00 2:00 4:00 8:00"))
#+end_src

#+RESULTS:
: ((Effort_ALL . 0 0:15 0:30 1:00 2:00 4:00 8:00))

****** file-level
:PROPERTIES:
:ID:       d1efc59c-cc92-4049-a9ff-653ff0c8944c
:CREATED:  [2022-09-28 Wed 17:04]
:UPDATED:  [2022-09-28 Wed 17:33]
:ROAM_EXCLUDE: t
:END:

#+begin_example
#+properties: Effort_ALL
#+end_example

===

**** noweb tangler                                                             :meta:
:PROPERTIES:
:ID:       ded3219a-de09-4bee-a919-bf79debb9022
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 15:25]
:END:
#+begin_src emacs-lisp
;; NOWEB ORG START
(message "pre org: %s" (shell-command-to-string "date"))
(with-eval-after-load 'org
  (require 's)
  (message "mid org: %s" (shell-command-to-string "date"))
  <<org>>
  )
(message "post org: %s" (shell-command-to-string "date"))
;; NOWEB ORG END
#+end_src

**** settings
:PROPERTIES:
:ID:       3f138707-783b-474b-9d18-dca32c60b4fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** org-confirm-babel-evaluate; don't ask                                     :var:
:PROPERTIES:
:ID:       57ced9da-b883-47ea-9a88-00579d24dbf9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref org
(setq org-confirm-babel-evaluate nil)
#+end_src

***** org-refile-targets                                                        :var:
:PROPERTIES:
:ID:       e52c338d-9289-4027-9b79-5013a0ef02f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp  :noweb-ref org
;; [[file:~/.doom.d/config.org::*refile][refile]]
(setq org-refile-targets '(("reading.org" :level . 0)
                           ("emacs.org" :level . 0)
                           ("watching.org" :level . 0)
                           ("learning.org" :level . 0)
                           ("inbox.org" :level . 0)
                           ("sample.org" :level . 0)
                           ("wip.org" :level . 0)))
#+end_src

***** TODO org-log                                                              :var:
CLOSED: [2022-03-10 Thu 19:24]
:PROPERTIES:
:ID:       23e1b5e7-acac-4670-b421-4f84904c8b57
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-11 Fri 10:09]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-03-10 Thu 19:24] \\
  testing done notes
:END:

****** TODO org-log-repeat
:PROPERTIES:
:ID:       ece698ff-9204-4a2f-96ea-57b11c0649b8
:CREATED:  [2022-03-10 Thu 19:25]
:UPDATED:  [2022-03-10 Thu 19:26]
:ROAM_EXCLUDE: t
:END:
once we find out about sequences and repeats

****** org-log-refile
:PROPERTIES:
:ID:       882be009-a2e8-4ba1-95dd-6252b6108b2f
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-refile 'note)
#+end_src

#+RESULTS:
: note

****** org-log-redeadline
:PROPERTIES:
:ID:       b791e4a5-9eaa-475a-9ca7-c3b2ac4325ff
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-redeadline 'note)
#+end_src

#+RESULTS:
: note

****** org-log-reschedule
:PROPERTIES:
:ID:       c3564248-02b8-4912-8ab4-5d33c1fce5ba
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-reschedule 'note)
#+end_src

#+RESULTS:
: note

****** org-log-done                                                             :var:
:PROPERTIES:
:ID:       1728a0dc-4e3f-4317-8d3d-4ebb3dbc0375
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-13 Wed 14:29]
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-done 'note)
#+end_src

***** org-startup-folded                                                        :var:
:PROPERTIES:
:ID:       948baebf-3fae-499d-8036-6e454de83417
:CREATED:  <2022-02-27 Sun 15:04>
:UPDATED:  [2022-09-30 Fri 13:54]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
;;(setq org-startup-folded 'content)
#+end_src

***** org-enforce
:PROPERTIES:
:ID:       ee742dd8-192d-4901-a5f8-342a403b6094
:CREATED:  [2022-04-06 Wed 11:39]
:UPDATED:  [2022-10-04 Tue 18:00]
:ROAM_EXCLUDE: t
:END:

- :: (info-apropos "org-enforce")

***** org-tags-column
:PROPERTIES:
:ID:       2809e6c5-ab8c-475a-ab96-6236563e5ce8
:CREATED:  [2022-04-25 Mon 10:09]
:UPDATED:  [2022-04-25 Mon 11:29]
:ROAM_EXCLUDE: t
:END:

any value <0 is a most controversial decision

- see also :: [[id:3db09afc-ea16-4ec4-883c-27ad7589f7f1][align tags]]
- see also :: [[id:0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67][org-tags-alist]]

#+begin_src emacs-lisp :noweb-ref org
(setq org-tags-column -85)    ;; auto works better for olivetti
;; (setq org-tags-column 120) ;; for wide screens & no 80char limiting
#+end_src

#+RESULTS:
: 120

***** org-tags-alist
:PROPERTIES:
:ID:       0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67
:CREATED:  [2022-04-25 Mon 10:13]
:UPDATED:  [2022-04-25 Mon 10:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("wip" . ?W)
        ("CANCELLED" . ?c)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        (:newline)
        ("talk" . ?t)
        ("film" . ?f)))

;;(cons->table org-tag-alist)
#+end_src

#+RESULTS:
| @errand   | 101 |
| @work     | 119 |
| @home     | 104 |
| @blog     |  66 |
| :newline  | nil |
| emacs     |  69 |
| wip       |  87 |
| CANCELLED |  99 |
| :newline  | nil |
| learning  | 108 |
| research  | 114 |
| :newline  | nil |
| book      |  98 |
| article   |  97 |
| paper     | 112 |
| :newline  | nil |
| talk      | 116 |
| film      | 102 |

***** org-enforce-todo-dependencies                                             :var:
:PROPERTIES:
:ID:       51ff922b-e6d5-4437-9fdc-d6208de9b959
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-dependencies t)
#+end_src

#+RESULTS:
: t

***** org-enforce-todo-checkbox-dependencies                                    :var:
:PROPERTIES:
:ID:       496407f8-71cf-4745-a5de-d0f1817ce600
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-checkbox-dependencies t)
#+end_src

#+RESULTS:
: t

**** links
:PROPERTIES:
:ID:       9f04fd1e-2ce6-440a-8c29-e23c72b0af23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** insert link to attachment
:PROPERTIES:
:ID:       b34da154-8668-44fc-89da-de39359759e0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 17:33]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-choose-current-attachment ()
  (let ((attach-dir (org-attach-dir)))
    (if attach-dir
        (let* ((file (pcase (org-attach-file-list attach-dir)
                       (`(,file) file)
                       (files (completing-read "Open attachment: "
                                               (mapcar 'list files) nil t))))
               (path (expand-file-name file attach-dir)))
          path))))

(defun qz/org-insert-current-attachment ()
  (interactive)
  (insert
   (format "[[file:./%s]]"
           (dired-make-relative
            (qz/org-choose-current-attachment)))))

(define-key org-mode-map (kbd "C-c M-a") 'qz/org-insert-current-attachment)

#+end_src
***** refine org-link for generic files ; replaces {C-c M-l}
:PROPERTIES:
:ID:       220874c8-4330-4440-a616-31b2e0a47ef2
:CREATED:  [2022-05-23 Mon 10:46]
:UPDATED:  [2022-11-09 Wed 12:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-insert-last-stored-link (arg)
  "Insert the last link stored in `org-stored-links'."
  (interactive "p")
  (qz/org-insert-all-links arg "" "\n"))

(defun qz/org-insert-all-links (arg &optional pre post)
  "Insert all links in `org-stored-links'.
When a universal prefix, do not delete the links from `org-stored-links'.
When `ARG' is a number, insert the last N link(s).
`PRE' and `POST' are optional arguments to define a string to
prepend or to append."
  (interactive "P")
  (let ((org-link-keep-stored-after-insertion (equal arg '(4)))
        (links (copy-sequence org-stored-links))
        (pr (or pre "- "))
        (po (or post "\n"))
        (cnt 1) l)
    (if (null org-stored-links)
        (message "No link to insert")
      (while (and (or (listp arg) (>= arg cnt))
                  (setq l (if (listp arg)
                              (pop links)
                            (pop org-stored-links))))
        (setq cnt (+ 1 cnt))
        (insert pr)
        (message "%s" `((:l ,l)
                        (:car-l ,(car l))
                        (:cadr-l ,(cadr l))
                        (:mod-l ,(car (last (s-split "/" (car l)))))))
        (org-insert-link
         nil (car l)
         (or (cadr l)
             (qz/ol-file l)))
        (insert po)))))

(define-key org-mode-map (kbd "C-c M-l") 'qz/org-insert-last-stored-link)
#+end_src
****** qz/ol-file
:PROPERTIES:
:ID:       13edec53-73d8-4384-a793-83c303c047e2
:CREATED:  [2023-03-13 Mon 12:55]
:UPDATED: [2023-03-13 Mon 12:57]
:ROAM_EXCLUDE: t
:END:
#+name: def-ol-file
#+begin_src emacs-lisp :noweb-ref org
(defun qz/ol-file (link)
  "transform file path into pretty ol-output
            - respect projects; truncate prior path, keeping only basename
"
  ;; (car (last (s-split "/" "file:~/sys/rde/goop.boop::pattern")))
  ;; == "goop.boop::pattern"
  ;; (message  "HELLO :: %s/%s" p (car (last (s-split "/" p))))
  (let* ((p (car link))
         (inner (mapcar
                 (lambda (s) (let* ((ss (car s)))
                               (and (s-matches? (concat "\b" (f-base ss)) p)
                                    (cons (f-base ss) ss))))
                 project--list))
         (suffix (s-join
                  " . "
                  ;; sort by length of path desc, taking the innermost subproj
                  ;; take first value of first result
                  (--tb (cl-sort (remove nil inner)
                                 (lambda (a b) (gt (length a) (length b)))
                                 :key 'cdr)
                        (mapcar 'car)
                        (reverse)))))
    (format "%s%s"
            (or (and suffix (not (string-empty-p suffix))
                     (format "(%s)" suffix))
                "")
            (car (last (s-split "/" p))))))

;;(car org-stored-links)
;;(qz/ol-file (car org-stored-links))
#+end_src

[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(ghorg . python . events) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]
#+RESULTS: def-ol-file
: t

#+name: org-alias-angle-brackets
#+begin_src emacs-lisp :noweb-ref org
(defalias '--tb '->>)
(defalias '--tf '->)
(defalias 'gt '>)
(defalias 'lt '<)
#+end_src

#+RESULTS: org-alias-angle-brackets
: lt


[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(ghorg . python . events) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]

[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(nil) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]


[[file:~/git/ghorg/all-groups/newstore/engineering/libraries/python/events/newstore/shared/events/test.py::def assert_expected_events_were_emitted(self, service_name, test_case):][(nil) test.py::def assert_expected_events_were_emitted(self, service_name, test_case):]]

[[file:~/git/ns/routing/logistic_order/services/logistic_order/test/component_tests/sales_order_open/__init__.py::class SalesOrderOpenComponentTestBase(EventPumpingTestBase):][(rde . ~/git/sys/rde/)/__init__.py::class SalesOrderOpenComponentTestBase(EventPumpingTestBase):]]
**** hooks
:PROPERTIES:
:ID:       5ff7526d-f62c-49fd-8752-07d829fce0d8
:CREATED:  <2022-02-23 Wed 09:17>
:ROAM_EXCLUDE: t
:END:
***** org-mode-hook -> before-save-hook: create ids for headines in buffer
:PROPERTIES:
:ID:       b07ff6f9-2e00-467c-98e8-c4c8697ce08f
:CREATED:  <2022-02-23 Wed 09:17>
:END:

adapted for [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][org-roam]], the =ROAM_EXCLUDE= property is set, to reduce
noise in the database, but retain id-wise properties of linking.

see q

#+begin_src emacs-lisp :noweb-ref org
(defun qz/create-excluded-ids-for-headlines-in-buffer ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries (lambda (&rest r)
                     (unless (org-id-get)
                       (org-id-get-create)
                       (org-set-property "ROAM_EXCLUDE" "t")))))


(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook
                      'qz/create-excluded-ids-for-headlines-in-buffer nil 'local)))

(setq org-id-link-to-org-use-id t)
#+end_src

***** org-mode-hook -> adaptive-wrap-prefix-mode
:PROPERTIES:
:ID:       13fb181a-3f55-4b63-b2ff-c23af6b29f8f
:CREATED:  [2022-10-31 Mon 12:20]
:UPDATED:  [2022-10-31 Mon 12:20]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb ref org
(when (fboundp 'adaptive-wrap-prefix-mode)
  (add-hook 'org-mode-hook 'adaptive-wrap-prefix-mode))
#+end_src

**** tag
:PROPERTIES:
:ID:       58ddf980-3404-4a72-bb1f-47a5a18a5d66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** [[id:26b5040b-0883-444f-af7a-abd4e1d67c0e][my thoughts]]
:PROPERTIES:
:ID:       89daceb2-7818-450f-9638-1415a377b3bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I'm using tags and auto-tags rather sporadically
- person
- private
- daily

****** TODO tag analysis (file | -> headline) ; [[id:3ec0367f-9ff5-419d-9a44-a3424656c1eb][org-roam database machinations]]
:PROPERTIES:
:ID:       cefcceaa-3708-48b4-bb14-ac5462c00474
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** org-tag-alist                                                             :var:
:PROPERTIES:
:ID:       21abbf73-43fb-4bc4-a5fb-53e7dc0e6345
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-12-07 Tue 14:13>

#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("task" . ?t)
        ("CANCELLED" . ?C)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        ("talk" . ?t)
        ("film" . ?f)))
#+end_src

#+RESULTS:
: ((@errand . 101) (@work . 119) (@home . 104) (@blog . 66) (:newline) (emacs . 69) (task . 116) (CANCELLED . 67) (:newline) (learning . 108) (research . 114) (:newline) (book . 98) (article . 97) (paper . 112) (talk . 116) (film . 102))

**** visual
:PROPERTIES:
:ID:       fc2aaff6-cb57-49ac-b507-a6c7b2720c70
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** use fixed size of images
:PROPERTIES:
:ID:       bebc4bc6-3ed0-49a1-b76a-ffe7ee11dd33
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-30 Fri 13:31]
:END:
640px is a good size, at approximately 64 columns

----------------------------------------------------------------
#+DOWNLOADED: screenshot @ 2021-12-12 22:14:04
[[file:configs/2021-12-12_22-14-04_screenshot.png]]

check with (org-redisplay-inline-images)
-----------------------------------------------------------------

#+begin_src emacs-lisp :noweb-ref org
(setq org-image-actual-width 640)
#+end_src

#+RESULTS:
: 640

***** hide property drawers
:PROPERTIES:
:ID:       b531b1b9-17ef-406c-9650-a04f7c669e5e
:CREATED:  [2022-09-29 Thu 13:14]
:UPDATED:  [2023-02-19 Sun 16:31]
:ROAM_EXCLUDE: t
:END:

- :: https://stackoverflow.com/questions/17478260/completely-hide-the-properties-drawer-in-org-mode

#+begin_src emacs-lisp :noweb-ref org
;;(require 'org)

(defun org-cycle-hide-drawers (state)
  "Re-hide all drawers after a visibility state change."
  (when (and (derived-mode-p 'org-mode)
             (not (memq state '(overview folded contents))))
    (save-excursion
      (let* ((globalp (memq state '(contents all)))
             (beg (if globalp
                      (point-min)
                    (point)))
             (end (if globalp
                      (point-max)
                    (if (eq state 'children)
                        (save-excursion
                          (outline-next-heading)
                          (point))
                      (org-end-of-subtree t)))))
        (goto-char beg)
        (while (re-search-forward org-drawer-regexp end t)
          (save-excursion
            (beginning-of-line 1)
            (when (looking-at org-drawer-regexp)
              (let* ((start (1- (match-beginning 0)))
                     (limit
                      (save-excursion
                        (outline-next-heading)
                        (point)))
                     (msg (format
                           (concat
                            "org-cycle-hide-drawers:  "
                            "`:END:`"
                            " line missing at position %s")
                           (1+ start))))
                (if (re-search-forward "^[ \t]*:END:" limit t)
                    (outline-flag-region start (point-at-eol) t)
                  (user-error msg))))))))))

  #+end_src

  #+RESULTS:
  : org-cycle-hide-drawers

#+end_src

#+RESULTS:
: org-cycle-hide-drawers

***** {M-x align tags}
:PROPERTIES:
:ID:       3db09afc-ea16-4ec4-883c-27ad7589f7f1
:CREATED:  [2022-04-25 Mon 10:10]
:UPDATED:  [2022-04-25 Mon 11:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-align-tags ()
  (interactive)
  (org-align-tags 'yes-all-the-bloody-tags))
#+end_src

#+RESULTS:
: qz/org-align-tags

**** etc
:PROPERTIES:
:ID:       b4ae17d0-d19b-4a48-9d76-ca96c4b1a776
:CREATED:  [2022-08-15 Mon 12:35]
:UPDATED:  [2022-08-15 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

***** sort this subtree (from parent)
:PROPERTIES:
:ID:       68fef422-f845-4c3f-829d-ede1e3de0236
:CREATED:  [2022-08-15 Mon 12:35]
:UPDATED:  [2022-08-15 Mon 12:35]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-sort-subtree ()
  (interactive)
  (save-mark-and-excursion
    (org-up-heading-or-point-min)
    (call-interactively 'org-sort)))

(define-key org-mode-map (kbd "C-c C-M-6") 'qz/org-sort-subtree)
#+end_src

#+RESULTS:
: qz/org-sort-subtree

**** export
:PROPERTIES:
:ID:       80904e8f-9c5c-4fc0-8f70-14be4044c7cc
:CREATED:  [2022-11-29 Tue 11:07]
:UPDATED:  [2022-11-29 Tue 11:07]
:ROAM_EXCLUDE: t
:END:

***** (md) without links
:PROPERTIES:
:ID:       70498e60-ec27-4ead-904f-c3a8402d7dca
:CREATED:  [2022-11-29 Tue 11:07]
:UPDATED:  [2022-11-29 Tue 11:07]
:ROAM_EXCLUDE: t
:END:

- ::  [[https://emacs.stackexchange.com/questions/22396/export-without-links][org mode - Export without links - Emacs Stack Exchange]]

#+name: elisp-derived-md-export-without-links
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-md-nolink (link contents info)
  (format "%s" contents))

(org-export-define-derived-backend 'my-md 'md
  :menu-entry
  '(?M "Export to Markdown without links" (lambda (a s v b) (org-md-export-to-markdown a s v)))
  :translate-alist '((link . qz/org-md-nolink)))
#+end_src

***** from subtree, including max-level heading from point
:PROPERTIES:
:ID:       a066c6c9-a733-4d56-baef-662353c21a82
:CREATED:  [2022-11-29 Tue 11:08]
:UPDATED:  [2022-12-12 Mon 14:51]
:ROAM_EXCLUDE: t
:END:

- ::  [[https://emacs.stackexchange.com/questions/66851/include-subtree-header-in-filename-when-exporting-subtree-from-org-mode][org export - Include subtree header in filename when exporting subtree from org-mode - Emacs Stack Exchange]]

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-export-headline (&optional backend async subtreep visible-only body-only ext-plist)
  "Export the current Org headline using BACKEND.

The available backends are the ones of `org-export-backends' and
'pdf.

When optional argument SUBTREEP is non-nil, transcode the
sub-tree at point, extracting information from the headline
properties first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only return body
code, without surrounding template.

Optional argument EXT-PLIST, when provided, is a property list
with external parameters overriding Org default settings, but
still inferior to file-local settings."
  (interactive)
  (let* ((backend (unless backend
                    (intern
                     (completing-read "Available backends: "
                                      (append org-export-backends '(pdf slack))))))
         (headline (car (last (org-get-outline-path t))))
         (headline-alnum (replace-regexp-in-string "[^[:alnum:]-_]" "-" headline))
         (file-prefix (file-name-sans-extension (buffer-file-name)))
         (filename (format "%s-%s.%s" file-prefix headline-alnum
                           (cl-case backend
                             ('pdf "tex")
                             ('slack "md")
                             (t backend)))))
    (save-restriction
      (org-narrow-to-subtree)
      (kill-new (s-join " -> " (org-get-outline-path t nil)))
      (org-export-to-file
          (if (eq backend 'pdf) 'latex backend)
          filename async subtreep visible-only body-only ext-plist
          (when (eq backend 'pdf)
            (lambda (file) (org-latex-compile file))))
      (widen))
    (with-temp-buffer
      (insert-file-contents filename)
      (kill-new (buffer-string)))))
#+end_src


#+RESULTS:
: qz/org-export-headline

****** {C-c C-M-e} :: qz/org-export-headline
:PROPERTIES:
:ID:       d62c1049-2bce-4b3e-8e4b-7619ebb9e262
:CREATED:  [2022-11-29 Tue 11:09]
:UPDATED:  [2022-11-29 Tue 11:09]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-M-e") 'qz/org-export-headline)
#+end_src

#+RESULTS:
: qz/org-export-headline

***** slack
:PROPERTIES:
:ID:       5d0aec80-160f-46b8-b2ba-a94e11fe417c
:CREATED:  [2022-11-29 Tue 11:47]
:UPDATED:  [2022-11-29 Tue 11:48]
:ROAM_EXCLUDE: t
:END:

****** redefine :: org-slack-headline ;; use headline + level as bullet
:PROPERTIES:
:ID:       321011a5-e5e1-4747-92ce-4b83f5400551
:CREATED:  [2022-11-29 Tue 11:47]
:UPDATED:  [2022-11-29 Tue 11:47]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun org-slack-headline (headline contents info)
  "Transcode HEADLINE element into Markdown format.
CONTENTS is the headline contents.  INFO is a plist used as
a communication channel."
  (unless (org-element-property :footnote-section-p headline)
    (let* ((level (org-export-get-relative-level headline info))
           (title (org-export-data (org-element-property :title headline) info))
           (todo (and (plist-get info :with-todo-keywords)
                      (let ((todo (org-element-property :todo-keyword
                                                        headline)))
                        (and todo (concat (org-export-data todo info) " ")))))
           (tags (and (plist-get info :with-tags)
                      (let ((tag-list (org-export-get-tags headline info)))
                        (and tag-list
                             (concat "     " (org-make-tag-string tag-list))))))
           (priority
            (and (plist-get info :with-priority)
                 (let ((char (org-element-property :priority headline)))
                   (and char (format "[#%c] " char)))))
           ;; Headline text without tags.
           (heading (concat todo priority title)))
      (format "%s*%s*\n\n%s"
              (if (> level 1)
                  (concat (s-repeat (- level 3) ;; starting flush
                                    "  ")
                          "- ")
                "")
              title contents)))
#+end_src

#+RESULTS:
: org-slack-headline


*** system commands
:PROPERTIES:
:ID:       c519b791-1810-4150-89ec-3408998f71a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:36]
:END:
**** get mail
:PROPERTIES:
:ID:       7756268f-c9b3-468d-a9ce-c6068279c7eb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/get-mail ()
  (interactive)
  (async-shell-command "mbsync -Va && notmuch new"))
#+end_src

**** rde-sanity
:PROPERTIES:
:ID:       3fb0efe4-8d3f-4840-bd92-74cc3249d975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/rde-sanity ()
  (interactive)
  (async-shell-command
   (concat "cd $HOME/git/sys/rde"
           "&& guix repl -L . dev/sanity.scm")))
#+end_src

#+RESULTS:
: qz/rde-sanity

**** reload-config
:PROPERTIES:
:ID:       21946f30-986f-49fe-a51d-38c78f315543
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-11-09 Wed 10:14]
:END:

#+begin_src emacs-lisp
(setq qz/emacs/config "~/git/sys/rde/rde/examples/abcdw/configs.org"
      qz/sh/tangle "make -C $HOME/git/sys/rde/rde/examples/abcdw tangle ")

(defun qz/tangle ()
  (interactive)
  (async-shell-command
   (concat
    "make -C $HOME/git/sys/rde/rde/examples/abcdw tangle"
    " && echo 'tangle--ehg--di' | espeak --stdin")))

(defun qz/reload-config-home ()
  (interactive)
  (async-shell-command
   (concat
    "make -C $HOME/git/sys/rde/rde/examples/abcdw home"
    "&& echo 'home--bal-ehg--di' | espeak --stdin ")))

(defun qz/reload-config-system ()
  (interactive)
  (async-shell-command
   (concat
    "sudo -E make -C $HOME/git/sys/rde/rde/examples/abcdw system"
    "&& echo 'system--bal-ehg--di' | espeak --stdin")))

(defun qz/reload-config-all ()
  (interactive)
  (async-shell-command
   (concat
    "   make -C $HOME/git/sys/rde rde/channels/update-locked"
    "&& make -C $HOME/git/sys/rde rde/channels/pull-locked"
    "&& make -C $HOME/git/sys/rde/rde/examples/abcdw all"
    "&& echo 'do the do, like ooo; pull & home & system bal-ehg--di'"
    "   | espeak --stdin")))

(defun qz/reload-config-emacs ()
  (interactive)
  (load-file "~/.config/emacs/init.el"))

(defun qz/reload-guix-pins ()
  (interactive)
  (async-shell-command
   (s-join " " '("cd $HOME/git/sys/rde"
                 "&& make rde/channels/update-locked"
                 "&& make rde/channels/pull-locked"))))

(defun qz/guix-upgrade ()
  (interactive)
  (async-shell-command
   (s-join " "
           '("cd $HOME/git/sys/rde"
             "&& make rde/channels/update-locked"
             "&& make rde/channels/pull-locked"
             "&& guix package -u"
             "&& guix upgrade"
             "&& make"))))
#+end_src

#+RESULTS:
: qz/guix-upgrade

**** swaywm: choose output resolution
:PROPERTIES:
:ID:       8fbfdfd8-edfb-4f7d-a6ed-a1927aa1885a
:CREATED:  [2022-04-22 Fri 11:56]
:UPDATED:  [2022-11-08 Tue 12:16]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/sway-choose-output-res (&optional display res)
  (interactive)
  (let* ((cur (s-trim (shell-command-to-string
                       "swaymsg -t get_outputs | jq -r 'map( . | select(.focused == true) | .name) | first'")))
         (cmd (format "swaymsg 'output %s enable res %s'"
                      (or display
                          (completing-read "display: "
                                           '("DP-1" "DP-2"
                                             "eDP-1"
                                             "HDMI-1" "HDMI-2")
                                           nil t cur))
                      (or res
                          (completing-read "resolution: "
                                           '("1920x1080"
                                             "5120x1440")
                                           nil t)))))
    (when (y-or-n-p (format "exec ~%s~?" cmd))
      (shell-command cmd))))
#+end_src

#+RESULTS:
: qz/sway-choose-output-res

**** bluetooth
:PROPERTIES:
:ID:       49d011dd-3d26-4b50-abf5-292cdf118d46
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:

***** outputs
:PROPERTIES:
:ID:       24700345-74aa-4f26-8fe6-64321c8ea328
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
pactl list sources | grep -E 'Name|Desc' -n
#+end_src

#+RESULTS:
|   3: | Name: alsa_output.pci-0000_01_00.1.hdmi-stereo.monitor                                             |
|   4: | Description: Monitor of HDA NVidia Digital Stereo (HDMI)                                           |
|  37: | Name: alsa_input.usb-Generic_USB_Audio_201405280001-00.analog-stereo                               |
|  38: | Description: USB Audio Analog Stereo                                                               |
|  91: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink.monitor |
|  92: | Description: Monitor of Comet Lake PCH cAVS HDMI3 Output                                           |
| 126: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink.monitor |
| 127: | Description: Monitor of Comet Lake PCH cAVS HDMI2 Output                                           |
| 161: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink.monitor |
| 162: | Description: Monitor of Comet Lake PCH cAVS HDMI1 Output                                           |
| 196: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink.monitor   |
| 197: | Description: Monitor of Comet Lake PCH cAVS Speaker + Headphones                                   |
| 231: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__source          |
| 232: | Description: Comet Lake PCH cAVS Headphones Stereo Microphone                                      |
| 284: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_6__source        |
| 285: | Description: Comet Lake PCH cAVS Digital Microphone                                                |
| 337: | Name: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor                   |
| 338: | Description: Monitor of TASCAM DR Series Analog Stereo                                             |
| 374: | Name: alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo                            |
| 375: | Description: TASCAM DR Series Analog Stereo                                                        |
| 428: | Name: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor                                               |
| 429: | Description: Monitor of Samuel’s AirPods Pro                                                       |

****** tascam: input: alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo
:PROPERTIES:
:ID:       2bfd38e2-cf1c-4074-8349-b4d9a3736b9f
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
****** tascam: output: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor
:PROPERTIES:
:ID:       4a4a7516-1e18-4d0e-9646-5cc87a361341
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
****** airpods: output: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor
:PROPERTIES:
:ID:       0710390c-4cc2-49e8-8150-490ca155eda9
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
***** connect to headphones
:PROPERTIES:
:ID:       13b782de-a874-43ff-8f8f-e75960674e48
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-25 Mon 15:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp

(defun qz/bt-connect (mac)
  (interactive "saddress: ")
  (async-shell-command
   (format "bluetoothctl connect %s" mac)
   "*bluetoothctl*"))

(defun qz/bt-airpods ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B"))

(defun qz/bt-aiaiai ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B")


  )
#+end_src

#+RESULTS:
: qz/bt-aiaiai

*** visual
:PROPERTIES:
:ID:       cac4fbde-325a-4f6a-a2f0-237f1e2752cb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]]                                                                :visual:
:PROPERTIES:
:ID:       a10b32b7-6a50-47e8-9fed-0bd985f8b0f2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 14:32]
:END:
***** apply [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]] to [[id:0b89e24d-72c0-46ae-8f61-94cee95d7732][minibuffer]]
:PROPERTIES:
:ID:       85fc83bc-5603-493f-973a-e3aa994654cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp

;; (setq minibuffer-mode-hook nil)
;; (add-hook 'minibuffer-mode-hook 'olivetti-mode)

(add-hook 'minibuffer-mode-hook
          (lambda ()
            (setq-local olivetti-body-width 200)
            (olivetti-mode)))

#+end_src

#+RESULTS:
| lambda | nil | (setq-local olivetti-body-width 200) | (olivetti-mode) |

**** [[id:c6490b3a-4dc3-4f9a-bb21-81bb6abc6beb][emacs-perfect-margin]]
:PROPERTIES:
:ID:       7b89ab8f-816a-4930-bedd-0653b028a0c4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:21]
:END:
#+begin_src emacs-lisp
;; (require 'perfect-margin)

;; (perfect-margin-mode 1)
;; (setq perfect-margin-ignore-regexps nil
;;       perfect-margin-ignore-filters nil)
#+end_src
**** cursor
:PROPERTIES:
:ID:       f7063b4c-226d-49cc-8bd8-a43249dd6c65
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(custom-set-variables
 '(cursor-type 'hbar))
#+end_src
**** outline
:PROPERTIES:
:ID:       b5fec793-6a50-4f9d-b88f-715df300dc2c
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:
***** outline-default-state                                                     :var:
:PROPERTIES:
:ID:       2150f716-f377-4d9c-b1ab-f278a0400cfa
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:

note, >= emacs 29.1

#+begin_src emacs-lisp
(setq outline-default-state 'outline-show-only-headings)
#+end_src
**** hi-lock
:PROPERTIES:
:ID:       0d55f4eb-3560-4e3d-a167-e88c0900a4f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I believe that when 'hi-lock-auto-select-face is non-nil, this should
cycle colors automatically.

#+begin_src emacs-lisp
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
Uses the next face from `hi-lock-face-defaults' without prompting,
unless you use a prefix argument.
Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

If REGEXP contains upper case characters (excluding those preceded by `\\')
and `search-upper-case' is non-nil, the matching is case-sensitive.

This uses Font lock mode if it is enabled; otherwise it uses overlays,
in which case the highlighting will not update as you type.  The Font
Lock mode is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))
#+end_src

#+RESULTS:
: hi-lock-face-symbol-at-point
**** emacs-highlight-indent-guides
:PROPERTIES:
:ID:       aacfd214-458f-4334-aad6-7b1a6453a9f5
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

***** noweb tangler
:PROPERTIES:
:ID:       623daebd-6f65-49da-b45b-801c5f18489c
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-09-28 Wed 17:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp

(with-eval-after-load 'highlight-indent-guides
  <<hl-indent>>
  )

#+end_src
***** appearance; character ( 🐶 🐩 ), colours
:PROPERTIES:
:ID:       7f7805c9-90a1-43b0-921a-3260e3153079
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent

;; highlight-indent-guides-character
;; 🐶
;; 🐩
;; |
;; default (char-to-string 9474)
;; default │

(custom-set-variables '(highlight-indent-guides-method 'character)
                      `(highlight-indent-guides-character 9474)
                      '(highlight-indent-guides-auto-enabled nil)
                      '(highlight-indent-guides-responsive 'top))

;; I don't use this AT ALL so give some ridulous defaults
(set-face-background 'highlight-indent-guides-odd-face "green")
(set-face-background 'highlight-indent-guides-even-face "red")

;; this is the /only/ based highlight-indent guide variety
(set-face-foreground 'highlight-indent-guides-character-face "#333")
(let ((accent "#555"))
  (set-face-foreground 'highlight-indent-guides-stack-character-face accent)
  (set-face-foreground 'highlight-indent-guides-top-character-face accent))
#+end_src

these settings end up looking like this:

#+DOWNLOADED: screenshot @ 2022-05-23 11:02:39
[[file:configs/2022-05-23_11-02-39_screenshot.png]]

***** interactive customisation
:PROPERTIES:
:ID:       b935c3bd-3965-4553-8177-5c679f5eaa2a
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

****** toggle following responsive :: qz/highlight-indent-toggle-responsive
:PROPERTIES:
:ID:       168ed94a-2b77-41a8-8e8d-b22d330b9c84
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defun qz/highlight-indent-toggle-responsive (&optional arg)
  (interactive)
  (let ((val (if (or (and arg (> 0 arg))
                     (and (not arg) highlight-indent-guides-responsive))
                 nil qz/highlight-indent-guides-responsive)))
    (custom-set-variables
     `(highlight-indent-guides-responsive ',val))
    (highlight-indent-guides-mode)
    val))
#+end_src

****** lazy reading mode
:PROPERTIES:
:ID:       9a6b201c-5074-4bcc-adea-252dfe608127
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-09-29 Thu 14:07]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defvar qz/lazy-last -1)
(defun qz/lazy-eyes (&optional arg)
  (interactive)
  (setq qz/lazy-last (if (> 0 qz/lazy-last) 1 -1))
  (qz/highlight-indent-toggle-responsive qz/lazy-last)
  (global-hl-line-mode qz/lazy-last))
#+end_src

#+RESULTS:
: qz/lazy-eyes

**** [[id:bdba5c2b-bcfc-429c-bd90-57aaa211de65][font]] modulation
:PROPERTIES:
:ID:       2cff5044-7e96-4b0b-89a1-7e2ede2e88cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** save load-time font size                                             :var:func:
:PROPERTIES:
:ID:       9ecb735e-9bda-4cf1-9460-738a543733e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

this is useful for when we switch to the single-frame font-size, but
we want to restore after, respecting the initial font-size

#+begin_src emacs-lisp
(defvar qz/font-initial-size (face-attribute 'default :height))
(defvar qz/resize-mini-windows-initial resize-mini-windows)
(defvar qz/max-mini-window-height-initial max-mini-window-height)

(defun qz/reset-visual-initial ()
  (interactive)
  (set-face-attribute 'default nil :height qz/font-initial-size)
  (setq resize-mini-windows    qz/resize-mini-windows-initial
        max-mini-window-height qz/max-mini-window-height-initial))
#+end_src

#+RESULTS:
: qz/reset-visual-initial

***** set font as big enough for comfy casual 80char emacs use                 :func:
:PROPERTIES:
:ID:       1758a068-1047-431b-915b-7cbf718d32ba
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/font-big-80 ()
  (interactive)
  (set-face-attribute 'default nil :height 300)
  (setq resize-mini-windows t
        max-mini-window-height nil))
#+end_src

#+RESULTS:
: qz/font-big-80
**** unsplash
:PROPERTIES:
:ID:       ff5be022-1750-4ca6-800f-af738c52bc3d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-29 Thu 11:22]
:END:
#+begin_src emacs-lisp
(defvar qz/unsplash-tags nil)
(defun qz/unsplash ()
  "yet another lazy shell-command wrapper; wallpaper edition"
  (interactive)
  (let ((tag (read-from-minibuffer
              "unsplash tags: " (car qz/unsplash-tags))))
    (async-shell-command
     (format "TAGS='%s'
mv \"$XDG_CACHE_HOME/wallpaper.png\" \"$XDG_CACHE_HOME/$(date +%%Y-%%m-%%d--%%H-%%M-%%S)-wallpaper.png\"
curl -L \"https://source.unsplash.com/5120x1440?$TAGS\" -o \"$XDG_CACHE_HOME/wallpaper.png\"
swaymsg output \"*\" background ~/.cache/wallpaper.png fill" tag))
    (setq qz/unsplash-tags (seq-uniq (cons tag qz/unsplash-tags)))))
#+end_src

#+RESULTS:
: qz/unsplash

*** stuff I nicked from the emacs wiki
:PROPERTIES:
:ID:       de8e054e-30ff-44ce-b66e-2d420e757b51
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-09-28 Wed 16:25]
:HEADER-ARGS: :noweb-ref null
:END:
**** col-highlight.el
:PROPERTIES:
:ID:       6284a4a9-70f8-487b-b4b2-140b94b70264
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:33]
:END:

#+begin_src emacs-lisp :tangle no :noweb-ref null
;;; col-highlight.el --- Highlight the current column.
;;
;; Filename: col-highlight.el
;; Description: Highlight the current column.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2006-2018, Drew Adams, all rights reserved.
;; Created: Fri Sep 08 11:06:35 2006
;; Version: 0
;; Package-Requires: ((vline "0"))
;; Last-Updated: Mon Jan  1 10:17:48 2018 (-0800)
;;           By: dradams
;;     Update #: 446
;; URL: https://www.emacswiki.org/emacs/download/col-highlight.el
;; Doc URL: https://emacswiki.org/emacs/HighlightCurrentColumn
;; Keywords: faces, frames, emulation, highlight, cursor, accessibility
;; Compatibility: GNU Emacs: 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `vline'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  This library highlights the current column.  When you move the
;;  cursor, the highlighting follows (tracks the cursor), as long as
;;  the highlighting stays on.
;;
;;  Command `column-highlight-mode' toggles this highlighting on and
;;  off.
;;
;;  If you use `column-highlight-mode' twice in succession (I bind it
;;  to `C-+'), you can flash the highlighting to show you the current
;;  column temporarily.  An alternative way to flash-highlight is to
;;  use command `flash-column-highlight' (once).  It shows the
;;  highlighting for just a second or two (see option
;;  `col-highlight-period').
;;
;;  You can also have current-column highlighting come on
;;  automatically, when Emacs is idle.  Command
;;  `toggle-highlight-column-when-idle' toggles this mode.  Command
;;  `col-highlight-set-interval' changes the number of idle seconds to
;;  wait before highlighting.
;;
;;  You can use option `col-highlight-overlay-priority' to make the
;;  vline (i.e., column) highlighting appear on top of other overlay
;;  highlighting that might exist.
;;
;;  You can use option `col-highlight-show-only' to restrict
;;  current-column highlighting to a section of text of a particular
;;  kind: paragaph, sentence, page, defun, etc.
;;
;;
;;  To use this file, you must also have library `vline.el'.
;;  Put this in your Emacs init file (~/.emacs):
;;
;;    (require 'col-highlight) ; Load this file (and `vline')
;;
;;  If you want to turn on continual current-column highlighting by
;;  default, then add this to your init file:
;;
;;    (column-highlight-mode 1)
;;
;;  If you want to turn on automatic idle highlighting of the current
;;  column, then add this to your init file:
;;
;;    (toggle-highlight-column-when-idle 1)
;;
;;  If you want to use a different wait interval, before idle
;;  highlighting begins, then set it in your init file using
;;  `col-highlight-set-interval':
;;
;;    (col-highlight-set-interval 6) ; Wait 6 idle secs.
;;
;;  Note that `column-highlight-mode' is intentionally a global minor
;;  mode.  If you want a local minor mode, so that highlighting
;;  affects only a particular buffer, you can use `vline-mode' (in
;;  `vline.el').
;;
;;
;;  See also:
;;
;;  * Library `hl-line+.el', which offers the same functionality, but
;;    for the current line instead of the current column.
;;
;;  * Library `crosshairs.el', which combines the features of
;;    `col-highlight.el' and `hl-line+.el', providing a crosshair
;;    highlighting effect.  It requires `col-highlight.el' and
;;    `hl-line+.el'.
;;
;;  * Library `cursor-chg.el' or library `oneonone.el', to change the
;;    cursor type when Emacs is idle.
;;
;;  User options defined here:
;;
;;    `col-highlight-period', `column-highlight-mode',
;;    `col-highlight-overlay-priority', `col-highlight-show-only',
;;    `col-highlight-vline-face-flag'.
;;
;;  Faces defined here:
;;
;;    `col-highlight'.
;;
;;  Commands defined here:
;;
;;    `col-highlight-flash', `col-highlight-set-interval',
;;    `col-highlight-toggle-when-idle', `column-highlight-mode',
;;    `flash-column-highlight', `toggle-highlight-column-when-idle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `col-highlight-highlight', `col-highlight-unhighlight'.
;;
;;  Internal variables defined here:
;;
;;    `col-highlight-face', `col-highlight-idle-interval',
;;    `col-highlight-idle-timer', `col-highlight-when-idle-p'.
;;
;;
;;  ***** NOTE: The following function defined in `vline.el' has
;;              been REDEFINED HERE:
;;
;;    `vline-show' - Respect options `col-highlight-overlay-priority'
;;                   and `col-highlight-show-only'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2017/05/10 dadams
;;     vline-show: Wrap arg to make-string with abs.  Not a fix, but bypasses error from not
;;                 handling SPC char with display property value of (space :align-to N).
;; 2013/08/08 dadams
;;     Added: col-highlight-show-only, redefinition of vline-show.
;;     Removed defadvice of vline-show (replaced by redefinition).
;; 2012/12/25 dadams
;;     Added Package-Requires.
;; 2012/05/18 dadams
;;     Added: col-highlight-overlay-priority, defadvice of vline-show.
;; 2011/01/03 dadams
;;     Added autoload cookies for defgroup, defcustom, defface, and commands.
;; 2008/09/03 dadams
;;     col-highlight-highlight: Bind vline-current-window-only to t.
;; 2008/08/08 dadams
;;     col-highlight-(un)highlight: Added optional arg.
;; 2008/01/21 dadams
;;     Use vline.el instead of column-marker.el.
;;     Added: group column-highlight, option col-highlight-vline-face-flag.
;;     col-highlight-toggle-when-idle: col-highlight-unhighlight when turn off.
;;     col-highlight-flash: Use col-highlight-highlight, not mode.
;;     col-highlight-(un)highlight: Respect col-highlight-vline-face-flag.
;;                                  Don't highlight minibuffer.
;;     Renamed: face col-highlight-face to col-highlight.
;;     Removed semi-support for Emacs 20.
;; 2006/09/08 dadams
;;     Created.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'vline)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;###autoload
(defgroup column-highlight nil
  "Highlight the current column."
  :prefix "col-highlight-"
  :group 'editing :group 'cursor :group 'hl-line :group 'frames
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
                   "https://www.emacswiki.org/emacs/download/col-highlight.el"))

;;;###autoload
(defcustom col-highlight-show-only nil
  "Non-nil means `column-highlight-mode' affects only a section of text.
This affects `vline-mode' also.

The non-nil value determines the type of text section: paragraph,
sentence, defun, page...

The actual non-nil value is a forward movement command for the given
section type, e.g., `forward-paragraph', `end-of-defun'."
  :type '(choice
          (const    :tag "All text"  nil)
          (const    :tag "Paragraph" forward-paragraph)
          (const    :tag "Sentence"  forward-sentence)
          (const    :tag "Page"      forward-page)
          (const    :tag "Defun"     end-of-defun)
          (function :tag "Forward-thing function" :value forward-paragraph))
  :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-vline-face-flag t
  "*Non-nil means `column-highlight-mode' uses `col-highlight-face'.
nil means that it uses `vline-face'."
  :type 'boolean :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-period 1
  "*Number of seconds to highlight the current column."
  :type 'integer :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-overlay-priority 300
  "*Priority to use for overlays in `vline-overlay-table'.
A higher priority can make the vline highlighting appear on top of
other overlays that might exist."
  :type '(choice
          (const   :tag "No priority (default priority)"  nil)
          (integer :tag "Priority"  300))
  :group 'column-highlight)

;;;###autoload
(defface col-highlight '((t (:background "SlateGray3")))
  "*Face for current-column highlighting by `column-highlight-mode'.
Not used if `col-highlight-vline-face-flag' is nil."
  :group 'column-highlight :group 'faces)

(defvar col-highlight-face 'col-highlight
  "Face used for highlighting current column.
Do NOT change this.")

(defvar col-highlight-idle-interval 5
  "Number of seconds to wait before highlighting current column.
Do NOT change this yourself to change the wait period; instead, use
`\\[col-highlight-set-interval]'.")

(defvar col-highlight-when-idle-p nil
  "Non-nil means highlight the current column whenever Emacs is idle.
Do NOT change this yourself; instead, use
`\\[toggle-highlight-column-when-idle]'.")

(defvar col-highlight-idle-timer
  (progn                              ; Cancel to prevent duplication.
    (when (boundp 'col-highlight-idle-timer)
      (cancel-timer col-highlight-idle-timer))
    (run-with-idle-timer col-highlight-idle-interval t 'col-highlight-highlight))
  "Timer used to highlight current column whenever Emacs is idle.")

;; Turn it off, by default.
;; You must use `toggle-highlight-column-when-idle' to turn it on.
(cancel-timer col-highlight-idle-timer)



;;  REPLACE ORIGINAL `vline-show' defined in `vline.el'.
;;
;;  1. Respect options `col-highlight-overlay-priority' and `col-highlight-show-only'.
;;  2. Tolerate SPC char with `display' property value (space :align-to N).
;;
(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point  (point)))
      (let* ((column           (vline-current-column))
             (lcolumn          (current-column))
             (i                0)
             (compose-p        (memq vline-style '(compose mixed)))
             (face-p           (memq vline-style '(face mixed)))
             (line-char        (if compose-p vline-line-char ?\   ))
             (line-str         (make-string 1 line-char))
             (visual-line-str  line-str)
             (in-fringe-p      (vline-into-fringe-p))
             (only-beg         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only -1)
                                          (point))
                                      (error nil))))
             (only-end         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only 1)
                                          (point))
                                      (error nil)))))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str  (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not (bobp))
                    (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table)))
          (let ((cur-column   (vline-move-to-column column t))
                (cur-lcolumn  (current-column)))
            (unless (or (= (point) point) ; Non-cursor line only (eol workaround).
                        (and only-beg  only-end  (or (<= (point) only-beg)
                                                     (>= (point) only-end))))
              (when (> cur-column column)
                (let ((lcol  (current-column)))
                  (backward-char)
                  (setq cur-column  (- cur-column (- lcol (current-column))))))
              (let* ((ovr       (aref vline-overlay-table i))
                     (visual-p  (or (< lcolumn (current-column))
                                    (> lcolumn (+ (current-column)
                                                  (- column cur-column)))))
                     ;; Consider a newline, tab and wide char.
                     (str       (concat (make-string (abs (- column cur-column)) ?\  )
                                        (if visual-p visual-line-str line-str)))
                     (char      (char-after)))
                (unless ovr
                  (setq ovr  (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window (and vline-current-window-only  (selected-window)))
                (cond ((memq char vline-multiwidth-space-list) ; Multiwidth space
                       (setq str  (concat str (make-string (- (save-excursion (forward-char)
                                                                              (current-column))
                                                              (current-column)
                                                              (string-width str))
                                                           ?\  )))
                       (move-overlay ovr (point) (+ 1 (point)))
                       (overlay-put ovr 'invisible t)
                       (overlay-put ovr 'after-string str))
                      ((eolp)
                       (move-overlay ovr (point) (point))
                       (overlay-put ovr 'after-string str)
                       (when (and (not truncate-lines) ; Do not expand more than window width.
                                  (>= (+ 1 column) (window-width))
                                  (>= column (vline-current-column))
                                  (not (vline-into-fringe-p)))
                         (delete-overlay ovr)))
                      (t
                       (cond (compose-p
                              (let (str)
                                (when char
                                  (setq str  (compose-chars char
                                                            (cond ((= (char-width char) 1)
                                                                   '(tc . tc))
                                                                  ((= cur-column column)
                                                                   '(tc . tr))
                                                                  (t
                                                                   '(tc . tl)))
                                                            line-char))
                                  (when face-p
                                    (setq str  (propertize str 'face (vline-face visual-p))))
                                  (move-overlay ovr (point) (+ 1 (point)))
                                  (overlay-put ovr 'invisible t)
                                  (overlay-put ovr 'after-string str))))
                             (face-p
                              (move-overlay ovr (point) (+ 1 (point)))
                              (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i  (+ 1 i))
            (vline-forward -1))))))
  (mapc (lambda (ov) (when (overlayp ov) ; Set overlay priority to `col-highlight-overlay-priority'.
                       (overlay-put ov 'priority col-highlight-overlay-priority)))
        vline-overlay-table))

;;;###autoload
(define-minor-mode column-highlight-mode
  "Toggle highlighting the current column.
With ARG, turn column highlighting on if and only if ARG is positive.

Column-Highlight mode uses the functions
`col-highlight-unhighlight' and `col-highlight-highlight'
on `pre-command-hook' and `post-command-hook'."
  :init-value nil :global t :group 'column-highlight
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag
                   "Download" "https://www.emacswiki.org/emacs/download/col-highlight.el")
  :link '(url-link :tag "Description"
                   "https://www.emacswiki.org/emacs/ChangingCursorDynamically")
  :link '(emacs-commentary-link :tag "Commentary" "col-highlight")
  (cond (column-highlight-mode
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (add-hook 'post-command-hook 'col-highlight-highlight))
        (t
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (remove-hook 'post-command-hook 'col-highlight-highlight))))

;;;###autoload
(defalias 'toggle-highlight-column-when-idle 'col-highlight-toggle-when-idle)
;;;###autoload
(defun col-highlight-toggle-when-idle (&optional arg)
  "Turn on or off highlighting the current column when Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off."
  (interactive "P")
  (setq col-highlight-when-idle-p  (if arg
                                       (> (prefix-numeric-value arg) 0)
                                     (not col-highlight-when-idle-p)))
  (cond (col-highlight-when-idle-p
         (timer-activate-when-idle col-highlight-idle-timer)
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned ON highlighting current column when Emacs is idle."))
        (t
         (cancel-timer col-highlight-idle-timer)
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned OFF highlighting current column when Emacs is idle."))))

;;;###autoload
(defun col-highlight-set-interval (n)
  "Set the delay before highlighting current column when Emacs is idle.
Whenever Emacs has been idle for N seconds, the current column is
highlighted using the face that is the value of variable
`col-highlight-face'.

To turn on or off automatically highlighting the current column
when Emacs is idle, use `\\[toggle-highlight-column-when-idle]."
  (interactive
   "nSeconds to idle, before highlighting current column: ")
  (timer-set-idle-time col-highlight-idle-timer
                       (setq col-highlight-idle-interval  n)
                       t))

;;;###autoload
(defalias 'flash-column-highlight 'col-highlight-flash)
;;;###autoload
(defun col-highlight-flash (&optional arg)
  "Highlight the current column for `col-highlight-period' seconds.
With a prefix ARG, highlight for that many seconds."
  (interactive)
  (col-highlight-highlight)
  (let ((column-period  col-highlight-period))
    (when current-prefix-arg
      (setq column-period  (prefix-numeric-value current-prefix-arg)))
    (run-at-time column-period nil 'col-highlight-unhighlight)))

(defun col-highlight-highlight (&optional minibuffer-also-p)
  "Highlight current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (let ((vline-current-window-only  t))
      (if col-highlight-vline-face-flag
          (let ((vline-style  'face)
                (vline-face   col-highlight-face))
            (vline-show))
        (vline-show)))))

(defun col-highlight-unhighlight (&optional minibuffer-also-p)
  "Turn off highlighting of current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (if col-highlight-vline-face-flag
        (let ((vline-style  'face)
              (vline-face   col-highlight-face))
          (vline-clear))
      (vline-clear))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'col-highlight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; col-highlight.el ends here
#+end_src

#+RESULTS:
: col-highlight

**** vline.el
:PROPERTIES:
:ID:       bb42ed82-562f-4d92-9a60-3a524b82283d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:10]
:END:
#+begin_src emacs-lisp :tangle no :noweb-ref null
;;; vline.el --- show vertical line (column highlighting) mode.

;; Copyright (C) 2002, 2008-2012 by Taiki SUGAWARA <buzz.taiki@gmail.com>

;; Author: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Maintainer: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Keywords: faces, editing, emulating
;; Version: 1.11
;; Time-stamp: <2012-01-08 12:40:18 UTC taiki>
;; URL: http://www.emacswiki.org/cgi-bin/wiki/vline.el
;; URL: http://bitbucket.org/buzztaiki/elisp/src/tip/vline.el

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; put followings your .emacs
;;   (require 'vline)
;;
;; if you display a vertical line, type M-x vline-mode.  `vline-mode' doesn't
;; effect other buffers, because it is a buffer local minor mode.  if you hide
;; a vertical line, type M-x vline-mode again.
;;
;; if you display a vertical line in all buffers, type M-x vline-global-mode.
;;
;; `vline-style' provides a display style of vertical line.  see
;; `vline-style' docstring.
;;
;; if you don't want to visual line highlighting (ex.  for performance
;; issue), please to set `vline-visual' to nil.
;;
;; if you don't want to use timer (ex.  you want to highlight column
;; during moving cursors), please to set `vline-use-timer' to nil.

;;; Change Log:

;; 2012-01-08 taiki
;; fix for the Lint warnings.

;; 2010-02-02 taiki
;; improve performance.

;; 2009-08-26 taiki
;; support org-mode, outline-mode

;; 2009-08-18 taiki
;; add autoload cookies.

;; 2009-08-18 taiki
;; fix last line highlighting probrem.

;; 2009-08-18 taiki
;; support visual line highlighting.
;; - Added face vline-visual.
;; - Added defcustom vline-visual-face.
;; - Added defcustom vline-visual.
;;
;; 2009-08-17 taiki
;; fix continuas line problem.
;; - Don't display vline when cursor into fringe
;; - Don't expand eol more than window width.
;;
;; 2008-10-22 taiki
;; fix coding-system problem.
;; - Added vline-multiwidth-space-list
;; - Use ucs code-point for japanese fullwidth space.
;;
;; 2008-01-22 taiki
;; applied patch from Lennart Borgman
;; - Added :group 'vline
;; - Added defcustom vline-current-window-only
;; - Added header items to simplify for users

;;; TODO:
;; - track window-scroll-functions, window-size-change-functions.
;; - consider other minor modes (using {after,before}-string overlay).
;; - don't use {post,after}-command-hook for performance??

;;; Code:

(defvar vline-overlay-table-size 200)
(defvar vline-overlay-table (make-vector vline-overlay-table-size nil))
(defvar vline-line-char (string-to-char "|"))
(defvar vline-multiwidth-space-list
  (list
   ?\t
   (decode-char 'ucs #x3000)            ; japanese fullwidth space
   ))
(defvar vline-timer nil)

(defcustom vline-style 'face
  "This variable holds vertical line display style.
Available values are followings:
`face'      : use face.
`compose'   : use composit char.
`mixed'     : use face and composit char."
  :type '(radio
          (const face)
          (const compose)
          (const mixed))
  :group 'vline)


(defface vline
  '((t (:background "light steel blue")))
  "A default face for vertical line highlighting."
  :group 'vline)

(defface vline-visual
  '((t (:background "gray90")))
  "A default face for vertical line highlighting in visual lines."
  :group 'vline)

(defcustom vline-face 'vline
  "A face for vertical line highlighting."
  :type 'face
  :group 'vline)

(defcustom vline-visual-face 'vline-visual
  "A face for vertical line highlighting in visual lines."
  :type 'face
  :group 'vline)

(defcustom vline-current-window-only nil
  "If non-nil then highlight column in current window only.
If the buffer is shown in several windows then highlight column only
in the currently selected window."
  :type 'boolean
  :group 'vline)

(defcustom vline-visual t
  "If non-nil then highlight column in visual lines.
If you specified `force' then use force visual line highlighting even
if `truncate-lines' is non-nil."
  :type '(radio
          (const nil)
          (const t)
          (const force))
  :group 'vline)

(defcustom vline-use-timer t
  "If non-nil, use idle timer instead of (post|after)-command-hook."
  :type 'boolean
  :group 'vline)

(defcustom vline-idle-time 0.02
  "Idle time for highlighting column."
  :type 'number
  :group 'vline)

;;;###autoload
(define-minor-mode vline-mode
  "Display vertical line mode."
  :global nil
  :lighter " VL"
  :group 'vline
  (if vline-mode
      (progn
        (add-hook 'pre-command-hook 'vline-pre-command-hook nil t)
        (if vline-use-timer
            (vline-set-timer)
          (add-hook 'post-command-hook 'vline-post-command-hook nil t)))
    (vline-cancel-timer)
    (vline-clear)
    (remove-hook 'pre-command-hook 'vline-pre-command-hook t)
    (remove-hook 'post-command-hook 'vline-post-command-hook t)))

;;;###autoload
(define-global-minor-mode vline-global-mode
  vline-mode
  (lambda ()
    (unless (minibufferp)
      (vline-mode 1)))
  :group 'vline)

(defun vline-pre-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-clear)))

(defun vline-post-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-set-timer ()
  (setq vline-timer
        (run-with-idle-timer
         vline-idle-time t 'vline-timer-callback)))

(defun vline-cancel-timer ()
  (when (timerp vline-timer)
    (cancel-timer vline-timer)))

(defun vline-timer-callback ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-clear ()
  (mapcar (lambda (ovr)
            (and ovr (delete-overlay ovr)))
          vline-overlay-table))

(defsubst vline-into-fringe-p ()
  (eq (nth 1 (posn-at-point)) 'right-fringe))

(defsubst vline-visual-p ()
  (or (eq vline-visual 'force)
      (and (not truncate-lines)
           vline-visual)))

(defsubst vline-current-column ()
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (+ 1 (current-column)) (window-width)))
      (current-column)
    ;; hmm.. posn-at-point is not consider tab width.
    (- (current-column)
       (save-excursion
         (vertical-motion 0)
         (current-column)))))

(defsubst vline-move-to-column (col &optional bol-p)
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (+ 1 (current-column)) (window-width)))
      (move-to-column col)
    (unless bol-p
      (vertical-motion 0))
    (let ((bol-col (current-column)))
      (- (move-to-column (+ bol-col col))
         bol-col))))

(defsubst vline-invisible-p (pos)
  (let ((inv (get-char-property pos 'invisible)))
    (and inv
         (or (eq buffer-invisibility-spec t)
             (memq inv buffer-invisibility-spec)
             (assq inv buffer-invisibility-spec)))))

(defsubst vline-forward (n)
  (unless (memq n '(-1 0 1))
    (error "n(%s) must be 0 or 1" n))
  (if (not (vline-visual-p))
      (progn
        (forward-line n)
        ;; take care of org-mode, outline-mode
        (when (and (not (bobp))
                   (vline-invisible-p (- 1 (point))))
          (goto-char (- 1 (point))))
        (when (vline-invisible-p (point))
          (if (< n 0)
              (while (and (not (bobp)) (vline-invisible-p (point)))
                (goto-char (previous-char-property-change (point))))
            (while (and (not (bobp)) (vline-invisible-p (point)))
              (goto-char (next-char-property-change (point))))
            (forward-line 1))))
    (vertical-motion n)))

(defun vline-face (visual-p)
  (if visual-p
      vline-visual-face
    vline-face))

(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point (point)))
      (let* ((column (vline-current-column))
             (lcolumn (current-column))
             (i 0)
             (compose-p (memq vline-style '(compose mixed)))
             (face-p (memq vline-style '(face mixed)))
             (line-char (if compose-p vline-line-char ? ))
             (line-str (make-string 1 line-char))
             (visual-line-str line-str)
             (in-fringe-p (vline-into-fringe-p)))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table))
                    (not (bobp)))
          (let ((cur-column (vline-move-to-column column t))
                (cur-lcolumn (current-column)))
            ;; non-cursor line only (workaround of eol probrem.
            (unless (= (point) point)
              ;; if column over the cursor's column (when tab or wide char is appered.
              (when (> cur-column column)
                (let ((lcol (current-column)))
                  (backward-char)
                  (setq cur-column (- cur-column (- lcol (current-column))))))
              (let* ((ovr (aref vline-overlay-table i))
                     (visual-p (or (< lcolumn (current-column))
                                   (> lcolumn (+ (current-column)
                                                 (- column cur-column)))))
                     ;; consider a newline, tab and wide char.
                     (str (concat (make-string (- column cur-column) ? )
                                  (if visual-p visual-line-str line-str)))
                     (char (char-after)))
                ;; create overlay if not found.
                (unless ovr
                  (setq ovr (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))

                ;; initialize overlay.
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window
                             (if vline-current-window-only
                                 (selected-window)
                               nil))

                (cond
                 ;; multiwidth space
                 ((memq char vline-multiwidth-space-list)
                  (setq str
                        (concat str
                                (make-string (- (save-excursion (forward-char)
                                                                (current-column))
                                                (current-column)
                                                (string-width str))
                                             ? )))
                  (move-overlay ovr (point) (+ 1 (point)))
                  (overlay-put ovr 'invisible t)
                  (overlay-put ovr 'after-string str))
                 ;; eol
                 ((eolp)
                  (move-overlay ovr (point) (point))
                  (overlay-put ovr 'after-string str)
                  ;; don't expand eol more than window width
                  (when (and (not truncate-lines)
                             (>= (+ 1 column) (window-width))
                             (>= column (vline-current-column))
                             (not (vline-into-fringe-p)))
                    (delete-overlay ovr)))
                 (t
                  (cond
                   (compose-p
                    (let (str)
                      (when char
                        (setq str (compose-chars
                                   char
                                   (cond ((= (char-width char) 1)
                                          '(tc . tc))
                                         ((= cur-column column)
                                          '(tc . tr))
                                         (t
                                          '(tc . tl)))
                                   line-char))
                        (when face-p
                          (setq str (propertize str 'face (vline-face visual-p))))
                        (move-overlay ovr (point) (+ 1 (point)))
                        (overlay-put ovr 'invisible t)
                        (overlay-put ovr 'after-string str))))
                   (face-p
                    (move-overlay ovr (point) (+ 1 (point)))
                    (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i (+ 1 i))
            (vline-forward -1)))))))

(provide 'vline)

;;; Local Variables:
;;; time-stamp-format: "%:y-%02m-%02d %02H:%02M:%02S %Z %u"
;;; time-stamp-line-limit: 16
;;; End:

;;; vline.el ends here
#+end_src

#+RESULTS:
: vline

**** rde: scheme reader incompatibility: =(defvar vline-line-char ?|)=
:PROPERTIES:
:ID:       3193f8ae-2c44-4b87-ab8c-9df0aabf2c7a
:CREATED:  [2022-09-30 Fri 13:11]
:UPDATED:  [2022-09-30 Fri 13:11]
:ROAM_EXCLUDE: t
:END:

**** ol-man.el
:PROPERTIES:
:ID:       03e99cd2-5275-4b44-9b9a-137a84156826
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- source :: https://orgmode.org/manual/Adding-Hyperlink-Types.html

an [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] extension for a new link backend targeting manpages

***** TODO [[id:cfcecb80-bcde-4c1d-a4fd-8a55eb5e5f20][deep link]] (content-based) encode line for context & regexp jump
:PROPERTIES:
:ID:       dc7a1ca8-9d36-4cfb-ada5-ef2040394b62
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** source
:PROPERTIES:
:ID:       8f2b6e70-b945-4021-bd88-429891641d8e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-11 Mon 18:50]
:END:
#+begin_src emacs-lisp :noweb-ref null
;;; ol-man.el - Support for links to man pages in Org mode
(require 'ol)

(org-link-set-parameters "man"
                         :follow 'org-man-open
                         :export 'org-man-export
                         :store  'org-man-store-link)

(defcustom org-man-command 'man
  "The Emacs command to be used to display a man page."
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path _)
  "Visit the manpage on PATH.
PATH should be a topic that can be thrown at the man command."
  (funcall org-man-command path))

(defun org-man-store-link ()
  "Store a link to a man page."
  (when (memq major-mode '(Man-mode woman-mode))
    ;; This is a man page, we do make this link.
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Man page for %s" page)))
      (org-link-store-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "Extract the page name from the buffer name."
  ;; This works for both `Man-mode' and `woman-mode'.
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "Cannot create link to this man page")))

(defun org-man-export (link description format _)
  "Export a man page link from Org files."
  (let ((path (format "http://man.he.net/?topic=%s&section=all" link))
        (desc (or description link)))
    (pcase format
      (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
      (`latex (format "\\href{%s}{%s}" path desc))
      (`texinfo (format "@uref{%s,%s}" path desc))
      (`ascii (format "%s (%s)" desc path))
      (t path))))

(provide 'ol-man)
;;; ol-man.el ends here
#+end_src

#+RESULTS:
: ol-man

** TODO scripts
:PROPERTIES:
:ID:       02cdcb21-e16b-44ac-a536-1fa1e05cd2b7
:CREATED:  [2022-11-08 Tue 12:06]
:UPDATED:  [2022-11-08 Tue 12:06]
:ROAM_EXCLUDE: t
:END:

*** TODO reload
:PROPERTIES:
:ID:       ad6bd24a-ee5a-4ff1-a982-fe59aa1cd78e
:CREATED:  [2022-11-08 Tue 12:06]
:UPDATED:  [2022-11-08 Tue 12:07]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref reload :var file="/home/samuel/git/sys/rde/rde/examples/abcdw/configs.org"
(require 'org)
(org-babel-tangle-file file)
#+end_src

*** on/off
:PROPERTIES:
:ID:       47e85da5-f5ea-4f5c-b26a-a10c0b8fdd3c
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:

*** hi
:PROPERTIES:
:ID:       2f5b0dd4-5f68-4efa-aadc-853c6d2fdb11
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
#+end_src
*** TODO bye
:PROPERTIES:
:ID:       08229c7a-ffa3-4b09-8bfd-f8fa85300131
:CREATED:  [2022-11-09 Wed 10:14]
:UPDATED:  [2022-11-09 Wed 10:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src elisp :noweb-ref null
(let ((mode :i))
  (cl-loop
   for command in '((herd (:i start :o stop) pipewire)
                    (sudo rfkill (:i block :o unblock) wifi))
   collect (cl-loop
            for term in command
            collect (if (eq 'cons (type-of term))
                        (progn (message "%s" term)
                               (plist-get term mode))
                      term))))
#+end_src

#+RESULTS:
| herd | start  | pipewire |      |
| sudo | rfkill | block    | wifi |

* Footnotes
:PROPERTIES:
:ID:       476ef762-1350-4afa-a8ad-2cd3e42eb730
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-10-05 Wed 15:45]
:END:

[fn:4] as of [2022-10-05 Wed], [[id:93ad19fa-a4fe-48c8-81ac-42bd5e138af9][swaywm]]
[fn:3] using olivetti, nov-el, and rde@77bf57ba

[fn:2] example for how =:var= header args are dealt with in an
=org-babel-execute:backend= situation

#+begin_src emacs-lisp :tangle no :noweb-ref null
(defun org-babel-execute:restclient (body params)
  "Execute a block of Restclient code with org-babel.
This function is called by `org-babel-execute-src-block'"
  (message "executing Restclient source code block")
  (with-temp-buffer
    (let ((results-buffer (current-buffer))
          (restclient-same-buffer-response t)
          (restclient-same-buffer-response-name (buffer-name))
          (display-buffer-alist
           (cons
            '("\\*temp\\*" display-buffer-no-window (allow-no-window . t))
            display-buffer-alist)))

      (insert (buffer-name))
      (with-temp-buffer
        (dolist (p params)
          (let ((key (car p))
                (value (cdr p)))
            (when (eql key :var)
              (insert (format ":%s = <<\n%s\n#\n" (car value) (cdr value))))))
        (insert body)
        (goto-char (point-min))
        (delete-trailing-whitespace)
        (goto-char (point-min))
        (restclient-http-parse-current-and-do
         'restclient-http-do (org-babel-restclient--raw-payload-p params) t))

      (while restclient-within-call
        (sleep-for 0.05))

      (goto-char (point-min))
      (when (equal (buffer-name) (buffer-string))
        (error "Restclient encountered an error"))

      (when (or (org-babel-restclient--return-pure-payload-result-p params)
                (assq :noheaders params)
                (assq :jq params))
        (org-babel-restclient--hide-headers))

       (when-let* ((jq-header (assoc :jq params))
                  (jq-path "jq"))
        (shell-command-on-region
         (point-min)
         (point-max)
         (format "%s %s" org-babel-restclient--jq-path
                         (shell-quote-argument (cdr jq-header)))
         (current-buffer)
         t))

       ;; widen if jq but not pure payload
      (when (and (assq :jq params)
                 (not (assq :noheaders params))
                 (not (org-babel-restclient--return-pure-payload-result-p params)))
        (widen))

      (when (not (org-babel-restclient--return-pure-payload-result-p params))
        (org-babel-restclient--wrap-result))

      (buffer-string))))
#+end_src
[fn:1] capture template as an interactive function so we can use it as
a COMMAND, and consequently, bind it to a key--better traceability
than a lambda
