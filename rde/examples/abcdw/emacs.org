:PROPERTIES:
:UPDATED:  [2022-07-09 Sat 17:33]
:ID:       84700327-3a84-4d33-9918-dd06a809c28f
:CREATED:  <2022-03-03 Thu 12:06>
:END:
#+title: emacs config
#+filetags: hello
#+auto-tangle: yes
#+PROPERTY: header-args    :tangle-mode (identity #o444)
#+PROPERTY: header-args:sh :tangle-mode (identity #o755)

* tangling
:PROPERTIES:
:ID:       4527ed19-6609-47bd-8892-a00c4cba575c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
** ensure headings are sorted alphabetically :demo:
:PROPERTIES:
:ID:       0b7994f5-f5b8-4f02-b54d-995f7119a67a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :tangle no
(org-map-entries
 (lambda ()
   (when (org-get-heading)
     (org-sort-entries t ?a))))
#+end_src

** noweb tangler ; root                                               :meta:
:PROPERTIES:
:ID:       1b524325-ce8c-4d9a-8496-69a393a036e1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src scheme :noweb yes :tangle emacs.scm :tangle-mode
(define-module (rde examples abcdw emacs)
  #:export (init-el))

(define init-el
  '(
    ;; NOWEB GENERAL START
    <<general>>
    ;; NOWEB GENERAL END

    ;; NOWEB CONF START
    <<conf>>
    ;; NOWEB CONF END
    ))
#+end_src

* configs
:PROPERTIES:
:ID:       0b25418b-3898-42da-81f2-cfc93aa51017
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
** about this file
:PROPERTIES:
:ID:       7bc94a51-be51-4019-b34b-bb55295f09db
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** slice
:PROPERTIES:
:ID:       160d55fa-62fc-4742-880d-1dbade1ce186
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-08 Fri 10:32]
:END:
#+begin_src emacs-lisp :tangle no
(org-tags-sparse-tree)
;; (org-match-sparse-tree nil "^\\{(C|s|M)") ; for binding headlines {C-c C-u}
#+end_src

**** tag
:PROPERTIES:
:ID:       cc961f56-c54c-4bb2-b221-33c5659afaf0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** ~func~                                                       :func:
:PROPERTIES:
:ID:       c7912894-2617-4df4-a182-d01482be1429
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** ~kbd~                                                         :kbd:
:PROPERTIES:
:ID:       d2af5f8f-91c2-4d91-85f7-5382242acdcf
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** ~meta~                                                       :meta:
:PROPERTIES:
:ID:       9e3411ce-4dc6-4eb9-85c3-0ae8067fdb21
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no
(org-tags-sparse-tree nil "meta")
#+end_src

#+RESULTS:

***** ~var~                                                         :var:
:PROPERTIES:
:ID:       f1a312b0-5796-4a20-a6a8-1199eef77c21
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** :tangle-mode
:PROPERTIES:
:ID:       363d3850-6808-439f-90db-d57678f1c0ba
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** #o444 ; readonly
:PROPERTIES:
:ID:       aac0c47d-869c-4d8c-879e-e28d5905f191
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** #0755 ; executable
:PROPERTIES:
:ID:       6f68bce4-dd1d-467c-bd4a-3f6a03b4d63f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

** bindings                                                            :kbd:
:PROPERTIES:
:ID:       a0f75539-b0cc-4906-acb1-705744822bfe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** {C-c C-j} +org-goto+ -> consult-org-heading
:PROPERTIES:
:ID:       4ab6afa3-817d-4039-82e0-27340483d081
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
imenu's leaf-nodes-only display is wack and cba to find out why right now
#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-j") 'consult-org-heading)
#+end_src

#+RESULTS:
: consult-org-heading

**** consult-org--headings                                          :demo:
:PROPERTIES:
:ID:       29f3b8ca-60ce-42fa-9d5a-fb18752e0ac6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no
(require 'consult)

(pp (let ((h (s-join "/" (org-get-outline-path nil nil))))
      (car (seq-filter (lambda (s)
                         (message "%s BONK %s" h s)
                         (s-contains? h s))
                       (consult-org--headings nil nil nil)))))
#+end_src

#+RESULTS:
:results:
#("bindings/{C-c C-j} +org-goto+ -> consult-org-heading􀜋" 0 1
(face org-level-1 consult-org--heading
(#<marker at 1803 in emacs.org> 2 nil nil))
1 8
(face org-level-1)
9 52
(face org-level-2)
52 53
(consult-strip t invisible t))
:end:

***** assoc                                                        :demo:
:PROPERTIES:
:ID:       5827c69b-012f-4394-8973-139c454bd947
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :results drawer :tangle no
(pp (assoc (s-join "/" (org-get-outline-path t nil))
           (consult-org--headings nil nil nil)))
#+end_src

#+RESULTS:
:results:
nil
:end:

#+RESULTS:
: bindings/{C-c C-j} +org-goto+ -> consult-org-heading/outline path ; to assoc

****** org-babel-indent-block ; indent babel
:PROPERTIES:
:ID:       a2e3f5db-5cc5-4531-9c9d-470183f5e8aa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 16:57]
:END:

#+begin_src emacs-lisp :noweb-ref org
(defvar qz/org-babel-indent-exclude-lang
  '("yaml")
  "org-babel languages to exclude from auto indent/format.")

;;(setq qz/org-babel-indent-exclude-lang nil)
;;(setq qz/debug t)

(defun qz/org-babel-indent-block (beg end &rest args)
  (interactive "r")
  (and qz/debug (message "qz/org-babel-indent-block: BEG %s END %s ARGS %s" beg end args))
  (save-mark-and-excursion
    (when (and (funcall-interactively 'org-babel-mark-block)
               (not (seq-contains-p
                     qz/org-babel-indent-exclude-lang
                     (car (car (cdr (car (org-babel-tangle-single-block 1 t))))))))
      (call-interactively 'indent-region))))

(define-key org-mode-map
  (kbd "C-c C-v C-\\") 'qz/org-babel-indent-block)

;; NOTE: blocks default
;;(add-to-list 'org-ctrl-c-ctrl-c-hook 'qz/org-babel-indent-block)
;;(setq org-ctrl-c-ctrl-c-hook nil)
;;
;; NOTE: not the right eval/exec fn for `{C-c C-c}'
;;(advice-add 'org-babel-eval :before 'qz/org-babel-indent-block)
;;(advice-remove 'org-babel-eval 'qz/org-babel-indent-block)
;;
;; conclusion: use `advice' so as not to block standard org-mode
;; `{C-c C-c}' behaviour like with `org-ctrl-c-ctrl-c-hook'

(qz/advice- org-babel-execute-src-block :before qz/org-babel-indent-block)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-babel-indent-block | qz/advice-disable--org-babel-execute-src-block--qz/org-babel-indent-block |

****** org-babel-refresh-graphics
:PROPERTIES:
:ID:       4d9573c9-c758-40a1-9af3-8d61f65e97bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-04 Mon 13:09]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-refresh-inline-images (&rest args)
  (org-toggle-inline-images t)
  (org-toggle-inline-images t))

(qz/advice- org-babel-execute-src-block :after qz/org-refresh-inline-images)
#+end_src

#+RESULTS:
| qz/advice-enable--org-babel-execute-src-block--qz/org-refresh-inline-images | qz/advice-disable--org-babel-execute-src-block--qz/org-refresh-inline-images |

****** re-sorting to emulate initial position                     :demo:
:PROPERTIES:
:ID:       c26dda0d-fbd1-4c47-8763-6852e710aacc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:07>
:END:
#+begin_src emacs-lisp :tangle no
(let* ((c 0)
       (cands (consult--with-increased-gc (consult-org--headings nil nil nil)))
       (olp (s-join "/" (org-get-outline-path t nil)))
       (current-cand (seq-find (lambda (s)
                                 (setq c (+ 1 c))
                                 (and qz/debug (message "%s BONK %s" olp s))
                                 (s-contains? olp s))
                               (consult-org--headings nil nil nil))))

  (message "%s" (list current-cand c (length cands)))

  (append
   (cl-subseq cands (1- c) (length cands))
   (cl-subseq cands 0 (- c 2)))

  ;;  (nth (1- c) cands)
  ;; (message
  ;;  "%S"
  ;;  (mapc 'org-no-properties
  ;;        (list
  ;;         (nth (1- c) cands)
  ;;         (nth c cands)
  ;;         (nth (1+ c) cands))))
  )
#+end_src

#+RESULTS:
: ("bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽" "bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁖬" "system commands􁹖")
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org--headings/assoc/re-sorting to emulate initial position􁂽"
"bindings/{C-c C-j} +org-goto+ -> consult-org-heading/consult-org-heading ; redef􁒉"
"system commands􁴲")

**** consult-org-heading ; redef                                    :demo:
:PROPERTIES:
:ID:       4c4443b8-861c-4002-9e71-495dad5df214
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 15:06>
:END:

hmm. although some proxy for 'initial position' - it doesn't actually
work so nicely.

#+begin_src emacs-lisp :tangle no
(defun consult-org-heading (&optional match scope)
  "Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered."
  (interactive (unless (derived-mode-p 'org-mode)
                 (user-error "Must be called from an Org buffer")))
  (let* ((c 0)
         (prefix (not (memq scope '(nil tree region region-start-level file))))
         (cands (consult--with-increased-gc (consult-org--headings prefix match scope)))
         (olp (s-join "/" (org-get-outline-path t nil)))
         (current-cand (seq-find (lambda (s)
                                   (setq c (1+ c))
                                   (and qz/debug (message "%s BONK %s" olp s))
                                   (s-contains? olp s))
                                 (consult-org--headings nil nil nil))))
    (message "%s" c)
    (setq consult-initial-position (- c 1))
    (consult--read
     (if (and nil current-cand)
         (append
          (cl-subseq cands (- c 1) (length cands))
          (cl-subseq cands 0 (- c 2)))
       cands)

     :prompt "Go to heading: "
     ;; `default' will just make some nonsense value which doesn't respect the setup (ordering, selection)
     ;;   instead what we're going for is to
     ;;     - make the cand list, sort
     ;;     - jump to `default-candidate', retaining sort
     ;;       - note that a 'jump' can be some numerical index of cands, therefore an intial-position key
     ;;       - where relevance of candidate is given by some function of candidates
     ;;     - a resort can emulate 'initial-position'
     ;; `initial' will filter all other cands, which makes it totally unsuitable


     :category 'consult-org-heading
     :sort nil
     :require-match t
     :history '(:input consult-org--history)
     :narrow (consult-org--narrow)
     :state (consult--jump-state)
     :group
     (when prefix
       (lambda (cand transform)
         (let ((name (buffer-name
                      (marker-buffer
                       (car (get-text-property 0 'consult-org--heading cand))))))
           (if transform (substring cand (1+ (length name))) name))))
     :lookup
     (lambda (_ candidates cand)
       (when-let (found (member cand candidates))
         (car (get-text-property 0 'consult-org--heading (car found))))))))

(defun qz/vertico-set-initial-position()
  (when consult-initial-position
    (vertico-next consult-initial-position)))

(setq vertico-mode-hook nil)

                                        ;(add-hook 'vertico-mode-hook 'qz/vertico-set-initial-position)
#+end_src

#+RESULTS:
| qz/vertico-set-initial-position |
*** {C-M-y} consult-yank
:PROPERTIES:
:ID:       bad4e8e6-d723-4422-8053-9ed48d6196b1
:CREATED:  [2022-04-08 Fri 10:29]
:UPDATED:  [2022-04-08 Fri 10:33]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-M-y") 'consult-yank-from-kill-ring)
#+end_src

*** {C-c C-M-i} org-global-cycle
:PROPERTIES:
:ID:       9a8fc009-7e01-46ab-a467-4d639723a060
:CREATED:  <2022-02-28 Mon 09:42>
:UPDATED:  [2022-04-13 Wed 12:49]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(define-key org-mode-map (kbd "C-c C-M-i")
            (lambda ()
              "go to default opening mode -- see `org-startup-folded'"
              (interactive)
              (funcall-interactively 'org-global-cycle '(4))))
#+end_src

*** {C-x C-M-f} consult-recent-file
:PROPERTIES:
:ID:       b3499da4-4d04-4186-9183-f205befcc5b4
:CREATED:  <2022-02-24 Thu 16:13>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:43>
:END:

#+begin_src emacs-lisp :noweb-ref kbd
(define-key global-map (kbd "C-x C-M-f") 'consult-recent-file)
#+end_src

*** {C-x} <-> {C-u}
:PROPERTIES:
:ID:       c8b38800-ee6c-499e-adba-359d0bd1afe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** {C-z} newline-above
:PROPERTIES:
:ID:       e24287bd-30ba-448b-8fec-202fc913c71d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref kbd
;;(custom-set-variables
;; '(org-disputed-keys '([(shift o)] . [(meta shift o)])))

(defun qz/newline-above ()
  (interactive)
  (save-excursion
    (beginning-of-line)
    (newline))
  (indent-according-to-mode))

(define-key global-map (kbd "C-z") 'qz/newline-above)
;;(define-key global-map (kbd "C-o") 'open-line)
;;
;;(org-remap org-mode-map
;;           'open-line 'org-open-line)

#+end_src

#+RESULTS:
: qz/newline-above

*** {C-M-j} delete-indentation
:PROPERTIES:
:ID:       ce4366f0-6d05-4e8b-b0f8-93dc87e8bf5b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
maximum [[id:6eb04531-fbcc-45da-86e9-499b48caeb8a][ergonomics]]

#+begin_src emacs-lisp :noweb yes :noweb-ref kbd
(define-key global-map (kbd "C-M-j") 'delete-indentation)
#+end_src


*** {H-M-s-h}jkl windmove swap
:PROPERTIES:
:ID:       e12feea7-bf2a-44b8-acfe-95e2af12357e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:26]
:END:

I don't use this very much, as it curls my whole left hand up (qwerty troubles)

#+begin_src emacs-lisp :noweb yes :noweb-ref kbd
(define-key global-map (kbd "M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "M-s-l") 'windmove-swap-states-right)
(define-key global-map (kbd "H-M-s-h") 'windmove-swap-states-left)
(define-key global-map (kbd "H-M-s-j") 'windmove-swap-states-down)
(define-key global-map (kbd "H-M-s-k") 'windmove-swap-states-up)
(define-key global-map (kbd "H-M-s-l") 'windmove-swap-states-right)
#+end_src

#+RESULTS:
: windmove-swap-states-right

*** noweb-tangler
:PROPERTIES:
:ID:       92b9eb8a-c76c-4284-8dfe-74870f4dcab9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB KBD START
<<kbd>>
;; NOWEB KBD END
#+end_src
*** {H-s-h}jkl windmove
:PROPERTIES:
:ID:       e3015f6e-f7ca-4e31-aa05-290a438862da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:26]
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref kbd
(define-key global-map (kbd "H-s-h") 'windmove-left)
(define-key global-map (kbd "s-h")   'windmove-left)
(define-key global-map (kbd "H-s-j") 'windmove-down)
(define-key global-map (kbd "s-j")   'windmove-down)
(define-key global-map (kbd "H-s-k") 'windmove-up)
(define-key global-map (kbd "s-k")   'windmove-up)
(define-key global-map (kbd "H-s-l") 'windmove-right)
(define-key global-map (kbd "s-l")   'windmove-right)
#+end_src

#+RESULTS:
: windmove-right

*** {s-\} org-store-link
:PROPERTIES:
:ID:       344c5143-a1c9-4a3e-9ff1-3be2d104f974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref kbd
(define-key global-map (kbd "s-\\") 'org-store-link)
#+end_src

#+RESULTS:
: org-store-link

*** isearch 
:PROPERTIES:
:ID:       7a81203e-e7c0-474a-941b-b6c8a2e51a8d
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:END:

**** isearch-local occur
:PROPERTIES:
:ID:       75441f13-8830-42fe-b3fe-b22b2dbf4275
:CREATED:  <2022-02-25 Fri 10:11>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:03]
:END:

#+begin_src emacs-lisp :noweb-ref kbd
;; Activate occur easily inside isearch

(define-key isearch-mode-map (kbd "C-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (occur (if isearch-regexp
                           isearch-string
                         (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (let ((case-fold-search isearch-case-fold-search)) (occur (if isearch-regexp isearch-string (regexp-quote isearch-string)))) |

**** TODO isearch-local consult-line
:PROPERTIES:
:ID:       7d110b1d-33d4-4d00-9bd2-fcb11356a57c
:CREATED:  <2022-02-25 Fri 10:19>
:ROAM_EXCLUDE: t
:END:

hmm, doesn't allow further input

#+begin_src emacs-lisp :noweb-ref kbd
(define-key isearch-mode-map (kbd "M-o")
            (lambda () (interactive)
              (let ((case-fold-search isearch-case-fold-search))
                (consult-line (if isearch-regexp
                                  isearch-string
                                (regexp-quote isearch-string))))))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (let ((case-fold-search isearch-case-fold-search)) (consult-line (if isearch-regexp isearch-string (regexp-quote isearch-string)))) |

**** regexp as default
:PROPERTIES:
:ID:       99f00fd1-d744-4bac-b3a1-11151ce843a3
:CREATED:  <2022-02-25 Fri 10:09>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref kbd
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+end_src

#+RESULTS:
: isearch-backward

** consult
:PROPERTIES:
:ID:       969bce5f-b959-496e-afe4-81f2407592f3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** noweb tangler
:PROPERTIES:
:ID:       2c2c7344-4b82-4f3e-9b52-f64699a295c3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf :noweb yes
;; NOWEB CONSULT START
(with-eval-after-load 'consult
  <<consult>>
  )
;; NOWEB CONSULT END
#+end_src

*** consult-ripgrep-files :func:
:PROPERTIES:
:ID:       d047d7c0-1031-42b8-b86a-0bcfbb30901a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

not elegant AT ALL, but the API to ripgrep from consult uses
'default-directory', so suck it up

#+begin_src emacs-lisp :noweb-ref consult
(defun qz/consult-ripgrep-files (files)
  (let* ((consult-ripgrep-args (concat consult-ripgrep-args " -L"))
         (rg-dir "/tmp/null"))
    (f-delete rg-dir t)
    (mkdir rg-dir t)
    (mapcar (lambda (f)
              (f-symlink (expand-file-name f)
                         (format "%s/%s-%s"
                                 rg-dir (gensym) (s-replace "/" "-" f))))
            files)
    (consult-ripgrep rg-dir)))
#+end_src

#+RESULTS:
: qz/consult-ripgrep-files

*** {C-c b s} consult-ripgrep-bookmark                           :func:kbd:
:PROPERTIES:
:ID:       1ec5c6fe-e672-457a-ab67-82e358244df3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

consuming

#+begin_src emacs-lisp :noweb-ref consult
(defun qz/consult-ripgrep-bookmark ()
  (interactive)
  (let ((files (mapcar (lambda (b) (cdr (assoc 'filename b)))
                       bookmark-alist)))
    (qz/consult-ripgrep-files files)))

(define-key global-map (kbd "C-c b s") 'qz/consult-ripgrep-bookmark)
#+end_src

#+RESULTS:
: qz/consult-ripgrep-bookmark

*** {C-x C-M-SPC} consult-mark
:PROPERTIES:
:ID:       a4470ca2-9b0e-4ab4-a1d0-32b86da18abd
:CREATED:  [2022-03-31 Thu 11:07]
:UPDATED:  [2022-03-31 Thu 11:08]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref consult
(define-key global-map (kbd "C-x C-M-SPC") 'consult-global-mark)
#+end_src
*** basic remaps
:PROPERTIES:
:ID:       0209d41e-b385-4428-a6c5-a95929250975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:08]
:END:
#+begin_src emacs-lisp :noweb-ref consult
(mapcar (lambda (bind)
          (define-key global-map (kbd (car bind)) (cadr bind)))
        '(("C-x b" consult-buffer)))
#+end_src

#+RESULTS:
| consult-buffer |

** custom
:PROPERTIES:
:ID:       04af18a1-8d83-4ca0-a28f-7ecc2f886959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** noweb tangler                                                    :meta:
:PROPERTIES:
:ID:       9756d355-cbde-4d15-b83b-4f54d31b8e05
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB CUSTOM START
<<custom>>
;; NOWEB CUSTOM END
#+end_src

*** org-imenu-depth                                                   :var:
:PROPERTIES:
:ID:       284a5e13-b1b2-4848-ac51-db4b94fa591b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: help:imenu-create-index-function
- :: help:org-imenu-get-tree
- :: help:imenu
- :: info:elisp#Imenu

#+begin_src emacs-lisp :noweb-ref custom
(custom-set-variables
 '(org-imenu-depth 99))
#+end_src

#+RESULTS:

(setq org-goto-interface 'outline-path-completionp)
(setq org-outline-path-complete-in-steps nil)
**** COMMENT it would be nice to have individual headings present, not just 'leaves'
:PROPERTIES:
:ID:       927d486d-50ae-4e2e-806c-ab6776485c6f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-25 Fri 10:39]
:END:
#+begin_src emacs-lisp :results code
(org-imenu-get-tree)
#+end_src

#+RESULTS:

** es-mode
:PROPERTIES:
:ID:       acd0dc77-8aae-4777-99ba-e1f39d2a03f5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** choose
:PROPERTIES:
:ID:       46a9f275-2dc9-4a10-9641-224c3afa5415
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** es-choose-url
:PROPERTIES:
:ID:       8dba72bc-f72e-42b8-8e58-3c92b3aad47b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-url (&optional url backend env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-url: %s"
                         (list url backend env)))
  (let* ((backend (qz/es-choose-backend backend))
         (url (or url
                  (and backend env
                       (qz/es-choose-env env)
                       (format qz/newstore-es-string backend env)))))
    (message "es-default-url: %s"
             (setq es-default-url
                   (or url (completing-read
                            "es-url: " qz/newstore-es-urls)))))
  es-default-url)

(defun qz/es-choose-backend (&optional backend)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-backend: %s" backend))
  (message "qz/newstore-es-backend-current: %s"
           (setq qz/newstore-es-backend-current
                 (or backend (completing-read "es-backend: " qz/newstore-es-backends))))
  qz/newstore-es-backend-current)

(defun qz/es-choose-env (&optional env)
  (interactive)
  (and qz/debug (message "DEBUG qz/es-choose-env: %s" env))
  (message "qz/newstore-es-env-current: %s"
           (setq qz/newstore-es-env-current
                 (or env (completing-read "es-env: " qz/newstore-envs))))
  qz/newstore-es-env-current)

(defun qz/test-es-ui (&optional url backend env)
  (setq qz/newstore-es-env-current nil
        qz/newstore-es-backend-current nil)
  (funcall-interactively 'qz/es-choose-url url backend env)
  (list
   qz/newstore-es-env-current
   qz/newstore-es-backend-current
   es-default-url))

;;(qz/test-es-ui)              ;; prompt, noset
;;(qz/test-es-ui nil)          ;; prompt, noset
;;(qz/test-es-ui nil nil)      ;; prompt, noset
;;(qz/test-es-ui nil nil nil)  ;; prompt, noset
;;(qz/test-es-ui nil 'kibana 'production)    ;; noprompt, set

#+end_src

#+RESULTS:
: qz/test-es-ui

**** es-choose-cookie-headers
:PROPERTIES:
:ID:       3afd3b6e-400a-49ba-a3bd-1f007531a257
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-08 Fri 10:59]
:END:
#+begin_src emacs-lisp :noweb-ref es
(defun qz/es-choose-cookie-headers ()
  "TODO"
  (interactive)
  (message
   "es-default-headers: %s"
   (setq es-default-headers `(("Content-Type" . "application/json; charset=UTF-8")
                              ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                                                   (read-from-minibuffer "es cookie: ")))))))
#+end_src

#+RESULTS:
: qz/es-choose-cookie-headers

*** noweb tangler
:PROPERTIES:
:ID:       43699aa6-0e26-487b-a597-902577ddf22a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-05-25 Wed 12:35]
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB ES START
(with-eval-after-load 'restclient
  <<es>>
  )
;; NOWEB ES END
#+end_src



**** settings
:PROPERTIES:
:ID:       8d39050f-25ab-45c0-8b58-bed537d895e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref es
(setq es-default-url "https://elasticsearch-production.newstore.luminatesec.com"
      es-current-url es-default-url
      es-default-headers nil
      es-always-pretty-print t
      es-default-headers
      `(("Content-Type" . "application/json; charset=UTF-8")
        ("Cookie" . ,(format "ACCEZZIOCOOKIE=%s"
                             "11fdbe68-b0f3-4dd0-9894-f97afe3662dc"))))

(setq qz/newstore-es-string "https://%s-%s.newstore.luminatesec.com"
      qz/newstore-es-backends '(kibana elasticsearch)
      qz/newstore-es-backend-current nil
      qz/newstore-es-env-current nil
      qz/newstore-es-urls (cl-loop for env in qz/newstore-envs
                                   append (cl-loop for es-backend in qz/newstore-es-backends
                                                   collect (format qz/newstore-es-string es-backend env))))
#+end_src

#+RESULTS:
| https://kibana-sandbox.newstore.luminatesec.com | https://elasticsearch-sandbox.newstore.luminatesec.com | https://kibana-staging.newstore.luminatesec.com | https://elasticsearch-staging.newstore.luminatesec.com | https://kibana-production.newstore.luminatesec.com | https://elasticsearch-production.newstore.luminatesec.com |

** embark
:PROPERTIES:
:ID:       dfab35d0-222c-4d67-82d8-07a2d068a597
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** noweb tangler
:PROPERTIES:
:ID:       0336dc83-f896-4b36-9f70-c1784b997019
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB EMBARK START
<<embark-hoist>>
(with-eval-after-load 'embark
  <<embark>>
  )
;; NOWEB EMBARK END
#+end_src

*** {C-.} -> embark-act :kbd:
:PROPERTIES:
:ID:       8234c6dc-773a-4da2-8e8a-e96970f8c47f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref embark-hoist
(define-key global-map (kbd "C-.") 'embark-act)
#+end_src

#+RESULTS:
: embark-act

*** embark
:PROPERTIES:
:ID:       8a00fc8c-1be0-4f6f-8c5e-9b9018f65298
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref embark
#+end_src

** general
:PROPERTIES:
:ID:       8f3dada6-e104-4726-aaa2-25c1475c534e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** advice                                                     :func:macro:
:PROPERTIES:
:ID:       f061bce6-701f-4f81-b0e2-dc97554b58c2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defmacro qz/advice- (target-fn state advice-fn)
  (let* ((s-advice (lambda (e)
                     (intern (format "qz/advice-%s--%s--%s"
                                     e target-fn advice-fn))))
         (enable (funcall s-advice 'enable))
         (disable (funcall s-advice 'disable)))
    `(progn
       (defun ,enable ()
         (interactive)
         (advice-add ',target-fn ,state ',advice-fn))

       (defun ,(funcall s-advice 'disable) ()
         (interactive)
         (advice-remove ',target-fn ',advice-fn))

       (,enable)
       (list ',enable ',disable))))
#+end_src

#+RESULTS:
: qz/advice-
*** org-babel: elisp: cons->table
:PROPERTIES:
:ID:       4841fe9c-4a58-48a2-8882-efcc289ead9f
:CREATED:  [2022-04-11 Mon 10:46]
:UPDATED:  [2022-04-11 Mon 11:02]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-04-11 Mon 10:07]--[2022-04-11 Mon 10:47] =>  0:40
:END:

- see also :: [[id:317eb3df-458c-411b-a8d3-32507d3f025e][org-table]]

just kind of wack to see  
: ((1 . a) (2 . b))
all the time, especially when the results are massive 

#+name: elisp-cons->table
#+begin_src elisp :noweb-ref general
(defun cons->table (body &optional &key cols tail-fn)
  "a transformation helper for org-babel, which has defaults
to parse robustly the proper-list[1] over the simple cons[2]

body      *values you wish to transform*: a list; cons, proper,
          a-, etc.
:cols     *column headers for the results*: wrap the result in
          ((co1 col2) . (hline . (..res..)); as such, they will
          be made in addition to any headers and/or `hlines'
          applied by `org-babel' (esp. those from `:colnames').
:tail-fn  *control the parsing of each entry of `body'*:
          by default, `cdr' because for a simple `cons' '(a . b),
          cdr will yield 'b -> (cdr '(a . b)).  If operating on
          some `list' '(a b), then the analog for `'b' is `cadr'
          -> (cadr '(a b)) -> `'b'

[1] proper-list: '(a b)   ; '(a . (b . nil))
[2] simple-cons: '(a . b) ; '(a . b)"
  (let ((res (mapcar (lambda (c)
                       (list (car c)
                             (funcall (or tail-fn 'cdr) c)))
                     body)))
    (if cols
        (cons cols (cons 'hline res))
      res)))

;;; e.g  {C-n C-SPC M-e C-p C-x C-;}
;; (cons->table
;;  '((56 . "/home/samuel/life/roam/20210420T114708Z-newstore.org") 
;;    (11 . "/home/samuel/life/roam/20210813T161035Z-kubernetes.org")
;;    (10 . "/home/samuel/life/roam/20200515T151822Z-postgresql.org"))
;;  :cols '(count file))
#+end_src

#+RESULTS: elisp-cons->table
: cons->table

*** ensure-list
:PROPERTIES:
:ID:       8861b226-59df-4ce4-a54d-24695f1a5d4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/ensure-list (s)
  (if (listp s)
      s
    (list s)))
#+end_src

#+RESULTS:
: qz/ensure-list

*** TODO debug
:PROPERTIES:
:ID:       fe64fe7a-bb4c-4828-bb8b-5f263df8b3e9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defvar qz/debug 0 "debugging assists")

(defmacro qz/debug- (&rest body)
  (if qz/debug
      `(progn ,@body)))

(qz/debug- (message "yo"))
#+end_src

#+RESULTS:
: yo
**** demo ;; what is happening here? why is message evaluated
:PROPERTIES:
:ID:       759495b5-773d-4276-ae76-449267545e4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no
(view-echo-area-messages)
(setq qz/debug 0)
(qz/debug- (message "offffff"))
(setq qz/debug 1)
(qz/debug- (message "on"))
#+end_src

#+RESULTS:
: on

*** newstore
:PROPERTIES:
:ID:       f4fe201f-b26c-48cf-9c15-5a3f5095306d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref general
(setq qz/newstore-envs '(sandbox staging production)
      qz/newstore-env-current nil
      qz/newstore-envs-abbrev '((sandbox . x) (staging . s) (production . p))
      qz/newstore-tenant-current nil
      qz/newstore-tenants '("dodici" "windsor"
                            "boardriders" "marine-layer"
                            "frankandoak" "vince"))

(defun qz/newstore-choose-env (&optional env)
  (interactive)
  (message "qz/newstore-env-current: %s"
           (setq qz/newstore-env-current
                 (or env (completing-read "env: " qz/newstore-envs))))
  (qz/restclient-choose-env qz/newstore-env-current)
  (qz/es-choose-url nil nil qz/newstore-env-current))

(defun qz/newstore-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/newstore-tenant-current: %s"
           (setq qz/newstore-tenant-current
                 (or tenant (completing-read "tenant: " qz/newstore-tenants))))
  (qz/restclient-choose-tenant qz/newstore-tenant-current))

(defun qz/newstore-auth-current ()
  (message "qz/newstore-auth-cache: <for qz/newstore-env-current: %s>"
           qz/newstore-env-current)
  (setq qz/newstore-auth-cache
        (qz/newstore-auth qz/newstore-env-current)))

(defun qz/newstore-auth (env)
  "get the auth (password) associated with
a given `env' from `qz/newstore/envs'

to populate, just fill a `pass' entry like so echo mypass | pass
  insert -e newstore/production"
  (s-trim (shell-command-to-string
           (format "pass newstore/%s" env))))

;; (defun qz/newstore-quick-auth ()
;;   (interactive)
;;   (qz/newstore-choose-tenant)
;;   (qz/newstore-choose-env)
;;   (org-sbe "newstore-token"))
#+end_src

#+RESULTS:
: qz/newstore-quick-auth

*** shell-command-to-list-of-strings :func:
:PROPERTIES:
:ID:       0fbf9125-f032-4c1b-ac6b-af600057cc66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref general
(defun qz/shell-command-to-list-of-strings (command)
  (remove "" (s-split "\n" (shell-command-to-string command))))
#+end_src

#+RESULTS:
: qz/shell-command-to-list-of-strings

*** revert-buffer-no-confirm                                         :func:
:PROPERTIES:
:ID:       0105c4f8-016b-47a8-a425-e18911027d11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: http://www.emacswiki.org/emacs-en/download/misc-cmds.el

#+begin_src emacs-lisp :noweb-ref general
(defun qz/revert-buffer-no-confirm ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer :ignore-auto :noconfirm))
#+end_src
*** dwim-narrow
:PROPERTIES:
:ID:       33f19a38-eb70-473d-8445-c916b7c3c2ff
:CREATED:  <2022-03-11 Fri 11:53>
:UPDATED:  [2022-04-12 Tue 09:26]
:ROAM_EXCLUDE: t
:END:

- :: [[id:23f2a12f-8537-4eb7-a150-adb82ba182d6][ergonomics: emacs: dwim narrowing]]
  - :: https://writequit.org/articles/working-with-logs-in-emacs.html

#+begin_src emacs-lisp :noweb-ref conf
(defun eos/narrow-or-widen-dwim (p)
  "Widen if buffer is narrowed, narrow-dwim otherwise.
Dwim means: region, org-src-block, org-subtree, or
defun, whichever applies first. Narrowing to
org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer
is already narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
        ((region-active-p)
         (narrow-to-region (region-beginning)
                           (region-end)))
        ((derived-mode-p 'org-mode)
         ;; `org-edit-src-code' is not a real narrowing
         ;; command. Remove this first conditional if
         ;; you don't want it.
         (cond ((ignore-errors (org-edit-src-code) t)
                (delete-other-windows))
               ((ignore-errors (org-narrow-to-block) t))
               (t (org-narrow-to-subtree))))
        ((derived-mode-p 'latex-mode)
         (LaTeX-narrow-to-environment))
        (t (narrow-to-defun))))

(define-key global-map (kbd "C-x C-n") 'eos/narrow-or-widen-dwim)
#+end_src

*** yq-interactively
:PROPERTIES:
:ID:       d31efc58-0563-43df-b372-61428272022f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defun qz/yq-interactively ()
  "haha yaml loophole"
  (interactive)
  (let ((jq-interactive-command "yq"))
    (call-interactively 'jq-interactively)))
#+end_src

#+RESULTS:
: qz/yq-interactively

** hyperbole
:PROPERTIES:
:ID:       530fac5a-4f90-489a-83d8-69b1b75ab249
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** (require 'hyperbole)
:PROPERTIES:
:ID:       03b4c561-6d9e-4c53-97ea-559dfbfc7eff
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(require 'hyperbole)
#+end_src

*** {C-<mouse-2} hkey-either
:PROPERTIES:
:ID:       ccc12df3-8b40-4bec-937f-c28692f1fed4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(define-key global-map (kbd "C-<down-mouse-2>") 'hkey-either)
(define-key global-map (kbd "M-<return>") 'hkey-either)
#+end_src

#+RESULTS:
: hkey-either
** programming
:PROPERTIES:
:ID:       5fe66077-8fc2-4d04-905d-d0b5ef925a6d
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
*** sql
:PROPERTIES:
:ID:       7be3838d-a859-469e-ae8c-049a299b658a
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
**** sql-indent
:PROPERTIES:
:ID:       d8965285-d090-4286-a4b5-e43e593b913b
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
CLOCK: [2022-03-17 Thu 10:06]--[2022-03-17 Thu 11:32] =>  1:26
:END:
***** TODO add-hook ;
:PROPERTIES:
:ID:       ed32b595-8b57-4f28-86b7-0a5e97651ae0
:CREATED:  [2022-03-17 Thu 10:06]
:UPDATED:  [2022-03-17 Thu 10:06]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf

#+end_src
*** [[id:091ac573-6b34-4e0e-88b8-415785d5ae85][python]]
:PROPERTIES:
:ID:       ed0b9a5d-4287-48f0-a518-4303fb2efe32
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
**** add-py-debug :func:
:PROPERTIES:
:ID:       a8049444-d35b-4b3c-a3eb-54678a3a17aa
:CREATED:  [2022-03-24 Thu 10:24]
:UPDATED:  [2022-05-02 Mon 12:21]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref conf
(defun qz/add-pdb-py-debug ()
  "add debug code and move line down"
  (interactive)
  (back-to-indentation)
  (insert "import pdb; pdb.set_trace();\n"))
#+end_src

#+RESULTS:
: qz/add-pdb-py-debug

**** org-babel-python-command
:PROPERTIES:
:ID:       8c209f94-c43d-4cd8-94f9-2a027b6ddaa3
:CREATED:  [2022-05-02 Mon 10:55]
:UPDATED:  [2022-05-02 Mon 11:02]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-python-command "python3")
#+end_src

*** [[id:0c02b1ad-3964-4b51-ba59-d2de0e05428f][golang]]
:PROPERTIES:
:ID:       f38578c6-09c1-4da0-8da0-90e0899a2ab1
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-30 Wed 11:59]
:ROAM_EXCLUDE: t
:END:
**** [[id:0aea7eaa-6d92-4eac-b575-64cea859302c][golines: emacs: set =gofmt-command= to =golines=, > =gofmt=]]
:PROPERTIES:
:ID:       68efdd3b-c5d0-4358-8e19-5db46d0685c6
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(setq gofmt-command "golines")
#+end_src

**** [[id:b387816a-6048-4378-b2f6-a40fd82858c4][gofmt: emacs: before-save hook]]
:PROPERTIES:
:ID:       05c0788d-0df4-472f-920d-e21d0b68d0ad
:CREATED:  [2022-03-30 Wed 11:59]
:UPDATED:  [2022-03-31 Thu 09:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref golang
(add-hook 'go-mode-hook
          (lambda () (add-hook 'before-save-hook
                               'gofmt-before-save
                               nil 'local)))
#+end_src

**** noweb tangler
:PROPERTIES:
:ID:       83d3fafb-7891-4dd6-bbca-4a4b1ca2f042
:CREATED:  [2022-03-30 Wed 12:01]
:UPDATED:  [2022-03-30 Wed 12:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB GOLANG START
(with-eval-after-load 'go-mode
  <<golang>>
  )
;; NOWEB GOLANG END
#+end_src
*** jq
:PROPERTIES:
:ID:       c2c34c3c-55e3-4854-b902-5ad11d3a58b4
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2022-04-05 Tue 12:49]
:ROAM_EXCLUDE: t
:END:

**** org-babel-default-header-args:jq
:PROPERTIES:
:ID:       eddd1740-904d-4bfe-becc-d662a43f0447
:CREATED:  [2022-04-05 Tue 12:49]
:UPDATED:  [2022-04-05 Tue 12:49]
:ROAM_EXCLUDE: t
:END:

it's nice to get a consistent wrap of the result

#+begin_src emacs-lisp :noweb-ref org
(setq org-babel-default-header-args:jq
      '((:results . "output")
        (:compact . "no")
        (:wrap . "src json")))
#+end_src

#+RESULTS:
: ((:results . output) (:compact . no) (:wrap . src baba))

** [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org]]
:PROPERTIES:
:ID:       71e29a1b-5349-4d90-965f-b628210f1fdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** agenda
:PROPERTIES:
:ID:       a5e89ace-6b97-4d12-9b79-03b7f0a19bf7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** data
:PROPERTIES:
:ID:       23a8e79a-4999-43ba-b5a7-2d8316a15507
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** setters
:PROPERTIES:
:ID:       bf117458-29ec-4a39-8fee-07c2482eba6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** [[id:ec8b00b4-3bd3-458c-9777-d2581c0f6fd5][agenda-files-update]]                                    :func:var:
:PROPERTIES:
:ID:       30c87ac3-057a-46c0-a969-456eee6d2de9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update (&rest _)
  "Update the value of `org-agenda-files' with relevant candidates"
  (interactive)
  (setq org-agenda-files (qz/files-agenda)
        qz/agenda-daily-files (qz/agenda-daily-files-f)))
#+end_src

#+RESULTS:
: qz/agenda-files-update
****** agenda-files-update-clock :func:var:
:PROPERTIES:
:ID:       5eb48172-a3c0-40d0-a8f3-bd2ae916b116
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/agenda-files-update-clock (&rest _)
  "An optimisation for org-clock, which is SO SLOW.
 Returns a LIST of files that contain CLOCK, which reduces
processing a lot"
  (interactive)
  (setq org-agenda-files (qz/clock-files)))
#+end_src

#+RESULTS:
: qz/agenda-files-update-clock

******* advice: org-clock-resolve
:PROPERTIES:
:ID:       fa191643-0cf4-4fd4-a5c9-0de9108435d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

- used in 'org-resolve-clocks

#+begin_src emacs-lisp :noweb-ref agenda
(list
 ;; optimisation setup: setup subset of clock files
 (qz/advice- org-clock-resolve :before qz/agenda-files-update-clock)
 ;; optimisation teardown: restore full set of agenda-files
 (qz/advice- org-clock-resolve :after qz/agenda-files-update))
#+end_src

#+RESULTS:
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update-clock | qz/advice-disable--org-clock-resolve--qz/agenda-files-update-clock |
| qz/advice-enable--org-clock-resolve--qz/agenda-files-update       | qz/advice-disable--org-clock-resolve--qz/agenda-files-update       |

***** [[id:9b0676a9-93d3-4449-ac82-721d4e20d4d6][daily-files]]                                              :func:var:
:PROPERTIES:
:ID:       f6bedbac-927c-46aa-bd67-e241af09bd76
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(setq qz/daily-title-regexp ".?[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}.?")

(defun qz/agenda-daily-files-f ()
  (seq-filter (lambda (s) (string-match qz/daily-title-regexp s))
              org-agenda-files))

;;(qz/agenda-daily-files-f)
#+end_src

#+RESULTS:
:results:
qz/agenda-daily-files-f
:end:

***** clock-files
:PROPERTIES:
:ID:       91873c41-446a-4eb1-9c28-c62e922ab5b3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/clock-files ()
  (split-string
   (shell-command-to-string
    "rg CLOCK ~/life/roam/ -c | grep -v 'org#' | awk -F '[,:]' '{print $1}'")))
#+end_src

#+RESULTS:
: qz/clock-files

***** files-agenda :func:
:PROPERTIES:
:ID:       53b918cd-26d6-4d02-9e6d-b0a4bffc9c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda :results drawer
(defun qz/files-agenda ()
  (seq-uniq (append qz/org-agenda-files (qz/project-files))))
#+end_src

***** [[id:cb81cfd7-fb16-4965-af20-69129cf4fd97][project-files]] :func:
:PROPERTIES:
:ID:       8279b4e0-f23a-44f9-a1af-07a44b5de957
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/project-files ()
  "Return a list of note files containing Project tag."
  (seq-map
   'car
   (org-roam-db-query
    '(:select :distinct file
              :from tags
              :inner :join nodes
              :on (= tags:node_id nodes:id)
              :where (= tags:tag "project")))))
#+end_src

#+RESULTS:
: qz/project-files
***** private-files :func:
:PROPERTIES:
:ID:       2c1e97dd-8d37-4ff8-b6cd-9440553adea1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-roam-private-files ()
  "Return a list of note files containing tag =private="
  (seq-map
   #'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag "private")])))
#+end_src
***** test
:PROPERTIES:
:ID:       6316d72a-a741-45a4-a239-d743ac860e6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** inspect-agenda-files
:PROPERTIES:
:ID:       d0faae20-6f08-445c-8ce3-ebaf9df2031b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-files ()
  `((org-files-list . ,(length (org-files-list)))
    ((org-agenda-files . ,(length (org-agenda-files)))
     ((qz/project-files . ,(length (qz/project-files)))
      (qz/agenda-daily-files-f . ,(length (qz/agenda-daily-files-f)))))))
#+end_src

#+RESULTS:
: qz/inspect-agenda-files

******* do
:PROPERTIES:
:ID:       b0e05fcc-998f-429e-89be-989241bff5e6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((qorg-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

****** inspect-agenda-updates
:PROPERTIES:
:ID:       7b5c6190-56ab-4aeb-85a8-309261cfd948
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-28 Mon 09:39>
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/inspect-agenda-updates ()
  (mapcar (lambda (s) `(,s . (,(progn (funcall s)
                                      (qz/inspect-agenda-files)))))
          '(qz/agenda-files-update qz/agenda-files-update-clock)))
#+end_src

#+RESULTS:
: qz/inspect-agenda-updates

******* do
:PROPERTIES:
:ID:       7d9a11fd-6239-44c4-a7e1-d8ccabcb64af
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :tangle no
(pp (qz/inspect-agenda-updates))
#+end_src

#+RESULTS:
#+begin_example
((qz/agenda-files-update
  ((org-files-list . 216)
   ((org-agenda-files . 205)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 124)))))
 (qz/agenda-files-update-clock
  ((org-files-list . 220)
   ((org-agenda-files . 43)
    ((qz/project-files . 203)
     (qz/agenda-daily-files-f . 30))))))
#+end_example

**** custom commands
:PROPERTIES:
:ID:       d1ac0c13-3aeb-423f-9385-afeafd2025a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** daily TODOs
:PROPERTIES:
:ID:       7e41b5a2-8678-4921-aebd-dcffecb0bbe5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
;; current (default) sorting strat
'((agenda habit-down time-up priority-down category-keep)
  (todo priority-down category-keep)
  (tags priority-down category-keep)
  (search category-keep))


(defun qz/agenda-todo-dailies ()
  "the most necessary simple invention in months.
(as of [2022-01-19 Wed])

get a list of `TODO' entries, from daily files, ordered by date (from filename/category) DESCENDING.

- see `qz/agenda-daily-files-f' for the subset view of `org-agenda-files'
- see `org-agenda-sorting-strategy' for sort permutations."
  (interactive)
  (let* ((org-agenda-files (qz/agenda-daily-files-f))
         (org-agenda-sorting-strategy '(timestamp-down category-down)))
    (org-todo-list)))

(define-key global-map (kbd "C-c n t") 'qz/agenda-todo-dailies)
#+end_src

#+RESULTS:
: qz/agenda-todo-dailies

***** g ; GTD
:PROPERTIES:
:ID:       ebd9c208-4ac6-49cc-8bdc-3f22f3554b6d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-05-03 Tue 11:02]
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-agenda-gtd ()
  (interactive)
  (org-agenda nil "g")
  (goto-char (point-min))
  (org-agenda-goto-today))

;;(setq org-agenda-custom-commands nil)
(require 'org-roam)

(message "agenda: setting custom commands\n%s" org-agenda-custom-commands)
(add-to-list
 'org-agenda-custom-commands
 `("g" "GTD"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "now"
               ((org-agenda-overriding-header "\nnow\n")))
    (tags-todo "wip"
               ((org-agenda-overriding-header "\nwip\n")))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto process\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "inbox.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\ndaily inbox\n")
           (org-agenda-files qz/agenda-daily-files)))
    (todo "TODO"
          ((org-agenda-overriding-header "\nemails\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emails.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\none-off Tasks\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "next.org")))))
    (todo "TODO"
          ((org-agenda-overriding-header "\nto yak shave\n")
           (org-agenda-files '(,(format "%s/%s" org-roam-directory "emacs.org"))))))))
#+end_src

#+RESULTS:
| g | GTD | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo now ((org-agenda-overriding-header |

#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("c" "create"
   ((agenda "" ((org-agenda-span 'day) (org-deadline-warning-days 60)))
    (tags-todo "diy+create+do+buy+make+wip"
               ((org-agenda-overriding-header "wip")))
    (tags-todo "diy+create+do"
               ((org-agenda-overriding-header "create")))
    (tags-todo "buy"
               ((org-agenda-overriding-header "buy")))
    (tags-todo "make"
               ((org-agenda-overriding-header "make"))))))
#+end_src

#+RESULTS:
|  | Overview | ((agenda  ((org-agenda-time-grid nil) (org-agenda-start-on-weekday nil) (org-agenda-start-day +1d) (org-agenda-span 14) (org-agenda-show-all-dates nil) (org-agenda-time-grid nil) (org-deadline-warning-days 0) (org-agenda-block-separator nil) (org-agenda-entry-types '(:deadline)) (org-agenda-skip-function '(org-agenda-skip-entry-if 'done)) (org-agenda-overriding-header |

***** w ; work
:PROPERTIES:
:ID:       02a112d7-ef32-44d3-b06b-cde3d0df4038
:CREATED:  [2022-03-31 Thu 09:41]
:UPDATED:  [2022-06-27 Mon 10:55]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(add-to-list
 'org-agenda-custom-commands
 `("w" "work"
   ((tags-todo "{work}+wip"
               ((org-agenda-overriding-header "wip")
                (org-tags-match-list-sublevels nil) ;; show subheadings!!!! inherited!!!!
                ;; (org-agenda-hide-tags-regexp
                ;;  (concat org-agenda-hide-tags-regexp "\\|work"))
                ))
    (tags-todo "{work}"
               ((org-agenda-overriding-header "work")))
    )))

;;(pp org-agenda-custom-commands)
#+end_src

#+RESULTS:
| w | work   | ((tags-todo {work}+wip ((org-agenda-overriding-header wip) (org-tags-match-list-sublevels nil))) (tags-todo {work} ((org-agenda-overriding-header work))))                                                                                                                                                                    |
| c | create | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo diy+create+do+buy+make+wip ((org-agenda-overriding-header wip))) (tags-todo diy+create+do ((org-agenda-overriding-header create))) (tags-todo buy ((org-agenda-overriding-header buy))) (tags-todo make ((org-agenda-overriding-header make)))) |
| g | GTD    | ((agenda  ((org-agenda-span 'day) (org-deadline-warning-days 60))) (tags-todo now ((org-agenda-overriding-header                                                                                                                                                                                                              |

#+begin_src emacs-lisp  :results code
;; remove keyed by KEY
(defun qz/filter-agenda-key (key &optional agenda-commands)
  (let ((agenda-commands (or agenda-commands
                             org-agenda-custom-commands)))
    (seq-filter (lambda (a) (not (equal key (car a))))
                org-agenda-custom-commands)))

(setq org-agenda-custom-commands (qz/filter-agenda-key "w"))
#+end_src

#+RESULTS:
#+begin_src emacs-lisp
(("c" "create"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "diy+create+do+buy+make+wip"
              ((org-agenda-overriding-header "wip")))
   (tags-todo "diy+create+do"
              ((org-agenda-overriding-header "create")))
   (tags-todo "buy"
              ((org-agenda-overriding-header "buy")))
   (tags-todo "make"
              ((org-agenda-overriding-header "make")))))
 ("g" "GTD"
  ((agenda ""
           ((org-agenda-span 'day)
            (org-deadline-warning-days 60)))
   (tags-todo "now"
              ((org-agenda-overriding-header "\nnow\n")))
   (tags-todo "wip"
              ((org-agenda-overriding-header "\nwip\n")))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto process\n")
          (org-agenda-files
           '("~/life//roam/inbox.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\ndaily inbox\n")
          (org-agenda-files qz/agenda-daily-files)))
   (todo "TODO"
         ((org-agenda-overriding-header "\nemails\n")
          (org-agenda-files
           '("~/life//roam/emails.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\none-off Tasks\n")
          (org-agenda-files
           '("~/life//roam/next.org"))))
   (todo "TODO"
         ((org-agenda-overriding-header "\nto yak shave\n")
          (org-agenda-files
           '("~/life//roam/emacs.org"))))))
 ("" "Overview"
  ((agenda ""
           ((org-agenda-time-grid nil)
            (org-agenda-start-on-weekday nil)
            (org-agenda-start-day "+1d")
            (org-agenda-span 14)
            (org-agenda-show-all-dates nil)
            (org-agenda-time-grid nil)
            (org-deadline-warning-days 0)
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:deadline))
            (org-agenda-skip-function
             '(org-agenda-skip-entry-if 'done))
            (org-agenda-overriding-header "\nUpcoming deadlines (+14d)\n")))
   (agenda "*"
           ((org-agenda-block-separator nil)
            (org-agenda-span 14)
            (org-agenda-overriding-header "\nAgenda\n")))
   (alltodo ""
            ((org-agenda-block-separator nil)
             (org-agenda-skip-function
              '(or
                (org-agenda-skip-if nil
                                    '(scheduled deadline))))
             (org-agenda-overriding-header "\nBacklog\n")))))
 ("" "Agenda for the day"
  ((agenda ""
           ((org-agenda-span 1)
            (org-agenda-scheduled-leaders
             '("" "Sched.%2dx: "))
            (org-agenda-block-separator nil)
            (org-agenda-entry-types
             '(:scheduled :timestamp :sexp))
            (org-scheduled-past-days 0)
            (org-agenda-day-face-function
             (lambda
               (date)
               'org-agenda-date))
            (org-agenda-format-date "%A %-e %B %Y")
            (org-agenda-overriding-header "\nAgenda for the day\n")))
   (todo "NEXT"
         ((org-agenda-block-separator nil)
          (org-agenda-overriding-header "\nCurrent Tasks\n")))))
 ("n" "Agenda and all TODOs"
  ((agenda "")
   (alltodo ""))))
#+end_src

**** noweb tangler
:PROPERTIES:
:ID:       3719c9a6-45ea-497e-a3ee-bc4c64a566e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-19 Tue 16:20]
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref org

;; NOWEB AGENDA START

(with-eval-after-load 'org-agenda
  (message "AGENDA start")
  <<agenda>>
  )

;; NOWEB AGENDA END

#+end_src

**** settings :var:
:PROPERTIES:
:ID:       359219d7-3d55-44aa-b8f2-c5046125bb29
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** org-agenda-files
:PROPERTIES:
:ID:       0e532fda-1e96-4bc4-84ad-fb4ecc809c5d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(setq qz/org-agenda-files
      (mapcar (lambda (f) (expand-file-name (format "%s/%s" org-roam-directory f)))
              '("calendar-home.org" "calendar-work.org" "schedule.org")))
#+end_src

#+RESULTS:
| /home/samuel/life/roam/calendar-home.org | /home/samuel/life/roam/calendar-work.org | /home/samuel/life/roam/schedule.org |
***** org-agenda-daily-files
:PROPERTIES:
:ID:       77414dfd-4a4c-440a-be63-5241d5e5407c
:CREATED:  [2022-03-16 Wed 08:51]
:UPDATED:  [2022-03-16 Wed 08:51]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(defvar qz/agenda-daily-files nil)
#+end_src
***** org-agenda-hide-tags-regexp
:PROPERTIES:
:ID:       42309c7b-5946-4c86-b2bc-3f1c92e88d21
:CREATED:  [2022-03-31 Thu 10:49]
:UPDATED:  [2022-03-31 Thu 10:49]
:ROAM_EXCLUDE: t
:END:

because a mechanism for the discovery of =TODO= entries is 

#+begin_src emacs-lisp
(setq org-agenda-hide-tags-regexp "project")
#+end_src
**** visual
:PROPERTIES:
:ID:       a9e4cf66-2163-4b4e-a523-53c4a1ff47fc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** category :: agenda format refinement                          :org:
:PROPERTIES:
:ID:       428c5706-9498-44e8-8960-2e893347d737
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 09:52]
:END:
****** org-category ;; agenda 
:PROPERTIES:
:ID:       0dd4254a-f725-4df0-8843-a25e22b4b299
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-04-22 Fri 09:56]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun qz/org-category (&optional len)
  (let* ((len (or len 25)))
    (->>
     (if buffer-file-name
         (file-name-sans-extension (file-name-nondirectory buffer-file-name))
       "")
     (replace-regexp-in-string "private-" "")
     (replace-regexp-in-string
      ;; datetime from file, could do "[0-9]\\{6\\}T[0-9]\\{6\\}Z?-"
      (concat "[0-9][0-9][0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]"
              "T" "[0-9][0-9]" "[0-9][0-9]" "[0-9][0-9]" "Z-")
      "")
     (s-pad-right len " ")
     (s-truncate len))))

;;(qz/org-category)
#+end_src

#+RESULTS:
: qz/org-category

****** org-agenda-prefix-format
:PROPERTIES:
:ID:       9ce2b921-9c56-42b8-aa6a-579972a92a60
:CREATED:  [2022-04-22 Fri 09:56]
:UPDATED:  [2022-06-27 Mon 10:49]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref agenda
(let* ((agenda "  %(qz/org-category)%-12t% s")
       (other "%i%(qz/org-category 12)%l"))
  (setq org-agenda-prefix-format (list (cons 'agenda agenda)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'todo other)
                                       (cons 'search other))))

#+end_src

#+RESULTS:
: ((agenda .   %(qz/org-category)%-12t% s) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (todo . %i%(qz/org-category 12)%l) (search . %i%(qz/org-category 12)%l))

****** vulpea's category refinement
:PROPERTIES:
:ID:       6c717faa-ecc5-41b3-a93e-606fa9170d7a
:CREATED:  [2022-04-22 Fri 09:53]
:UPDATED:  [2022-04-22 Fri 09:53]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(defun vulpea-agenda-category (&optional len)
  "Get category of item at point for agenda.

Category is defined by one of the following items:
- CATEGORY property
- TITLE keyword
- TITLE property
- filename without directory and extension

When LEN is a number, resulting string is padded right with
spaces and then truncated with ... on the right if result is
longer than LEN.

Usage example:

  (setq org-agenda-prefix-format
        '((agenda . \" Emacs Configuration %?-12t %12s\")))

Refer to `org-agenda-prefix-format' for more information."
  (let* ((file-name (when buffer-file-name
                      (file-name-sans-extension
                       (file-name-nondirectory buffer-file-name))))
         (title (qz/node-title))
         (category (org-get-category))
         (result
          (or (if (and title
                       (string-equal category file-name))
                  title
                category)
              "")))
    (if (numberp len)
        (s-truncate len (s-pad-right len " " result))
      result)))
#+end_src

#+RESULTS:
: vulpea-agenda-category
**** etc
:PROPERTIES:
:ID:       d21041e2-b257-4f84-93bd-c43fd895c33b
:CREATED:  [2022-04-21 Thu 15:26]
:UPDATED:  [2022-04-21 Thu 15:26]
:ROAM_EXCLUDE: t
:END:
***** lunar phases
:PROPERTIES:
:ID:       730db291-2c3d-4995-928f-81685991be07
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

- :: https://orgmode.org/worg/org-hacks.html#org92f0a44

****** org-lunar-phases :func:
:PROPERTIES:
:ID:       84219025-9fc0-41c0-b43b-70c5d61aed77
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-14 Thu 15:55]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(org-no-warnings (defvar date))
(defun qz/org-lunar-phases ()
  "Show lunar phase in Agenda buffer."
  (require 'lunar)
  (let* ((phase-list (lunar-phase-list (nth 0 date)
                                       (nth 2 date)))
         (phase (cl-find-if (lambda (phase)
                              (equal (car phase) date))
                            phase-list)))
    (when phase
      (setq ret (concat (lunar-phase-name (nth 2 phase)))))))
#+end_src

#+RESULTS:
: qz/org-lunar-phases

****** lunar-phase-names
:PROPERTIES:
:ID:       f8dbfc55-a12f-4481-909c-aa7e15339931
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-07-09 Sat 17:40]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
;; 🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜
(setq lunar-phase-names
      '("🌚 new moon" ; unicode symbol : 🌑 use full circle as fallback
        "🌛 first quarter moon"
        "🌝 full moon" ; unicode symbol: 🌕 use empty circle as fallback
        "🌜 last quarter moon"))
#+end_src

#+RESULTS:
| 🌚 new moon | 🌛 first quarter moon | 🌝 full moon | 🌜 last quarter moon |

***** sunrise + set
:PROPERTIES:
:ID:       8bcfd1c5-2002-4e81-90fe-39a98ff678b1
:CREATED:  [2022-04-14 Thu 15:55]
:UPDATED:  [2022-04-21 Thu 15:36]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref agenda
(setq calendar-latitude 52.5)  ; imprecise
(setq calendar-longitude 13.4)
(setq calendar-location-name "berlin")

(autoload 'solar-sunrise-sunset "solar.el")
(autoload 'solar-time-string "solar.el")
(defun qz/diary-sunrise ()
  "Local time of sunrise as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (car l)
      (concat
       (if (string= entry "")
           "🌄 sunrise"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caar l) nil)))))

(defun qz/diary-sunset ()
  "Local time of sunset as a diary entry.
The diary entry can contain `%s' which will be replaced with
`calendar-location-name'."
  (let ((l (solar-sunrise-sunset date)))
    (when (cadr l)
      (concat
       (if (string= entry "")
           "🌅 sunset"
         (format entry (eval calendar-location-name))) " "
       (solar-time-string (caadr l) nil)))))
#+end_src

#+RESULTS:
: qz/diary-sunset

*** [[id:0213945d-cba5-4dd0-812c-9c01d6f51148][babel]]
:PROPERTIES:
:ID:       5bfb32fe-c5fb-46cb-a5ed-fe819d17949e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** async
:PROPERTIES:
:ID:       9ae0cd25-0fd9-4c5e-a5af-d5ac80b3a425
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- :: [[id:4062856a-e182-4820-bc7b-817a693518a3][emacs-ob-async]]

#+begin_src emacs-lisp :noweb-ref org
(require 'ob-async)
#+end_src

#+RESULTS:
: ob-async

**** src options                                                     :var:
:PROPERTIES:
:ID:       1ea03a77-5511-41cd-bd74-6ff19e750f4b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-confirm-babel-evaluate nil)
(setq org-structure-template-alist
      '(;; yp
        ("d"  . "definition")
        ("ee" . "example")
        ("es" . "src es")
        ("el" . "src emacs-lisp")
        ("q"  . "quote")
        ("sb" . "src shell")
        ("se" . "src emacs-lisp")
        ("sl" . "src scheme")
        ("sp" . "src sql :engine postgres")
        ("sr" . "src R")
        ("ss" . "src")
        ("jp" . "src jupyter-python")
        ("jr" . "src jupyter-R")
        ("r"  . "src restclient")))
#+end_src

#+RESULTS:
: ((d . definition) (ee . example) (es . src es) (el . src emacs-lisp) (q . quote) (sb . src shell) (se . src emacs-lisp) (sl . src scheme) (sp . src sql :engine postgres) (sr . src R) (ss . src) (jp . src jupyter-python) (jr . src jupyter-R) (r . src restclient))

**** do-load-languages
:PROPERTIES:
:ID:       f098ceb7-c98e-4e99-ab07-c8833f5a853b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
fuck the speed my man; {M-x load-library RET ob-} is so annoying
#+begin_src emacs-lisp :noweb-ref org
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (lisp . t)
   ;;(jupyter . t)
   (python . t)
   (jq . t)
   ;;(ipython . t)
   (scheme . t)
   (sql . t)
   ;;(plant-uml . t)
   (shell . t)
   (sqlite . t)
   (elasticsearch . t)
   (restclient . t)
   (R . t)))
#+end_src

#+RESULTS:

**** library of babel
:PROPERTIES:
:ID:       922a7334-bfde-448a-bdf2-809f1b8eeb14
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon
>
***** lob-ingest-files                                         :var:func:
:PROPERTIES:
:ID:       05415208-95bf-4153-b65c-32e10112c582
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-08 Fri 12:08]
:END:
CREATED: <2021-11-29 Mon>


#+begin_src emacs-lisp :noweb-ref roam :colnames '(count file)
(defvar qz/org-babel-lob-ingest-files
  (append (mapcar (lambda (s)
                    (when-let ((n (org-roam-node-from-title-or-alias s)))
                      (org-roam-node-file n)))
                  '("NewStore"
                    "kubernetes"
                    "postgres"
                    "es-mode"
                    "elisp"
                    "plantuml"
                    "GNU Guix"
                    ))
          ;; .. other files
          nil
          ;; ..
          )
  "files from which named `src' blocks should be loaded")

(defun qz/org-babel-do-lob-ingest-files (&optional files)
  (interactive)
  (let ((r (mapcar (lambda (f) (cons (org-babel-lob-ingest f) f))
                   (append qz/org-babel-lob-ingest-files files))))
    (message "%s" (pp r))
    r))

(cons->table
 (qz/org-babel-do-lob-ingest-files))
#+end_src

#+RESULTS:
| count | file                                                   |
|-------+--------------------------------------------------------|
|    71 | /home/samuel/life/roam/20210420T114708Z-newstore.org   |
|    11 | /home/samuel/life/roam/20210813T161035Z-kubernetes.org |
|    18 | /home/samuel/life/roam/20200515T151822Z-postgresql.org |
|     4 | /home/samuel/life/roam/20210813T161035Z-es_mode.org    |
|     2 | /home/samuel/life/roam/20200415T145703Z-emacs_lisp.org |
|     1 | /home/samuel/life/roam/20210505T135556Z-plantuml.org   |
|     1 | /home/samuel/life/roam/20200919T152005Z-gnu_guix.org   |


***** choose babel block                                           :func:
:PROPERTIES:
:ID:       d8ebb517-f247-48a2-af5f-08a3d6c6c3ae
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mo>n

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-choose-block (&optional lob)
  "choose block, insert scaffold for args.

might honestly be better to generate `yas' template when we load
blocks with `qz/org-babel-do-lob-ingest-files', but I've never used
yas so idk

use a prefix arg to shortcut (org-table-get-constant \"bonk\"
"
  (interactive)
  (message "prefix: %s" (list current-prefix-arg prefix-arg lob))
  (let ((lob (or lob
                 (intern (completing-read
                          "lob: " (mapcar 'car org-babel-library-of-babel))))))
    (with-current-buffer (current-buffer)
      (end-of-line)
      (newline)
      (insert (format "#+name: call-%s\n#+call: %s(%s)"
                      lob lob (or (and current-prefix-arg
                                       "(org-table-get-constant \"bonk\")")
                                  "")))

      (when-let
          ((args (remove
                  nil (cl-loop for a in (assoc lob org-babel-library-of-babel)
                               append
                               (when (listp a)
                                 (cl-loop for b in a
                                          collect
                                          (when (eq :var (car b)) (cdr b))))))))
        (message "%s" args)
        (insert (format "(%s)" (s-join ", " args)))))))

;;(qz/org-babel-choose-block 'newstore-get-order-by-type)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

***** goto babel block
:PROPERTIES:
:ID:       899ee4ec-7b38-4cc7-9435-9015b7adf618
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-get-named-src-block-body (name)
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pt)
        (org-babel-expand-src-block)))))

;;(apply 'format "hey %s %s %s" (list 1 2 4))

(defun qz/named (name &rest args)
  "shorthand wrapper of `qz/lob-get-named-src-block-body', for clearer header args"
  (apply 'format (qz/lob-get-named-src-block-body name) args))

(defun qz/lob-get-named-src-block (name)
  (message "checking name: %s" name)
  (cl-block named    ; thank u cltl, thank u 1980s, thank u guy steele
    (save-excursion  ; check current-buffer
      (when (not (org-babel-goto-named-src-block name))
        (cl-return-from named (cons (buffer-file-name) (point)))))
    (mapcar (lambda (f)
              (with-current-buffer (find-file-noselect f)
                (save-excursion
                  ;; it's odd that nil means "i found it"
                  (when (not (org-babel-goto-named-src-block name))
                    (cl-return-from named (cons f (point)))))))
            (remove nil qz/org-babel-lob-ingest-files))))

(defun qz/lob-goto-named-src-block (name)
  (interactive
   (list
    (completing-read "lob: " (mapcar 'car org-babel-library-of-babel))))
  (cl-destructuring-bind
      (file . pt) (qz/lob-get-named-src-block name)
    (find-file file)
    (goto-char pt)))
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

****** restclient-copy-as-curl + org-babel
:PROPERTIES:
:ID:       b35f66b8-f8d5-404c-9305-ca6c74d24b73
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
we use LOB blocks as

,#+name: call-my-block-name
,#+call: my-block-name(arg="value")

so with the point on =my-block-name=, of the =call= we can invoke:
- {M-x qz/lob-restclient-copy-curl-command}
... to copy the corresponding block reference's restclient definition

to improve:
- format in the call arguments before copying
  - this might be achieved by using =org-element-babel-call-parser= to
    get the components of the call, if no other /interim state/ of the
    called block exists
  - ideally this can be general enough, so as to use the
    =variable-format= type specified by the babel backend's =:var= header
    arg. idk how or where this is though -- reference the list parsing
    in ob-restclient[fn:2] -- literally just smashing it in at the top



#+begin_src emacs-lisp :noweb-ref org
(defun qz/lob-restclient-copy-curl-command (&optional name)
  "this one was a struggle"
  (interactive)
  (when-let ((name (or name (thing-at-point 'symbol))))
    (cl-destructuring-bind
        (file . pt) (qz/lob-get-named-src-block name)
      (save-excursion
        (with-current-buffer (find-file-noselect file)
          (goto-char pt)
          (next-line)
          (let ((expanded (org-babel-expand-src-block)))
            (message "expanded: %s" expanded)
            (with-temp-buffer ;;(get-buffer-create "*restclient*") ;;TODO replace w temp
              (restclient-mode)
              (insert expanded)
              (goto-char (point-min))
              (restclient-jump-next)
              (restclient-copy-curl-command))))))))
#+end_src

#+RESULTS:
: qz/lob-restclient-copy-curl-command

***** {M-l} bind lob-choose-babel-block to insert convention        :kbd:
:PROPERTIES:
:ID:       7f29a561-60a0-4c5e-9004-ba32910ab0ef
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon>

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block

***** {M-g} bind lob-goto-named-src-block to insert convention      :kbd:
:PROPERTIES:
:ID:       fb0c5f97-b758-43fe-85a0-a2fb2514df84
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-11-29 Mon>

#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-l") 'qz/org-babel-choose-block)
#+end_src

#+RESULTS:
: qz/org-babel-choose-block
#+begin_src emacs-lisp :noweb-ref org
(define-key org-babel-map (kbd "M-g") 'qz/lob-goto-named-src-block)
#+end_src

#+RESULTS:
: qz/lob-goto-named-src-block

**** helpers
:PROPERTIES:
:ID:       22e5c99c-afed-4be2-9cd1-296172ca0e09
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** make-table-constants                                     :func:kbd:
:PROPERTIES:
:ID:       3c5750a5-620d-4b44-9a38-fd0fb218b584
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-12 Tue 16:35]
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel-make-table-constants ()
  "exec from the top of a tree"
  (interactive)
  (let* ((hi-lock-auto-select-face t)
         (write-constants (equal '(4) current-prefix-arg))
         ;; above is 100x better when you patch `hi-lock-face-symbol-at-point'
         ;; with `(or (and hi-lock-auto-select-face (hi-lock-read-face-name)) 'hi-yellow)'
         (col '()))
    (save-mark-and-excursion
      (org-map-tree
       (lambda ()
         (when-let* ((s (org-get-heading))
                     (s (org-no-properties s))
                     (i (string-match "::" s))
                     (k (substring s 0 (- i 1)))
                     (v (substring s (+ 3 i))))
           (message "key: %s" k)
           (message "value: %s" v)
           (setq col (cons (format "%s=%s" k v) col))
           (funcall-interactively 'highlight-phrase v)
           (message "applied highlight for '%s'" v)
           )))
      (when write-constants
        (org-back-to-heading)
        (next-line)
        (newline)
        (previous-line)
        (insert (format "#+constants: %s" (s-join " " (reverse col))))))
    (message "col: %s" col)
    col))

(define-key org-babel-map (kbd "M-d") 'qz/org-babel-make-table-constants)
#+end_src

#+RESULTS:
: qz/org-babel-make-table-constants
***** ob-shell->terminal
:PROPERTIES:
:ID:       3ed48629-8f96-4dfe-9cc8-894cfb2920c0
:CREATED:  [2022-06-21 Tue 23:58]
:UPDATED:  [2022-06-21 Tue 23:58]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/to-shell (command)
  (interactive) ;; TODO how to interactive bind to `command'??
  (with-current-buffer (vterm "*to-shell*")
    (mapc
     (lambda (c)
       (message c)
       (vterm-send-string c)
       (vterm-send-return))
     (qz/ensure-list command))))

(defun qz/current-src-block ()
  (interactive)
  (s-split
   "[\n]"
   (kill-new (nth 6 (car ;; lspec
                     (cdr (car
                           (save-excursion
                             (when-let ((head (org-babel-where-is-src-block-head)))
                               (goto-char head))
                             (org-babel-tangle-single-block 1 t)))))))))

(defun qz/shell-current-src-block ()
  (interactive)
  (when-let ((command (qz/current-src-block)))
    (qz/to-shell command)))

(define-key org-babel-map (kbd "C-<return>") #'qz/shell-current-src-block)
#+end_src

***** list->rows                                                   :func:
:PROPERTIES:
:ID:       5e08ae52-4e0f-40b7-9595-f3c325390959
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-babel--list->rows (name lst)
  (cons (list name)
        (cons 'hline (mapcar 'list lst))))
#+end_src

#+RESULTS:
: qz/org-babel--list->rows

***** patching
:PROPERTIES:
:ID:       71c9cef1-f758-4691-a223-446dc82705fd
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-29 Fri 12:08]
:END:

#+begin_src emacs-lisp :tangle no
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
Uses the next face from `hi-lock-face-defaults' without prompting,
unless you use a prefix argument.
Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

If REGEXP contains upper case characters (excluding those preceded by `\\')
and `search-upper-case' is non-nil, the matching is case-sensitive.

This uses Font lock mode if it is enabled; otherwise it uses overlays,
in which case the highlighting will not update as you type.  The Font
Lock mode is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face
                            (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))

(defun hi-lock-face-phrase-buffer (regexp &optional face)
  "Set face of each match of phrase REGEXP to FACE.
Interactively, prompt for REGEXP using `read-regexp', then FACE.
Use the global history list for FACE.

If REGEXP contains upper case characters (excluding those preceded by `\\')
and `search-upper-case' is non-nil, the matching is case-sensitive.
Also set `search-spaces-regexp' to the value of `search-whitespace-regexp'.

Use Font lock mode, if enabled, to highlight REGEXP.  Otherwise,
use overlays for highlighting.  If overlays are used, the
highlighting will not update as you type.  The Font Lock mode
is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive
   (list
    (hi-lock-regexp-okay
     (read-regexp "Phrase to highlight" 'regexp-history-last))
    (hi-lock-read-face-name)))
  (or (facep face)
      (setq face (or (and hi-lock-auto-select-face
                          (hi-lock-read-face-name))
                     'hi-yellow)))
  (unless hi-lock-mode (hi-lock-mode 1))
  (hi-lock-set-pattern
   regexp face nil nil
   (if (and case-fold-search search-upper-case)
       (isearch-no-upper-case-p regexp t)
     case-fold-search)
   search-whitespace-regexp))
#+end_src

#+RESULTS:
: hi-lock-face-phrase-buffer

*** capture
:PROPERTIES:
:ID:       609ab395-5ce2-4878-8bda-70dfe0182c78
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** helpers                                                        :func:
:PROPERTIES:
:ID:       d5f2db01-4894-4e0b-90d2-e9123b87f5de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-inbox-capture ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "i"))
#+end_src

**** templates
:PROPERTIES:
:ID:       26499611-33f9-46a4-b46d-f6fe004a6620
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-24 Thu 10:20]
:END:
these are regular [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] capture templates, but we will defer to
org-roam loading, as we use it's variables.
- :: 'org-roam-directory
- :: 'org-roam-dailies-directory

#+begin_src emacs-lisp :noweb yes :noweb-ref roam
;; [[file:~/.doom.d/config.org::*templates][templates]]
(setq org-capture-templates
      `(("i" "inbox" entry
         (file ,(concat org-agenda-directory "/inbox.org"))
         "* TODO %? \n\n - from :: %a")
        ;; spanish language capturing
        ("v" "vocab; spanish" entry
         (file+headline ,(concat org-roam-directory "/spanish_language.org") "vocab, phrases")
         ,(s-join "\n" '("** \"%?\" :es:"
                         "- from :: %a" ""
                         "*** :en:" "")))
        ;; capture link to live `org-roam' thing
        ("n" "now, as in NOW" entry (file ,(concat org-agenda-directory "/wip.org"))
         ,(s-join "\n" '("* TODO [#A1] %? "
                         "DEADLINE: %T"
                         "CREATED: %u")))
        ;; fire directly into inbox
        ("c" "org-protocol-capture" entry (file ,(concat org-agenda-directory "/inbox.org"))
         ,(s-join "\n" '("* TODO [[%:link][%:description]]" ""
                         "#+begin_quote" ""
                         "%i"
                         "#+end_quote"))
         :immediate-finish t)
        ;; push last captured item into inbox
        ("l" "last-capture" entry (file ,(concat org-agenda-directory "/inbox.org"))
         (function qz/inbox-last-captured)
         :immediate-finish t)
        ("I" "current-roam" entry (file ,(concat org-agenda-directory "/inbox.org"))
         (function qz/current-roam-link)
         :immediate-finish t)
        ("w" "weekly review" entry
         (file+datetree ,(concat org-agenda-directory "/reviews.org"))
         (file ,(concat org-agenda-directory "/templates/weekly_review.org")))))




;; [[file:~/.doom.d/config.org::*capture templates][roam capture templates]]

#+end_src

#+RESULTS:
| i | inbox | entry | (file ~/life//roam/inbox.org) | * TODO %? |

*** noweb tangler                                                    :meta:
:PROPERTIES:
:ID:       ded3219a-de09-4bee-a919-bf79debb9022
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
;; NOWEB ORG START
(message "pre org: %s" (shell-command-to-string "date"))
(with-eval-after-load 'org
  (message "mid org: %s" (shell-command-to-string "date"))
  <<org>>
  )
(message "post org: %s" (shell-command-to-string "date"))
;; NOWEB ORG END
#+end_src

*** [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][roam]]
:PROPERTIES:
:ID:       c2c9a0bc-98e8-4053-82e2-88e91f1531f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** create node :: ensure id, and non-exclusion
:PROPERTIES:
:ID:       38d5adfe-f060-4d06-af94-eba7fbe74621
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/create-node ()
  "assumes point is at the desired headline"
  (interactive)
  (org-id-get-create)
  (org-delete-property "ROAM_EXCLUDE"))

(defun qz/exclude-node ()
  "assumes point is at the desired headline -- unlikely to work for files"
  (org-set-property "ROAM_EXCLUDE" "t"))

(define-key org-mode-map (kbd "C-c C-x i") 'qz/create-node)
(define-key org-mode-map (kbd "C-c C-x i") 'qz/create-node)
#+end_src

#+RESULTS:
: qz/create-node

**** capture
:PROPERTIES:
:ID:       cdc7fe5d-e44e-45a2-af7d-c2f5bce5d8fa
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** helpers                                                      :func:
:PROPERTIES:
:ID:       cbb71c7a-93f0-48b9-b262-781128398302
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** capture current, todo
:PROPERTIES:
:ID:       dd40d2ba-097a-49bf-9992-47f4af9b7bd1
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-capture-current ()
  (interactive)
  "Capture a task in agenda mode."
  (org-capture nil "I"))

(defun qz/roam-capture-todo ()
  (interactive)
  "Capture a task in agenda mode."
  (cl-destructuring-bind (thing region)
      (qz/thing-at-point-or-region-and-region)
    (org-roam-capture- :goto t
                       :keys "n"
                       :node (org-roam-node-create :title thing)
                       :props `(:immediate-finish t :jump-to-captured nil
                                                  :region ,region     :insert-at ,(point-marker)
                                                  :finalize 'insert-link))
    (qz/capture-last-captured)))
#+end_src
****** utc timestamp
:PROPERTIES:
:ID:       50e60437-87cf-487f-aca3-850a76b02fdc
:CREATED:  <2022-03-03 Thu 12:31>
:UPDATED:  <2022-03-03 Thu 12:31>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/utc-timestamp ()
  (format-time-string "%Y%m%dT%H%M%SZ" (current-time) t))
#+end_src

***** templates                                                     :var:
:PROPERTIES:
:ID:       5a0c855e-f0ed-4dee-bf03-b7dfec2f023b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-14 Mon 10:53]
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref roam
(setq qz/org-roam-capture-head "#+title: ${title}\n")
(setq qz/capture-title-timestamp-roam "%(qz/utc-timestamp)-${slug}.org")

(setq org-roam-capture-templates
      `(("d" "default" plain "%?" 
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :unnarrowed t)
        ("n" "empty" plain "%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            ,qz/org-roam-capture-head)
         :immediate-finish t)
        ))
#+end_src

#+RESULTS:
| d | default | plain | %? | :if-new | (file+head %(qz/utc-timestamp)-${slug}.org #+title: ${title} |

**** dailies
:PROPERTIES:
:ID:       a82c9727-9f53-48f2-b7b8-7c981feeebc2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** capture                                                       :var:
:PROPERTIES:
:ID:       6a756610-847e-410f-a79b-baa70b74e029
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** templates
:PROPERTIES:
:ID:       46fed150-b670-4899-aaa2-b029262db572
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-05-13 Fri 15:37]
:END:

#+begin_src emacs-lisp :noweb-ref roam
(setq org-roam-dailies-capture-templates
      `(("d" "default" entry
         ,(s-join "\n" '("* [%<%H:%M>] %?"
                         ;;"CREATED: <%<%Y-%m-%d %H:%M>>"
                         "- from :: %a"))
         :if-new (file+head+olp
                  ,qz/org-roam-dailies-filespec
                  ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
                                  "#+filetags: daily private project" "" ""
                                  "%(qz/today-dateref)" "" ""
                                  "* today, I will"))
                  ("journal")))))

(setq qz/org-roam-dailies-capture-templates--tangent
      '("d" "default" entry
        ,(s-join "\n" '("* TANGENT [%<%H:%M>] %?"
                        ;;"CREATED: <%<%Y-%m-%d %H:%M>>"
                        "- from :: %a"))
        :if-new (file+head+olp
                 ,qz/org-roam-dailies-filespec
                 ,(s-join "\n" '("#+title: <%<%Y-%m-%d>>"
                                 "#+filetags: daily private project" ""
                                 "%(qz/today-dateref)" ""
                                 "* today, I will"
                                 "* journal"
                                 "* tangent"))
                 ("tangent"))))
#+end_src

#+RESULTS:
| d | default | entry | (, (s-join |

****** helpers
:PROPERTIES:
:ID:       3c0c901e-65d7-4269-af39-da71d60997fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* today's date reference as roam links             :project:func:
:PROPERTIES:
:ID:       24cca9c1-2a89-4de2-b840-5d2adb9180931
:END:

this is just a nice reference spec to include in the daily notes.

I've used explicit lookups for day/month here, because it's quicker to =assoc= a
small list than to hit the cache (=>2k=) or hit the database a bunch.

=year= is left as a call to =(org-roam-node-from-title-or-alias "2021")= as years
are less discrete; I haven't made all possible years, and it's infrequent to
make a new year in this case.

******** day-lookup                                              :var:
:PROPERTIES:
:ID:       cc4d4945-4083-40d4-9b62-8c337112be2e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
;;; day lookup
(defvar qz/day-lookup
  '((Mon . "[[id:d5ad0bac-e82b-43d0-960f-26eeb1daf91b][Monday]]")
    (Tue . "[[id:cb662cc6-bde2-4f9c-b3fa-62346c6df27a][Tuesday]]")
    (Wed . "[[id:411a8e5a-8d89-4886-b2ea-047a3970710a][Wednesday]]")
    (Thu . "[[id:659b9931-ae09-422b-8e91-1bf4cc58e94c][Thursday]]")
    (Fri . "[[id:b3255cd1-db37-4e07-99cf-5e60d52a2579][Friday]]")
    (Sat . "[[id:b63897c3-30cc-42eb-83b5-c8e372e5af9a][Saturday]]")
    (Sun . "[[id:2e28574b-4793-4c05-b83d-e36e9a77515b][Sunday]]"))
  "an index; get days from abbrev (assoc 'Mon qz/day-lookup)")
#+end_src

#+RESULTS:
: qz/day-lookup

******** month-lookup                                            :var:
:PROPERTIES:
:ID:       c9f144b9-f170-4193-898f-a7d73c514ee3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defvar qz/month-lookup
  '("[[id:b92355d7-110e-467c-b7a7-d02b2043af3f][January]]"
    "[[id:7e0af966-8d3e-4e88-b53f-d074902e175a][February]]"
    "[[id:f41751f8-a2a9-4b38-ba03-2ceec2fae4cc][March]]"
    "[[id:ae0ae458-2216-4178-8073-4a26f23747d9][April]]"
    "[[id:6a680100-e842-4257-819f-8cf6cbedddbc][May]]"
    "[[id:f811621c-1b37-43f7-9d01-52bdf9f27637][June]]"
    "[[id:a4d5c8fe-3910-4483-b59e-ce50cd6699a7][July]]"
    "[[id:94e9b0a7-6cd0-4104-821e-613876fe76e3][August]]"
    "[[id:f9ad8160-cae5-4195-a85f-0160710ce8dd][September]]"
    "[[id:da9f0d53-e3f7-4f72-bc1a-d060bc2d1745][October]]"
    "[[id:a4e3a97a-dac9-4bc6-a5e9-5949f707a6de][November]]"
    "[[id:f874ca1a-0d3f-4840-8340-511ed0ac286f][December]]")
  "an index; get days from abbrev (nth 0 qz/month-lookup)")
#+end_src

#+RESULTS:
: qz/month-lookup

******** today-dateref                                          :func:
:PROPERTIES:
:ID:       6b0faf7e-37a2-4112-b02f-1c5f74ae48de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-dateref (&optional time)
  (cl-destructuring-bind (day nday month year)
      (split-string
       (format-time-string "%a:%d:%m:%Y" (or nil (current-time))) ":")
    (format "%s %s %s, %s"
            (cdr (assoc (intern day) qz/day-lookup))
            nday
            (nth (- (string-to-number month) 1) qz/month-lookup)
            (or (if-let ((node (org-roam-node-from-title-or-alias year)))
                    (org-link-make-string
                     (concat "id:" (org-roam-node-id node))
                     (org-roam-node-title node)))
                year))))
#+end_src
******* daily-tangent-capture[fn:1]                              :func:
:PROPERTIES:
:ID:       8d1c9152-3401-4414-a446-b8389523e5d4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
so we can use it as a COMMAND. better traceability than a lambda
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-daily-tangent-capture ()
  (interactive)
  "Capture the inevitable tangent"
  (org-capture nil "t"))
#+end_src

#+RESULTS:
: qz/org-daily-tangent-capture
******* today-as-dailies-file
:PROPERTIES:
:ID:       82ad41ee-9e11-46c9-893e-7b196ea4ce5c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/today-as-daily-file ()
  (format-time-string "private-%Y-%m-%d.org"))
#+end_src

***** dailies-filespec                                              :var:
:PROPERTIES:
:ID:       b1f6f66c-c613-4c68-8c0d-4bc95da8d1cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam-hoist
(setq qz/org-roam-dailies-filespec "private-%<%Y-%m-%d>.org")
#+end_src

#+RESULTS:
: private-%<%Y-%m-%d>.org

**** helpers
:PROPERTIES:
:ID:       dc267fb6-e7bd-43e8-8259-a01fabefc5b9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** current-roam-link
:PROPERTIES:
:ID:       506b53c2-b95d-42dd-8876-92d03ad8714d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-03-03 Thu 13:49>
:END:
#+begin_src emacs-lisp :noweb-ref roam
;; [[file:~/.doom.d/config.org::*capture convenience functions][capture convenience functions]]
(defun qz/current-roam-link ()
  "Get link to org-roam file with title"
  (interactive)
  
  (concat "* TODO "
          (let ((n (qz/org-roam-node-at-point)))
            (org-link-make-string
             (concat "id:" (org-roam-node-id n))
             (org-roam-node-title n)))))
#+end_src

****** TODO rename this to ~qz/roam-current-node-as-link~
:PROPERTIES:
:ID:       0d8d4cc4-e9fb-47f7-890d-a245424b37c1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** node-tags :func:
:PROPERTIES:
:ID:       9c5dcf12-9eec-4900-af35-f9302cd86975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-tags (&optional node)
  (or (and node (org-roam-node-tags node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (split-string-and-unquote (or (cadr (car (org-collect-keywords '("filetags")))) ""))
          (org-get-tags)))))

#+end_src

#+RESULTS:
: qz/node-tags

***** node-title
:PROPERTIES:
:ID:       32772be5-0c73-4fff-ba5d-2f33e351b974
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/node-title (&optional node limit)
  (or (and node (org-roam-node-title node))
      (save-excursion
        (goto-char (org-roam-node-point (org-roam-node-at-point 'assert)))
        (if (= (org-outline-level) 0)
            (cadr (car (org-collect-keywords '("title"))))
          (substring-no-properties (org-get-heading t t t))))))
#+end_src

#+RESULTS:
: qz/node-title

***** title->roam-id
:PROPERTIES:
:ID:       a38a5df2-81dd-43ea-ac8a-f5f4b0036d37
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title->roam-id (title)
  (org-roam-node-id (org-roam-node-from-title-or-alias title)))
#+end_src

#+RESULTS:
: qz/title->roam-id

***** ensure-tag
:PROPERTIES:
:ID:       f5a8bd2b-121a-4ee3-a99f-5d0454377e23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/ensure-tag (tagstring tag)
  "Apply `org-roam-tag-add' for `tag' to `(OR node@pt NODE)'"
  (let ((ltag (-flatten (or (and (listp tag) tag)
                            (list tag)))))
    (message "ensuring tag for %s" ltag)
    (org-roam-tag-add ltag)))
#+end_src

#+RESULTS:
: qz/ensure-tag

***** ensure-alias
:PROPERTIES:
:ID:       43ded7a8-abd0-4835-9aa7-aaf4b235762a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/ensure-alias (alias &optional node)
  (let ((node (or node  (org-roam-node-at-point 'assert))))
    (save-excursion
      (with-current-buffer (find-file-noselect (org-roam-node-file node))
        (goto-char (org-roam-node-point node))
        (org-roam-alias-add alias)))))
#+end_src

#+RESULTS:
: qz/ensure-alias

**** TODO noweb tangler                                                :meta:
:PROPERTIES:
:ID:       2bb19766-f330-4c47-9a61-93445e72ef38
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref org
(with-eval-after-load 'org-roam
  ;; NOWEB ROAM START
  (message "roam start")
  <<roam-hoist>>

  <<roam>>
  ;; NOWEB ROAM END
  )
#+end_src

**** hooks
:PROPERTIES:
:ID:       6b268794-f120-4f0e-b0d6-c6badb3c6f55
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-02-27 Sun 14:52>
:END:

***** make metadata on node created/updated
:PROPERTIES:
:ID:       5aa025eb-cc43-4866-9401-bd043ecf971b
:CREATED:  [2021-12-12 Sun 22:34]
:UPDATED:  [2022-03-10 Thu 18:48]
:END:

- :: [[id:6ae36e2f-ab6d-45bc-9448-8dce233c8528][data-driven automatic actions in org roam]]

lifted from [[id:c6c1e44f-bb16-459b-9ba3-2d4657649816][Proposal for timestamping notes at time of capture (V2) ·
Issue #1485 · org-roam/org-roam]].

it is beneficial to attach to 'org-id-get-create as =:after= advice too,
as this is my current mechanism for making a [[id:5d31286f-eef2-490a-8d44-0cded26c6475][node]] from a headline.

#+begin_src emacs-lisp :noweb-ref roam

(defun qz/org-roam--insert-timestamp (&rest args)
  (when (not (org-entry-get nil "CREATED"))
    (org-entry-put nil "CREATED" (format-time-string "[%Y-%m-%d %a %H:%M]")))
  (qz/org-roam--updated-timestamp))

(defun qz/org-roam--updated-timestamp (&rest args)
  "on the current-heading, and current-node"
  (interactive)
  (mapcar (lambda (pt)
            (when pt
              (org-entry-put
               pt "UPDATED"
               (format-time-string "[%Y-%m-%d %a %H:%M]"))))
          (list (and (org-roam-node-at-point)
                     (org-roam-node-point (org-roam-node-at-point)))
                (save-excursion
                  (org-back-to-heading-or-point-min)
                  (point)))))

(add-hook 'org-roam-capture-new-node-hook 'qz/org-roam--insert-timestamp)
(add-hook 'org-mode-hook (lambda ()
                           (add-hook 'before-save-hook
                                     'qz/org-roam--updated-timestamp nil t)))
(qz/advice- org-id-get-create :after qz/org-roam--insert-timestamp)
#+end_src

#+RESULTS:
| qz/advice-enable--org-id-get-create--qz/org-roam--insert-timestamp | qz/advice-disable--org-id-get-create--qz/org-roam--insert-timestamp |
***** auto-tagging
:PROPERTIES:
:ID:       bac18b83-9a07-4c4b-ac68-82a4ba1b480c
:CREATED:  [2022-02-22 Tue 15:27]
:UPDATED:  [2022-04-22 Fri 12:06]
:ROAM_EXCLUDE: t
:END:

****** test
:PROPERTIES:
:ID:       6301a181-545d-4d78-838b-b8b6849481a9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:07]
:END:
******* predicate
:PROPERTIES:
:ID:       030fee83-cc3b-4bea-8e90-1183553ecdff
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** should-be-private-p; interactive sanity check the current file for privacy
:PROPERTIES:
:ID:       5b753b66-4804-41b8-9ebd-068445b66e4f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/should-be-private-p (file)
  (with-current-buffer (or (find-buffer-visiting file)
                           (find-file-noselect file))
    (qz/is-private-p)))

(defun qz/is-file-private ()
  (interactive)
  (message (concat "should " (f-this-file) " be private..? "
                   (or (and (qz/should-be-private-p (f-this-file)) "yes") "no"))))
#+end_src

#+RESULTS:
: qz/is-file-private

****** helpers
:PROPERTIES:
:ID:       7658fa6d-a033-4e97-8fb1-19c6ccb09fbd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* plumbing
:PROPERTIES:
:ID:       80941280-8587-4a9b-84c4-d9af3892e7a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** refresh filetags cache
:PROPERTIES:
:ID:       755ba202-4a54-4d18-a196-56fd80e9ce83
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
addressing caching & consistency problems with :PROPERTIES: drawer and #+properties

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/hard-refresh-org-tags-in-buffer ()
  (interactive)
  (setq org-file-tags nil)      ; blast the cache
  (org-set-regexps-and-options) ; regen property detection regexp
  (org-get-tags))               ; write to cache
#+end_src
******* transformations
:PROPERTIES:
:ID:       6b3ffc25-dc8f-4bcb-9571-1169bbb57f20
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** title-to-tag
:PROPERTIES:
:ID:       b1a87e36-cb29-410c-a8af-9ef422a702de
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/title-to-tag (title &optional capitalize?)
  "Convert TITLE to tag."
  (if (equal "@" (cl-subseq title 0 1))
      title
    (concat "@" (s-replace " " ""
                           (or (and capitalize?
                                    (capitalize title))
                               title)))))
#+end_src

#+RESULTS:
: qz/title-to-tag
******* data
:PROPERTIES:
:ID:       66045845-0060-470d-9d0e-77c6afac1461
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** get-file-by-tag; add multi AND/OR
:PROPERTIES:
:ID:       ddbd6abb-43d8-4178-87ad-e1a43cfebaa7
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/org-roam-node-from-tag (tag)
  (seq-map
   'car
   (org-roam-db-query
    [:select :distinct file
             :from tags
             :inner :join nodes
             :on (= tags:node_id nodes:id)
             :where (= tags:tag tag)])))
#+end_src

#+RESULTS:
: qz/org-roam-node-from-tag

********* test
:PROPERTIES:
:ID:       6a2330ff-8636-4eb8-8af9-7fe43c2ae1c9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-31 Thu 11:44]
:END:

#+begin_src emacs-lisp :tangle no
(let ((s (qz/org-roam-node-from-tag "project")))
  (list (length s)
        (car s)))
#+end_src

#+RESULTS:
| 563 | /home/samuel/life/roam/20200706T122138Z-meeting_epic_cleanup.org |
******* predicates
:PROPERTIES:
:ID:       c168d9bc-6095-46e3-94c9-a4b9e1bc6ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** content-based
:PROPERTIES:
:ID:       015dff9b-6d3b-4086-b187-c2da15c23c57
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
from filepath, or structural properties of the file

********* note-buffer-p
:PROPERTIES:
:ID:       9f3f1779-400b-48df-9af0-4af4777ebfdb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/note-buffer-p (&optional node &rest _)
  "Return non-nil if the currently visited buffer is a note."
  (interactive)
  (or (org-roam-node-p node)
      (and buffer-file-name (org-roam-file-p buffer-file-name))))
#+end_src

#+RESULTS:
: qz/note-buffer-p

********* is-private-p
:PROPERTIES:
:ID:       59ebb422-7c9a-4a33-aa8d-d52b8d718f9e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/is-private-p (&optional node &rest _)
  (interactive)
  (let ((title (qz/node-title node)))
    (if (not title)
        (and (message "unable to evaluate privateness; no title") nil) ; return false (not private)
      (or (string-match-p qz/daily-title-regexp title) ; daily
          (string-match-p "meeting" title)             ; concerns a meeting
          (qz/has-link-to-p
           (list (qz/title->roam-id "thinkproject")
                 (qz/title->roam-id "NewStore")))))))   ; concerns work
#+end_src

#+RESULTS:
: qz/is-private-p

********* is-daily-p
:PROPERTIES:
:ID:       d3e4a57e-bf2b-4ef5-b99f-bbb407809a48
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-daily-p (&optional node &rest _)
  (if-let ((title (qz/node-title node)))
      (string-match-p qz/daily-title-regexp title)))
#+end_src

#+RESULTS:
: qz/is-daily-p

********* is-project-p
:PROPERTIES:
:ID:       a08ff855-c475-4718-a2e4-f11ce12f1b4c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp
(defun qz/is-project-p (&optional node &rest _)
  (or (qz/file-has-todo-p node _)
      (qz/is-daily-p node _)))
#+end_src

#+RESULTS:
: qz/is-project-p
********* is-person-p
:PROPERTIES:
:ID:       883f7cfa-f698-4b1f-92ba-32b41b8db3da
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/is-person-p (&optional node &rest _)
  (qz/has-link-to-p (qz/title->roam-id "person")
                    (and node (org-roam-node-p node)
                         (org-roam-node-id node)))
#+end_src

#+RESULTS:
: qz/is-person-p

********* file-has-todo-p
:PROPERTIES:
:ID:       53530907-3b29-401c-a25d-f647d10fa98f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/file-has-todo-p (&optional node &rest _)
  "Return non-nil if current buffer has any todo entry.

TODO entries marked as done are ignored, meaning the this
function returns nil if current buffer contains only completed
tasks.

(1) parse the buffer using org-element-parse-buffer. It
  returns an abstract syntax tree of the current Org buffer. But
  since we care only about headings, we ask it to return only them
  by passing a GRANULARITY parameter - 'headline. This makes
  things faster.

(2) Then we extract information about TODO keyword from
  headline AST, which contains a property we are interested in -
  :todo-type, which returns the type of TODO keyword according to
  org-todo-keywords - 'done, 'todo or nil (when keyword is not
  present).

(3) Now all we have to do is to check if the buffer list contains
  at least one keyword with 'todo type. We could use seq=find on
  the result of org-element-map, but it turns out that it provides
  an optional first-match argument that can be used for our needs."
  (save-excursion
    (with-current-buffer (or (and node (org-roam-node-p node)
                                  (find-file-noselect (org-roam-node-file node)))
                             (current-buffer))
      (org-with-wide-buffer
       (org-element-map                          ; (2)
           (org-element-parse-buffer 'headline) ; (1)
           'headline
         (lambda (h)
           (eq (org-element-property :todo-type h)
               'todo))
         nil 'first-match)))))                     ; (3)

#+end_src

#+RESULTS:
: qz/file-has-todo-p

******** link-based
:PROPERTIES:
:ID:       41b87a22-731f-49c1-bd2d-6c41db00d779
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
********* has-links
:PROPERTIES:
:ID:       25c75e9d-08a4-4dba-8c0d-a187f9802c3e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-links (node)
  "connections exist, for id of `node'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or  (= dest $s1)
                        (= source $s1))]
   node))

(defun qz/node-has-links (node)
  "connections exist, for `node'"
  (qz/has-links (org-roam-node-id node)))
#+end_src

#+RESULTS:
: qz/node-has-links

********* has-link-p
:PROPERTIES:
:ID:       3e6964b3-2f21-435f-8d75-bd2b728cdd6a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/has-link-p (src dst)
  "undirected connection exists, from `src' to `dst'"
  (org-roam-db-query
   [:select [source dest]
            :from links
            :where (or (and (= dest $s1) (= source $s2))
                       (and (= dest $s2) (= source $s1)))]
   src dst))

(defun qz/node-has-link-p (src dst)
  (qz/has-link-p (org-roam-node-id src)
                 (org-roam-node-id dst)))
#+end_src

#+RESULTS:
: qz/node-has-link-p

********* has-link-to-p
:PROPERTIES:
:ID:       0b994d06-666a-4085-baa6-b532599cf063
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref roam
(defun qz/has-link-to-p (dst &optional src)
  "directed connection exists, from `src' to `dst'"
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (org-roam-db-query
       [:select dest
                :from links
                :where (and (= source $s1)
                            (IN dest $v2))]
       src (apply 'vector (qz/ensure-list dst)))))

(defun qz/node-has-link-to-p (dst &optional src)
  (qz/has-link-to-p (org-roam-node-id dst)
                    (and dst (org-roam-node-id dst))))
#+end_src

#+RESULTS:
: qz/node-has-link-to-p

********* has-transitive-link-p
:PROPERTIES:
:ID:       5fcfabfe-ee6a-4151-98f4-7bd9efddf325
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(setq qz/transitive-query "
with recursive cte (id, degree) as (

  select n.id, 0 as degree
  from nodes n
  where n.id = $s1

  union all

  select distinct
    source as id, c.degree + 1 as degree
  from links l
  join cte c on l.dest = c.id
  where degree <= 1 -- therefore, yield 1st degree transitivity

)
select distinct id, degree
from cte
--where cte.id = $s2
--where degree = 2
order by degree desc
")

(defun qz/transitive-links (dst)
  (org-roam-db-query qz/transitive-query dst))

(defun qz/has-transitive-link-p (dst &optional src)
  (if-let* ((nap (or src (org-roam-node-at-point)))
            (src (or src (org-roam-node-id nap))))
      (seq-contains
       (seq-map 'car
                (org-roam-db-query qz/transitive-query dst src))
       src)
    ))

(seq-contains '(1 2 4) 1)

(defun qz/node-has-transitive-link-p (dst &optional src)
  (qz/has-transitive-link (org-roam-node-id dst) src))

(qz/has-transitive-link-p (qz/title->roam-id "emacs"))
#+end_src

#+RESULTS:

********* TODO has-mutual-connection
:PROPERTIES:
:ID:       b08963dd-6cba-44c3-9ee8-29fa5f4904d2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** migrations
:PROPERTIES:
:ID:       36692fa1-a7e7-4847-b2d9-eba4b661979b
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** helpers
:PROPERTIES:
:ID:       7fc45873-be1d-485c-b103-c60c148b74a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** migrate-jobs
:PROPERTIES:
:ID:       b7536d01-720c-4d41-b05b-cfa194a66dbc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(defun qz/org-roam-migrate-jobs ()
  (interactive )
  (dolist (file (org-roam--list-all-files))
    (with-current-buffer (or (find-buffer-visiting file)
                             (find-file-noselect file))
      (message "%s visiting" file)
      (qz/dispatch-hook)
      (save-buffer))))

                                        ;(qz/org-roam-migrate-jobs)
#+end_src
***** TODO #roam_key -> =:ROAM_REFS:=
:PROPERTIES:
:ID:       1c775b12-32d0-4531-82e3-8813d3138d9b
:CREATED:  <2021-12-14 Tue 18:14>
:END:
#+roam_key: https://bonk.com

a function of a node
#+begin_src emacs-lisp

#+end_src

***** created && updated
:PROPERTIES:
:ID:       5367ec4f-24d6-4416-a8d9-18df8cb1c0c2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-10 Thu 18:50]
:END:
e.g https://commonplace.doubleloop.net/recentchanges
(or updated created)

entry log -> created
activity log -> (node, ?commit=HEAD) ?updated, created

created -> property:created, file-name:created
updated -> property:updated, file-name:updated

#+begin_src emacs-lisp
(defun qz/file-created-as-timestamp (&optional file)
  (when-let* ((file (or file (buffer-file-name (current-buffer))))
              (ffile (f-base file))
              (p (string-match "-" ffile))
              (s (substring ffile 0 p)))
    (cond
     ((= p 16) (let* ((td (timezone-parse-date s))
                      (tt (timezone-parse-time (elt td 3))))
                 (format "[%s %s]"
                         (s-join "-" (cl-subseq td nil 3))
                         (s-join ":" tt))))
     ((= p 14) (let* ((yy (substring s 0 4))
                      (mm (substring s 4 6))
                      (dd (substring s 6 8))
                      (hh (substring s 8 10))
                      (MM (substring s 10 12))
                      (ss (substring s 12 14)))
                 (format "[%s-%s-%s %s:%s:%s]"
                         yy mm dd
                         hh MM ss))))))

(defun qz/org-roam-node-updated-precedence (pt file)
  (list (org-roam-get-keyword "UPDATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "UPDATED"))))
          (when (not (string-empty-p v)) v))
        (format-time-string
         "[%Y-%m-%d %H:%M:%S]"
         (file-attribute-modification-time (file-attributes file)))))

(defun qz/org-roam-node-created-precedence (pt file)
  (list (org-roam-get-keyword "CREATED")
        (let ((v (s-join " " (org-entry-get-multivalued-property pt "CREATED"))))
          (when (not (string-empty-p v)) v))
        (qz/file-created-as-timestamp file)))

(defun qz/org-roam-node-date-precedence (node date-fn)
  (save-excursion
    (let* ((pt (org-roam-node-point node))
           (file (org-roam-node-file node)))
      (with-current-buffer (or (find-buffer-visiting file)
                               (find-file-noselect file))
        (goto-char pt)
        ;;(message "qz: getting node updated: %s" (org-roam-node-title node))
        (org-with-wide-buffer
         (car (remove nil (funcall date-fn pt file))))))))

(defun qz/org-roam-node-updated-date (node)
  (qz/org-roam-node-date-precedence
   node
   (lambda (pt file)
     (append (qz/org-roam-node-updated-precedence pt file)
             (qz/org-roam-node-created-precedence pt file)))))

(defun qz/org-roam-node-created-date (node)
  (qz/org-roam-node-date-precedence
   node
   '(lambda (pt file)
      (append (qz/org-roam-node-created-precedence pt file)
              (reverse (qz/org-roam-node-updated-precedence pt file))))))

;;(cl-subseq [1 2 3] 1 2)
;;(car [1 2 3])
;;(or (s-join "a" nil) "b")

(let ((node (org-roam-node-from-title-or-alias "wine")))
  (list (qz/org-roam-node-updated-date node)
        (qz/org-roam-node-created-date node)))

;;(funcall (lambda (a b c) (message "%s %s %s" a b c)) 1 2 3)

(defun qz/do-migration--created-updated ()
  (let ((org-mode-hook nil))
    (cl-loop for node in (seq-map 'car (org-roam-db-query [:select id :from nodes]))
             ;;(org-roam-node-list) groups erroneously
             collect
             (let ((node (org-roam-populate (org-roam-node-create :id node))))
               (format "%s,%s,%s,%s,%s"
                       ;;"%s:%s,%s,%s,%s" to show with point
                       (org-roam-node-id node)
                       ;;(org-roam-node-point node)
                       (qz/org-roam-node-updated-date node)
                       (qz/org-roam-node-created-date node)
                       (org-roam-node-title node))
               (kill-buffer (get-file-buffer (org-roam-node-file node))))))) nil "/tmp/oo"))
#+end_src

#+RESULTS:
: /tmp/oo

****** TODO add override in ordering if DATE is 20210803
:PROPERTIES:
:ID:       87bd401c-7c9b-4cb4-b299-513bce1792b3
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  <2022-03-11 Fri 14:32>
:ROAM_EXCLUDE: t
:END:
****** sanity
:PROPERTIES:
:ID:       80cb794e-d401-4569-adb2-b68dbc285db0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | wc -l
cat /tmp/oo | uniq -c | sort -r | wc -l
cat /tmp/oo | uniq -c | sort -r | head
#+end_src

#+RESULTS:
:results:
3394
3395
1 fffec49f-29e6-4eeb-bf72-8a332f758222,<2021-09-30 01:00:38>,<2020-07-13 09:03:06>,Why, and how much, extra disk space is required when upgrading with Slony-1?
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,pollo de limon
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2021-06-15>
1 ffa31214-f0c3-415a-be09-16971e46c56e,<2022-01-07 Fri 13:06>,<2022-01-07 Fri 13:06>,tig welding
1 ff7134e1-beed-4110-a1d1-299a77dcec12,<2021-10-05 11:01:34>,<2021-08-16 18:32:45>,how did you get into <<job>>
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76,<2021-10-19 08:47:34>,<2020-05-18 09:40:13>,meeting
1 ff4838ef-41ae-43d4-844e-c4d8a1451411,<2021-09-30 01:00:38>,<2021-08-13 16:10:35>,Arthur Holmes
1 ff318634-08d2-4987-8a82-3a436303c753,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,<2020-08-23>
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047,<2021-09-30 01:00:38>,<2021-09-30 01:00:38>,wine
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963,<2021-12-15 Wed 11:36>,<2021-04-20 11:47:08>,NewStore
:end:

****** duplicate ids?
:PROPERTIES:
:ID:       bac1789e-70fa-4ab0-a762-befa8aee61a8
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
only if we use org-roam-node-list smh
#+begin_src shell :results drawer
cat /tmp/oo | cut -d, -f1 | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1 fffec49f-29e6-4eeb-bf72-8a332f758222
1 ffd716b0-02c7-4594-aec9-bb6cf729d86a
1 ffcd9f0f-7eca-4d4e-bf94-a7a41266994f
1 ffa31214-f0c3-415a-be09-16971e46c56e
1 ff7134e1-beed-4110-a1d1-299a77dcec12
1 ff5c3587-1d6f-40a9-8ced-c0a07b5fcd76
1 ff4838ef-41ae-43d4-844e-c4d8a1451411
1 ff318634-08d2-4987-8a82-3a436303c753
1 ff1873f7-5ad7-4d4e-8de1-eb0046675047
1 ff06c7dc-3266-4ba1-82a6-c5f430bb1963
:end:

****** date distribution
:PROPERTIES:
:ID:       a51780f5-f313-43fd-9e4a-4ea9f1d5d03c
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* updated
:PROPERTIES:
:ID:       19fe8ad7-4a01-426c-805f-60dcb3b0c76e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $2}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
534
2246 <2021-09-30 01:00:38>
96 <2022-01-06 12:46:02>
77 <2021-10-19 08:47:34>
35 <2022-01-12 20:09:37>
34 <2021-10-05 11:42:04>
14 <2022-01-12 16:47:20>
14 <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48>
11 <2021-10-01 16:24:07>
10 <2022-01-12 13:40:32>
:end:

******* created
:PROPERTIES:
:ID:       8a0ef7a7-d1ee-43be-86bc-3de2974c3df2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | wc -l
cat /tmp/oo | awk -F, '{print $3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
1893
500 <2021-08-13 16:10:35>
459 <2021-09-30 01:00:38>
102 <2021-04-20 11:47:08>
37 <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34>
20 <2020-05-15 16:39:41>
15 <2021-12-13 11:13:32>
13 <2022-01-12 Wed 16:58>
12 <2020-05-11 15:09:56>
11 <2021-06-08 08:19:23>
:end:

******* created,updated
:PROPERTIES:
:ID:       d902fa0b-bedc-4df0-b5a6-05247c4716a2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src shell :results drawer
cat /tmp/oo | awk -F, '{print $2,$3}' | sort | uniq -c | sort -rgk1 | head
#+end_src

#+RESULTS:
:results:
459 <2021-09-30 01:00:38> <2021-09-30 01:00:38>
241 <2021-09-30 01:00:38> <2021-08-13 16:10:35>
96 <2022-01-06 12:46:02> <2021-04-20 11:47:08>
35 <2022-01-12 20:09:37> <2021-05-18 12:49:41>
28 <2021-10-19 08:47:34> <2021-10-19 08:47:34>
26 <2021-10-19 08:47:34> <2021-08-13 16:10:35>
19 <2021-10-05 11:42:04> <2021-08-13 16:10:35>
14 <2022-01-12 16:47:20> <2020-05-15 16:39:41>
14 <2021-12-13 11:13:32> <2021-12-13 11:13:32>
11 <2021-10-05 16:34:48> <2021-06-08 08:19:23>
:end:


****** deciding on timeline formats
:PROPERTIES:
:ID:       f12933d5-0769-46bc-a6e5-d7d57fc4efe1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* node feed: timeline of created-only
:PROPERTIES:
:ID:       361cf6bc-5261-4c49-aef9-15ef7ce18640
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******* activity feed: timeline of updated + created
:PROPERTIES:
:ID:       56804c59-f6a9-4e6b-b52d-c032939369f0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** updated instance = commit + updated value
:PROPERTIES:
:ID:       5df850d0-ef27-4ae4-b064-e388b6c13f10
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
******** created instance = created value
:PROPERTIES:
:ID:       6b862e88-77f4-4718-8448-9184524fb714
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** TODO node timelone
:PROPERTIES:
:ID:       e5468ed2-9946-4e39-bfab-5a257f1b11cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

***** project-files (has todo)
:PROPERTIES:
:ID:       ff40dc98-d9dd-4ec5-85e6-48a33d459a79
:CREATED:  [2022-03-31 Thu 11:03]
:UPDATED:  [2022-03-31 Thu 11:03]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp
(dolist (file (split-string (shell-command-to-string
                             "rg TODO ~/life/roam -t org --files-with-matches")
                            "\n"))
  (unless (string-empty-p file)
    (with-current-buffer (find-file-noselect f)
      (org-mode)
      (unless 
          (qz/file-has-todo-p

#+end_src

**** protocol (ref)
:PROPERTIES:
:ID:       366af88d-6c6d-4638-970f-c00f33152ef6
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** capture                                                       :var:
:PROPERTIES:
:ID:       8c40e382-4b74-461c-a1fb-e64d108a89c5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** TODO templates
:PROPERTIES:
:ID:       a7f7f97d-d3c7-4941-a522-f3530bc8379c
:CREATED:  [2022-02-22 Tue 15:27]
:ROAM_EXCLUDE: t
:UPDATED:  [2022-03-14 Mon 11:12]
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref roam  :results drawer
;;; ref capture
(setq org-roam-capture-ref-templates
      `(("r" "ref" plain
         "\n#+begin_quote\n${body}\n#+end_quote\n%?"
         :if-new (file+head ,qz/capture-title-timestamp-roam
                            "#+title: ${title}\n")
         :unnarrowed t)))
#+end_src

#+RESULTS:
:results:
((r ref plain 
#+begin_quote
${body}
#+end_quote
%? :if-new (file+head %(qz/utc-timestamp)-${slug} #+title: ${title}
) :unnarrowed t))
:end:
**** visual
:PROPERTIES:
:ID:       ebccab15-1c63-43fe-be76-8b43d08ecf79
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
***** =*org-roam*= (backlinks) buffer                            :var:func:
:PROPERTIES:
:ID:       fca1f0cb-46ad-4064-ad9d-925dc56b4ebb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
****** ... images should be small
:PROPERTIES:
:ID:       1a5a2369-eef1-4e73-b701-e5a91a11e22a
:CREATED:  <2021-12-12 Sun 22:38>
:END:

so set a buffer-local value to constrain the size of images across
their width with 'org-image-actual-width, and attach to the hook
'org-roam-mode-hook.

easy peasy, only took me 20 minutes

#+begin_src emacs-lisp :noweb-ref roam
(defun qz/roam-buffer-image-width ()
  (setq-local org-image-actual-width 150)
  (org-redisplay-inline-images))

(add-hook 'org-roam-mode-hook 'qz/roam-buffer-image-width)
#+end_src
****** ... start buffer folded/collapsed
:PROPERTIES:
:ID:       87056aa9-d49b-42df-8f66-4a7f266785d0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
https://github.com/org-roam/org-roam/issues/991#issuecomment-882010053

#+begin_src emacs-lisp :noweb-ref roam
(cons->table
 (add-to-list 'magit-section-initial-visibility-alist (cons 'org-roam-node-section 'hide)))
#+end_src

#+RESULTS:
| org-roam-node-section | hide |
| stashes               | hide |

*** settings
:PROPERTIES:
:ID:       3f138707-783b-474b-9d18-dca32c60b4fe
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** org-confirm-babel-evaluate; don't ask                           :var:
:PROPERTIES:
:ID:       57ced9da-b883-47ea-9a88-00579d24dbf9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref org
(setq org-confirm-babel-evaluate nil)
#+end_src

**** org-refile-targets                                              :var:
:PROPERTIES:
:ID:       e52c338d-9289-4027-9b79-5013a0ef02f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref org
;; [[file:~/.doom.d/config.org::*refile][refile]]
(setq org-refile-targets '(("reading.org" :level . 0)
                           ("emacs.org" :level . 0)
                           ("watching.org" :level . 0)
                           ("learning.org" :level . 0)
                           ("inbox.org" :level . 0)
                           ("sample.org" :level . 0)
                           ("wip.org" :level . 0)))
#+end_src

**** TODO org-log                                                    :var:
CLOSED: [2022-03-10 Thu 19:24]
:PROPERTIES:
:ID:       23e1b5e7-acac-4670-b421-4f84904c8b57
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-11 Fri 10:09]
:ROAM_EXCLUDE: t
:END:
:LOGBOOK:
- CLOSING NOTE [2022-03-10 Thu 19:24] \\
  testing done notes
:END:

***** TODO org-log-repeat
:PROPERTIES:
:ID:       ece698ff-9204-4a2f-96ea-57b11c0649b8
:CREATED:  [2022-03-10 Thu 19:25]
:UPDATED:  [2022-03-10 Thu 19:26]
:ROAM_EXCLUDE: t
:END:
once we find out about sequences and repeats

***** org-log-refile
:PROPERTIES:
:ID:       882be009-a2e8-4ba1-95dd-6252b6108b2f
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-refile 'note)
#+end_src

#+RESULTS:
: note

***** org-log-redeadline
:PROPERTIES:
:ID:       b791e4a5-9eaa-475a-9ca7-c3b2ac4325ff
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-redeadline 'note)
#+end_src

#+RESULTS:
: note

***** org-log-reschedule
:PROPERTIES:
:ID:       c3564248-02b8-4912-8ab4-5d33c1fce5ba
:CREATED:  [2022-03-10 Thu 19:24]
:UPDATED:  [2022-03-10 Thu 19:24]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-reschedule 'note)
#+end_src

#+RESULTS:
: note

***** org-log-done                                                  :var:
:PROPERTIES:
:ID:       1728a0dc-4e3f-4317-8d3d-4ebb3dbc0375
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-13 Wed 14:29]
:END:
#+begin_src emacs-lisp :noweb-ref org
(setq org-log-done 'note)
#+end_src

**** org-startup-folded                                              :var:
:PROPERTIES:
:ID:       948baebf-3fae-499d-8036-6e454de83417
:CREATED:  <2022-02-27 Sun 15:04>
:UPDATED:  [2022-05-30 Mon 18:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-startup-folded 'content)
#+end_src

**** org-enforce
:PROPERTIES:
:ID:       ee742dd8-192d-4901-a5f8-342a403b6094
:CREATED:  [2022-04-06 Wed 11:39]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

- :: (info-apropos "org-enforce")
  
**** org-tags-column
:PROPERTIES:
:ID:       2809e6c5-ab8c-475a-ab96-6236563e5ce8
:CREATED:  [2022-04-25 Mon 10:09]
:UPDATED:  [2022-04-25 Mon 11:29]
:ROAM_EXCLUDE: t
:END:

a most controversial decision

- see also :: [[id:3db09afc-ea16-4ec4-883c-27ad7589f7f1][align tags]]
- see also :: [[id:0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67][org-tags-alist]]

#+begin_src emacs-lisp :noweb-ref org
(setq org-tags-column 120)
#+end_src

#+RESULTS:
: 120

**** org-tags-alist
:PROPERTIES:
:ID:       0b88f9d2-f33f-4fbf-88f0-8cde8ccd0e67
:CREATED:  [2022-04-25 Mon 10:13]
:UPDATED:  [2022-04-25 Mon 10:14]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("wip" . ?W)
        ("CANCELLED" . ?c)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        (:newline)
        ("talk" . ?t)
        ("film" . ?f)))

;;(cons->table org-tag-alist)
#+end_src

#+RESULTS:
| @errand   | 101 |
| @work     | 119 |
| @home     | 104 |
| @blog     |  66 |
| :newline  | nil |
| emacs     |  69 |
| wip       |  87 |
| CANCELLED |  99 |
| :newline  | nil |
| learning  | 108 |
| research  | 114 |
| :newline  | nil |
| book      |  98 |
| article   |  97 |
| paper     | 112 |
| :newline  | nil |
| talk      | 116 |
| film      | 102 |

**** org-enforce-todo-dependencies                                   :var:
:PROPERTIES:
:ID:       51ff922b-e6d5-4437-9fdc-d6208de9b959
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-dependencies t)
#+end_src

#+RESULTS:
: t

**** org-enforce-todo-checkbox-dependencies                          :var:
:PROPERTIES:
:ID:       496407f8-71cf-4745-a5de-d0f1817ce600
:CREATED:  [2022-04-06 Wed 11:29]
:UPDATED:  [2022-04-06 Wed 11:39]
:ROAM_EXCLUDE: t
:END:
  
#+begin_src emacs-lisp :noweb-ref org
(setq org-enforce-todo-checkbox-dependencies t)
#+end_src

#+RESULTS:
: t

*** download :var:
:PROPERTIES:
:ID:       b32477c3-9346-4c88-8710-043b6eb9824f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(require 'org-download)
#+end_src
*** links
:PROPERTIES:
:ID:       9f04fd1e-2ce6-440a-8c29-e23c72b0af23
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** insert link to attachment
:PROPERTIES:
:ID:       b34da154-8668-44fc-89da-de39359759e0
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-choose-current-attachment ()
  (let ((attach-dir (org-attach-dir)))
    (if attach-dir
        (let* ((file (pcase (org-attach-file-list attach-dir)
                       (`(,file) file)
                       (files (completing-read "Open attachment: "
                                               (mapcar #'list files) nil t))))
               (path (expand-file-name file attach-dir)))
          path))))

(defun qz/org-insert-current-attachment ()
  (interactive)
  (insert
   (format "[[file:./%s]]"
           (dired-make-relative
            (qz/org-choose-current-attachment)))))

(define-key org-mode-map (kbd "C-c M-a") 'qz/org-insert-current-attachment)

#+end_src
**** refine org-link for generic files
:PROPERTIES:
:ID:       220874c8-4330-4440-a616-31b2e0a47ef2
:CREATED:  [2022-05-23 Mon 10:46]
:UPDATED:  [2022-05-25 Wed 12:31]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-insert-last-stored-link (arg)
  "Insert the last link stored in `org-stored-links'."
  (interactive "p")
  (qz/org-insert-all-links arg "" "\n"))

(defun qz/org-insert-all-links (arg &optional pre post)
  "Insert all links in `org-stored-links'.
When a universal prefix, do not delete the links from `org-stored-links'.
When `ARG' is a number, insert the last N link(s).
`PRE' and `POST' are optional arguments to define a string to
prepend or to append."
  (interactive "P")
  (let ((org-link-keep-stored-after-insertion (equal arg '(4)))
        (links (copy-sequence org-stored-links))
        (pr (or pre "- "))
        (po (or post "\n"))
        (cnt 1) l)
    (if (null org-stored-links)
        (message "No link to insert")
      (while (and (or (listp arg) (>= arg cnt))
                  (setq l (if (listp arg)
                              (pop links)
                            (pop org-stored-links))))
        (setq cnt (+ 1 cnt))
        (insert pr)
        (org-insert-link nil (car l)
                         (or (cadr l)
                             ;; (car (last (s-split "/" "file/path/goop.boop::pattern")))
                             ;; => "goop.boop::pattern"
                             (car (last (s-split "/" (car l))))))
        (insert po)))))

(define-key org-mode-map (kbd "C-c M-l") 'qz/org-insert-last-stored-link)
#+end_src

#+RESULTS:
: qz/org-insert-last-stored-link

*** hooks
:PROPERTIES:
:ID:       5ff7526d-f62c-49fd-8752-07d829fce0d8
:CREATED:  <2022-02-23 Wed 09:17>
:ROAM_EXCLUDE: t
:END:
**** org-mode-hook -> before-save-hook: create ids for headines in buffer
:PROPERTIES:
:ID:       b07ff6f9-2e00-467c-98e8-c4c8697ce08f
:CREATED:  <2022-02-23 Wed 09:17>
:END:

adapted for [[id:b33372ae-f731-4482-8e3a-0c5e986ac70a][org-roam]], the =ROAM_EXCLUDE= property is set, to reduce
noise in the database, but retain id-wise properties of linking.

see q

#+begin_src emacs-lisp :noweb-ref org
(defun qz/create-excluded-ids-for-headlines-in-buffer ()
  "Add ID properties to all headlines in the current file which
do not already have one."
  (interactive)
  (org-map-entries (lambda (&rest r)
                     (unless (org-id-get)
                       (org-id-get-create)
                       (org-set-property "ROAM_EXCLUDE" "t")))))


(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook
                      'qz/create-excluded-ids-for-headlines-in-buffer nil 'local)))

(setq org-id-link-to-org-use-id t)
#+end_src

*** tag
:PROPERTIES:
:ID:       58ddf980-3404-4a72-bb1f-47a5a18a5d66
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** [[id:26b5040b-0883-444f-af7a-abd4e1d67c0e][my thoughts]]
:PROPERTIES:
:ID:       89daceb2-7818-450f-9638-1415a377b3bd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I'm using tags and auto-tags rather sporadically
- person
- private
- daily

***** TODO tag analysis (file | -> headline) ; [[id:3ec0367f-9ff5-419d-9a44-a3424656c1eb][org-roam database machinations]]
:PROPERTIES:
:ID:       cefcceaa-3708-48b4-bb14-ac5462c00474
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** org-tag-alist                                                   :var:
:PROPERTIES:
:ID:       21abbf73-43fb-4bc4-a5fb-53e7dc0e6345
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
CREATED: <2021-12-07 Tue 14:13>

#+begin_src emacs-lisp
(setq org-tag-alist
      '(("@errand" . ?e)
        ("@work" . ?w)
        ("@home" . ?h)
        ("@blog" . ?B)
        (:newline)
        ("emacs" . ?E)
        ("task" . ?t)
        ("CANCELLED" . ?C)
        (:newline)
        ("learning" . ?l)
        ("research" . ?r)
        (:newline)
        ("book" . ?b)
        ("article" . ?a)
        ("paper" . ?p)
        ("talk" . ?t)
        ("film" . ?f)))
#+end_src

#+RESULTS:
: ((@errand . 101) (@work . 119) (@home . 104) (@blog . 66) (:newline) (emacs . 69) (task . 116) (CANCELLED . 67) (:newline) (learning . 108) (research . 114) (:newline) (book . 98) (article . 97) (paper . 112) (talk . 116) (film . 102))

*** visual
:PROPERTIES:
:ID:       fc2aaff6-cb57-49ac-b507-a6c7b2720c70
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** use fixed size of images
:PROPERTIES:
:ID:       bebc4bc6-3ed0-49a1-b76a-ffe7ee11dd33
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
640px is a good size, at approximately 64 columns

----------------------------------------------------------------
#+DOWNLOADED: screenshot @ 2021-12-12 22:14:04
[[file:configs/2021-12-12_22-14-04_screenshot.png]]

check with (org-redisplay-inline-images)
-----------------------------------------------------------------

#+begin_src emacs-lisp :noweb-ref org
(setq org-image-actual-width 640)
#+end_src

#+RESULTS:
: 640

**** {M-x align tags}
:PROPERTIES:
:ID:       3db09afc-ea16-4ec4-883c-27ad7589f7f1
:CREATED:  [2022-04-25 Mon 10:10]
:UPDATED:  [2022-04-25 Mon 11:26]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref org
(defun qz/org-align-tags ()
  (interactive)
  (org-align-tags 'yes-all-the-bloody-tags))
#+end_src

#+RESULTS:
: qz/org-align-tags

** [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]] :visual:
:PROPERTIES:
:ID:       a10b32b7-6a50-47e8-9fed-0bd985f8b0f2
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** apply [[id:8b0b7251-2404-404b-9b64-53e4d3ce2fe6][olivetti]] to [[id:0b89e24d-72c0-46ae-8f61-94cee95d7732][minibuffer]]
:PROPERTIES:
:ID:       85fc83bc-5603-493f-973a-e3aa994654cd
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf

;; (setq minibuffer-mode-hook nil)
;; (add-hook 'minibuffer-mode-hook 'olivetti-mode)

(add-hook 'minibuffer-mode-hook
          (lambda ()
            (setq-local olivetti-body-width 200)
            (olivetti-mode)))

#+end_src

#+RESULTS:
| lambda | nil | (setq-local olivetti-body-width 200) | (olivetti-mode) |

** pdf-view
:PROPERTIES:
:ID:       90477387-9ef3-4e7b-8d80-d2344623d521
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** midnight-minor-mode ; dark-mode filter on pdfs :visual:
:PROPERTIES:
:ID:       539f2eb0-e47d-4976-8c96-6c5a7705835a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-25 Mon 10:10]
:END:
#+begin_src emacs-lisp :noweb-ref conf
(with-eval-after-load 'pdf-view
  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode))
#+end_src

** restclient
:PROPERTIES:
:ID:       879159c8-76fa-4688-815f-7a4e186e203e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** choose
:PROPERTIES:
:ID:       ada7f597-ebc8-43f2-bc32-7cb09a31a088
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

**** restclient-choose-env
:PROPERTIES:
:ID:       b88fa094-45e8-4426-8ed8-cdd333afde7a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-env nil)

(defun qz/restclient-choose-env (&optional env)
  (interactive)
  (message "qz/restclient-env: %s"
           (setq qz/restclient-env
                 (cdr (assoc (intern (or env
                                         (completing-read "restclient-env: " qz/newstore-envs)))
                             qz/newstore-envs-abbrev))))
  qz/restclient-env)
#+end_src

#+RESULTS:
: qz/restclient-choose-env

**** restclient-choose-tenant
:PROPERTIES:
:ID:       7555ab8b-5c16-432e-bedb-1159b08b940a
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-tenant nil)

(defun qz/restclient-choose-tenant (&optional tenant)
  (interactive)
  (message "qz/restclient-tenant: %s"
           (setq qz/restclient-tenant
                 (or tenant (completing-read
                             "restclient-tenant: " qz/newstore-tenants))))
  qz/restclient-tenant)
#+end_src

#+RESULTS:
: qz/restclient-choose-tenant
*** noweb tangler
:PROPERTIES:
:ID:       515b64aa-7f64-45dd-adb6-253e4a24f387
:CREATED:  [2022-04-20 Wed 15:14]
:UPDATED:  [2022-04-22 Fri 12:05]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb yes :noweb-ref conf 
;; NOWEB RESTCLIENT START
(with-eval-after-load 'restclient
  <<restclient>>
  )
;; NOWEB RESTCLIENT END
#+end_src
*** token
:PROPERTIES:
:ID:       7136479f-df01-4628-b15d-c5878b4e45bf
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-20 Wed 15:15]
:END:

#+begin_src emacs-lisp :noweb-ref restclient
(defvar qz/restclient-token nil)
(defvar qz/restclient-token-field 'access_token)

(defun qz/restclient-hook ()
  "Update token from a request."
  ;; url is visible while the hook is running.
  (let ((result))
    (save-excursion
      (cond
       ((string-suffix-p "/token" url)
        (condition-case nil
            (progn
              (setq result (cdr (assoc qz/restclient-token-field (json-read))))
              (when (stringp result)
                (progn
                  (setq qz/restclient-token result)
                  (message (concat "stored token: " qz/restclient-token)))))
          (error (message "That wasn't cleanly handled."))))))))

(add-hook 'restclient-response-loaded-hook 'qz/restclient-hook)
(provide 'restclient-hooks)
#+end_src

#+RESULTS:
: restclient-hooks

** aws
:PROPERTIES:
:ID:       11aa93f5-5d65-4d2e-a3cd-6c5455bfb255
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

*** aws-env
:PROPERTIES:
:ID:       efd7880f-07c1-4ef3-97fe-916fc7a51cb9
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defvar qz/aws-env nil
  "the aws login configuration, managed through saml2aws

to manipulate, run
$ saml2aws login -a PROFILE_ALIAS

files of note
`$HOME/.aws/'
`$HOME/.saml2aws'")
#+end_src

*** choose
:PROPERTIES:
:ID:       6663fecd-c4a2-4218-aa18-4bc4bb3e922f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defun qz/choose-aws-env (&optional env)
  (interactive)
  (setq qz/aws-env
        (or env (completing-read
                 "aws-env: "
                 (->> (shell-command-to-string
                       "cat ~/.saml2aws | grep '^name' | cut -d'=' -f2")
                      (s-split "\n")
                      (remove "")))))
  (async-shell-command (format "saml2aws login -a %s"
                               qz/aws-env)
                       "*aws*"))
#+end_src

***
** kubernetes
:PROPERTIES:
:ID:       299fa738-35c3-45f6-83fb-e26db3a40ce5
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** kubectl-context :var:
:PROPERTIES:
:ID:       48fa15cd-93c1-49e6-9e4b-c610959c4b11
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defvar qz/kubectl-context nil
  "the operating kubernetes context.

to check, at a shell, run:
`$ kubectl config get-contexts -o name'
or
`$ kubectl config current-context")
#+end_src
*** choose :func:
:PROPERTIES:
:ID:       48e170f6-acf1-48d3-af8d-bb06069db027
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defun qz/choose-kubectl-context (ctx)
  (interactive)
  (setq qz/kubectl-context
        (or ctx (completing-read "k8s ctx: "
                                 (qz/shell-command-to-list-of-strings
                                  "kubectl config get-contexts -o name"))))
  (async-shell-command (format "kubectl config use-context %s"
                               qz/kubectl-context)
                       "*kubectl*"))

;; optional; quality of life improvement to bury kubectl buffer
(add-to-list 'display-buffer-alist '("*kubectl*" display-buffer-no-window))
#+end_src

** system commands
:PROPERTIES:
:ID:       c519b791-1810-4150-89ec-3408998f71a3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** get mail
:PROPERTIES:
:ID:       7756268f-c9b3-468d-a9ce-c6068279c7eb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
(defun qz/get-mail ()
  (interactive)
  (async-shell-command "mbsync -Va && notmuch new"))
#+end_src

*** rde-sanity
:PROPERTIES:
:ID:       3fb0efe4-8d3f-4840-bd92-74cc3249d975
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
(defun qz/rde-sanity ()
  (interactive)
  (async-shell-command
   (concat "cd $HOME/git/sys/rde"
           "&& guix repl -L . sanity.scm")))
#+end_src

*** reload-config
:PROPERTIES:
:ID:       21946f30-986f-49fe-a51d-38c78f315543
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:02]
:END:
#+begin_src emacs-lisp :noweb yes :noweb-ref conf
(defun qz/reload-config-home ()
  (interactive)
  (org-babel-tangle-file
   "~/git/sys/rde/rde/examples/abcdw/emacs.org")
  (sleep-for .5)
  (async-shell-command
   (concat
    "cd $HOME/git/sys/rde/rde/examples/abcdw/ "
    "&& make ixy-home-reconfigure"
    "&& echo 'bal-eggd-e' "
    "| espeak --stdin ")))

(defun qz/reload-config-system ()
  (interactive)
  (async-shell-command
   (concat
    "cd $HOME/git/sys/rde/rde/examples/abcdw/ "
    "&& sudo -E make ixy-system-reconfigure"
    "&& echo 'system bal-eggd-e complete' | espeak --stdin")))


(defun qz/reload-config-both ()
  (interactive)
  (async-shell-command
   (concat
    "cd $HOME/git/sys/rde/rde/examples/abcdw/ "
    "&& guix pull -C $HOME/git/sys/rde/stale/guix-related/guix/channels "
    "&& make ixy-home-reconfigure "
    "&& echo 'bal-eggd-e' | espeak --stdin "
    "&& sudo -E make ixy-system-reconfigure "
    "&& echo 'system bal-eggd-e complete' | espeak --stdin")))

(defun qz/reload-config-emacs ()
  (interactive)
  (load-file "~/.config/emacs/init.el"))

(defun qz/reload-guix-pins ()
  (interactive)
  (async-shell-command
   (concat "cd $HOME/git/sys/rde/ "
	   "&& make channels-update-lock && make channels-pull")))

(defun qz/guix-upgrade ()
  (interactive)
  (async-shell-command
   (concat "cd $HOME/git/sys/rde"
	   "&& make channels-update-lock && make channels-pull && guix upgrade && make")))
#+end_src

#+RESULTS:
: qz/guix-upgrade

*** swaywm: choose output resolution
:PROPERTIES:
:ID:       8fbfdfd8-edfb-4f7d-a6ed-a1927aa1885a
:CREATED:  [2022-04-22 Fri 11:56]
:UPDATED:  [2022-04-22 Fri 12:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref conf
(defun qz/sway-choose-output-res (&optional display res)
  (interactive)
  (let* ((cur (s-trim (shell-command-to-string
                       "swaymsg -t get_outputs | jq -r 'map( . | select(.focused == true) | .name) | first'")))
         (cmd (format "swaymsg 'output %s enable res %s'"
                      (or display
                          (completing-read "display: "
                                           '("DP-1" "DP-2"
                                             "eDP-1"
                                             "HDMI-1" "HDMI-2")
                                           nil t cur))
                      (or res
                          (completing-read "resolution: "
                                           '("1920x1080"
                                             "5120x1440")
                                           nil t)))))
    (when (y-or-n-p (format "exec ~%s~?" cmd))
      (shell-command cmd))))
#+end_src

#+RESULTS:
: qz/sway-choose-output-res

*** bluetooth
:PROPERTIES:
:ID:       49d011dd-3d26-4b50-abf5-292cdf118d46
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:

**** outputs
:PROPERTIES:
:ID:       24700345-74aa-4f26-8fe6-64321c8ea328
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
#+begin_src shell
pactl list sources | grep -E 'Name|Desc' -n
#+end_src

#+RESULTS:
|   3: | Name: alsa_output.pci-0000_01_00.1.hdmi-stereo.monitor                                             |
|   4: | Description: Monitor of HDA NVidia Digital Stereo (HDMI)                                           |
|  37: | Name: alsa_input.usb-Generic_USB_Audio_201405280001-00.analog-stereo                               |
|  38: | Description: USB Audio Analog Stereo                                                               |
|  91: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_5__sink.monitor |
|  92: | Description: Monitor of Comet Lake PCH cAVS HDMI3 Output                                           |
| 126: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_4__sink.monitor |
| 127: | Description: Monitor of Comet Lake PCH cAVS HDMI2 Output                                           |
| 161: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_3__sink.monitor |
| 162: | Description: Monitor of Comet Lake PCH cAVS HDMI1 Output                                           |
| 196: | Name: alsa_output.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__sink.monitor   |
| 197: | Description: Monitor of Comet Lake PCH cAVS Speaker + Headphones                                   |
| 231: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp__source          |
| 232: | Description: Comet Lake PCH cAVS Headphones Stereo Microphone                                      |
| 284: | Name: alsa_input.pci-0000_00_1f.3-platform-skl_hda_dsp_generic.HiFi__hw_sofhdadsp_6__source        |
| 285: | Description: Comet Lake PCH cAVS Digital Microphone                                                |
| 337: | Name: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor                   |
| 338: | Description: Monitor of TASCAM DR Series Analog Stereo                                             |
| 374: | Name: alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo                            |
| 375: | Description: TASCAM DR Series Analog Stereo                                                        |
| 428: | Name: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor                                               |
| 429: | Description: Monitor of Samuel’s AirPods Pro                                                       |

***** tascam: input: alsa_input.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo
:PROPERTIES:
:ID:       2bfd38e2-cf1c-4074-8349-b4d9a3736b9f
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
***** tascam: output: alsa_output.usb-TEAC_Corporation_TASCAM_DR_Series-00.analog-stereo.monitor
:PROPERTIES:
:ID:       4a4a7516-1e18-4d0e-9646-5cc87a361341
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
***** airpods: output: bluez_sink.44_F0_9E_51_52_7B.a2dp_sink.monitor
:PROPERTIES:
:ID:       0710390c-4cc2-49e8-8150-490ca155eda9
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-22 Fri 15:31]
:ROAM_EXCLUDE: t
:END:
**** connect to headphones
:PROPERTIES:
:ID:       13b782de-a874-43ff-8f8f-e75960674e48
:CREATED:  [2022-04-22 Fri 15:31]
:UPDATED:  [2022-04-25 Mon 15:15]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp

(defun qz/bt-connect (mac)
  (interactive "saddress: ")
  (async-shell-command
   (format "bluetoothctl connect %s" mac)
   "*bluetoothctl*"))

(defun qz/bt-airpods ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B"))

(defun qz/bt-aiaiai ()
  (interactive)
  (qz/bt-connect "44:F0:9E:51:52:7B")


  )
#+end_src

#+RESULTS:
: qz/bt-aiaiai

** [[id:fbfebc6c-8732-4646-85da-96345218116e][tramp]]
:PROPERTIES:
:ID:       603cb796-7a41-459d-a1e9-5fdc50aee476
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-21 Thu 14:56]
:END:
*** tramp-cache-read-persistent-data ; yes please
:PROPERTIES:
:ID:       2ced9c47-0f80-4744-966d-ece200289b6f
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(setq tramp-cache-read-persistent-data t)
#+end_src

#+RESULTS:
: t
** visual
:PROPERTIES:
:ID:       cac4fbde-325a-4f6a-a2f0-237f1e2752cb
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** [[id:c6490b3a-4dc3-4f9a-bb21-81bb6abc6beb][emacs-perfect-margin]]
:PROPERTIES:
:ID:       7b89ab8f-816a-4930-bedd-0653b028a0c4
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(require 'perfect-margin)

(perfect-margin-mode 1)
(setq perfect-margin-ignore-regexps nil
      perfect-margin-ignore-filters nil)
#+end_src
*** cursor
:PROPERTIES:
:ID:       f7063b4c-226d-49cc-8bd8-a43249dd6c65
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(custom-set-variables
 '(cursor-type 'hbar))
#+end_src
*** outline
:PROPERTIES:
:ID:       b5fec793-6a50-4f9d-b88f-715df300dc2c
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:
**** outline-default-state :var:
:PROPERTIES:
:ID:       2150f716-f377-4d9c-b1ab-f278a0400cfa
:CREATED:  [2022-03-11 Fri 15:25]
:UPDATED:  [2022-03-11 Fri 15:25]
:ROAM_EXCLUDE: t
:END:

note, >= emacs 29.1

#+begin_src emacs-lisp :noweb-ref conf
(setq outline-default-state 'outline-show-only-headings)
#+end_src
*** hi-lock
:PROPERTIES:
:ID:       0d55f4eb-3560-4e3d-a167-e88c0900a4f1
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

I believe that when 'hi-lock-auto-select-face is non-nil, this should
cycle colors automatically.

#+begin_src emacs-lisp :noweb-ref conf
(defun hi-lock-face-symbol-at-point ()
  "Highlight each instance of the symbol at point.
Uses the next face from `hi-lock-face-defaults' without prompting,
unless you use a prefix argument.
Uses `find-tag-default-as-symbol-regexp' to retrieve the symbol at point.

If REGEXP contains upper case characters (excluding those preceded by `\\')
and `search-upper-case' is non-nil, the matching is case-sensitive.

This uses Font lock mode if it is enabled; otherwise it uses overlays,
in which case the highlighting will not update as you type.  The Font
Lock mode is considered \"enabled\" in a buffer if its `major-mode'
causes `font-lock-specified-p' to return non-nil, which means
the major mode specifies support for Font Lock."
  (interactive)
  (let* ((regexp (hi-lock-regexp-okay
                  (find-tag-default-as-symbol-regexp)))
         (hi-lock-auto-select-face t)
         (face (hi-lock-read-face-name)))
    (or (facep face)
        (setq face (or (and hi-lock-auto-select-face (hi-lock-read-face-name))
                       'hi-yellow)))
    (unless hi-lock-mode (hi-lock-mode 1))
    (hi-lock-set-pattern
     regexp face nil nil
     (if (and case-fold-search search-upper-case)
         (isearch-no-upper-case-p regexp t)
       case-fold-search))))
#+end_src

#+RESULTS:
: hi-lock-face-symbol-at-point
*** emacs-highlight-indent-guides
:PROPERTIES:
:ID:       aacfd214-458f-4334-aad6-7b1a6453a9f5
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

**** noweb tangler
:PROPERTIES:
:ID:       623daebd-6f65-49da-b45b-801c5f18489c
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb yes

(with-eval-after-load 'highlight-indent-guides
  <<hl-indent>>
  )

#+end_src
**** appearance; character ( 🐶 🐩 ), colours
:PROPERTIES:
:ID:       7f7805c9-90a1-43b0-921a-3260e3153079
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:03]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent

;; highlight-indent-guides-character
;; 🐶
;; 🐩
;; |
;; default (char-to-string 9474)
;; default │

(custom-set-variables '(highlight-indent-guides-method 'character)
                      `(highlight-indent-guides-character 9474)
                      '(highlight-indent-guides-auto-enabled nil)
                      '(highlight-indent-guides-responsive 'top))

;; I don't use this AT ALL so give some ridulous defaults
(set-face-background 'highlight-indent-guides-odd-face "green")
(set-face-background 'highlight-indent-guides-even-face "red")

;; this is the /only/ based highlight-indent guide variety
(set-face-foreground 'highlight-indent-guides-character-face "#333")
(let ((accent "#555"))
  (set-face-foreground 'highlight-indent-guides-stack-character-face accent)
  (set-face-foreground 'highlight-indent-guides-top-character-face accent))
#+end_src

these settings end up looking like this:

#+DOWNLOADED: screenshot @ 2022-05-23 11:02:39
[[file:configs/2022-05-23_11-02-39_screenshot.png]]

**** interactive customisation
:PROPERTIES:
:ID:       b935c3bd-3965-4553-8177-5c679f5eaa2a
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

***** toggle following responsive :: qz/highlight-indent-toggle-responsive
:PROPERTIES:
:ID:       168ed94a-2b77-41a8-8e8d-b22d330b9c84
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:01]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defun qz/highlight-indent-toggle-responsive (&optional arg)
  (interactive)
  (let ((val (if (or (and arg (> 0 arg))
                     (and (not arg) highlight-indent-guides-responsive))
                 nil qz/highlight-indent-guides-responsive)))
    (custom-set-variables
     `(highlight-indent-guides-responsive ',val))
    (highlight-indent-guides-mode)
    val))
#+end_src

***** lazy reading mode
:PROPERTIES:
:ID:       9a6b201c-5074-4bcc-adea-252dfe608127
:CREATED:  [2022-05-23 Mon 11:01]
:UPDATED:  [2022-05-23 Mon 11:08]
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref hl-indent
(defvar qz/lazy-last -1)
(defun qz/lazy-eyes (&optional arg)
  (interactive)
  (setq qz/lazy-last (if (> 0 qz/lazy-last) 1 -1))
  (qz/highlight-indent-toggle-responsive qz/lazy-last)
  (global-hl-line-mode qz/lazy-last))
#+end_src

#+RESULTS:
: qz/lazy-eyes

*** [[id:bdba5c2b-bcfc-429c-bd90-57aaa211de65][font]] modulation
:PROPERTIES:
:ID:       2cff5044-7e96-4b0b-89a1-7e2ede2e88cc
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** save load-time font size :var:func:
:PROPERTIES:
:ID:       9ecb735e-9bda-4cf1-9460-738a543733e3
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

this is useful for when we switch to the single-frame font-size, but
we want to restore after, respecting the initial font-size

#+begin_src emacs-lisp :noweb-ref conf
(defvar qz/font-initial-size (face-attribute 'default :height))
(defvar qz/resize-mini-windows-initial resize-mini-windows)
(defvar qz/max-mini-window-height-initial max-mini-window-height)

(defun qz/reset-visual-initial ()
  (interactive)
  (set-face-attribute 'default nil :height qz/font-initial-size)
  (setq resize-mini-windows    qz/resize-mini-windows-initial
        max-mini-window-height qz/max-mini-window-height-initial))
#+end_src

#+RESULTS:
: qz/reset-visual-initial

**** set font as big enough for comfy casual 80char emacs use       :func:
:PROPERTIES:
:ID:       1758a068-1047-431b-915b-7cbf718d32ba
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:

#+begin_src emacs-lisp :noweb-ref conf
(defun qz/font-big-80 ()
  (interactive)
  (set-face-attribute 'default nil :height 300)
  (setq resize-mini-windows t
        max-mini-window-height nil))
#+end_src

#+RESULTS:
: qz/font-big-80
*** unsplash
:PROPERTIES:
:ID:       ff5be022-1750-4ca6-800f-af738c52bc3d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
#+begin_src emacs-lisp :noweb-ref conf
(defvar qz/unsplash-tags nil)
(defun qz/unsplash ()
  "yet another lazy shell-command wrapper; wallpaper edition"
  (interactive)
  (let ((tag (read-from-minibuffer
              "unsplash tags: " (car qz/unsplash-tags))))
    (async-shell-command
     (format "TAGS='%s'
mv \"$XDG_CACHE_HOME/wallpaper.png\" \"$XDG_CACHE_HOME/$(date +%%Y-%%m-%%d--%%H-%%M-%%S)-wallpaper.png\"
curl -L \"https://source.unsplash.com/5120x1440?$TAGS\" -o \"$XDG_CACHE_HOME/wallpaper.png\"
swaymsg output \"*\" background ~/.cache/wallpaper.png fill" tag))
    (setq qz/unsplash-tags (seq-uniq (cons tag qz/unsplash-tags)))))
#+end_src

#+RESULTS:
: qz/unsplash

** wiki
:PROPERTIES:
:ID:       de8e054e-30ff-44ce-b66e-2d420e757b51
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
*** col-highlight.el
:PROPERTIES:
:ID:       6284a4a9-70f8-487b-b4b2-140b94b70264
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-07-09 Sat 17:33]
:END:

#+begin_src emacs-lisp :tangle no
;;; col-highlight.el --- Highlight the current column.
;;
;; Filename: col-highlight.el
;; Description: Highlight the current column.
;; Author: Drew Adams
;; Maintainer: Drew Adams (concat "drew.adams" "@" "oracle" ".com")
;; Copyright (C) 2006-2018, Drew Adams, all rights reserved.
;; Created: Fri Sep 08 11:06:35 2006
;; Version: 0
;; Package-Requires: ((vline "0"))
;; Last-Updated: Mon Jan  1 10:17:48 2018 (-0800)
;;           By: dradams
;;     Update #: 446
;; URL: https://www.emacswiki.org/emacs/download/col-highlight.el
;; Doc URL: https://emacswiki.org/emacs/HighlightCurrentColumn
;; Keywords: faces, frames, emulation, highlight, cursor, accessibility
;; Compatibility: GNU Emacs: 22.x, 23.x, 24.x, 25.x, 26.x
;;
;; Features that might be required by this library:
;;
;;   `vline'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;;
;;  This library highlights the current column.  When you move the
;;  cursor, the highlighting follows (tracks the cursor), as long as
;;  the highlighting stays on.
;;
;;  Command `column-highlight-mode' toggles this highlighting on and
;;  off.
;;
;;  If you use `column-highlight-mode' twice in succession (I bind it
;;  to `C-+'), you can flash the highlighting to show you the current
;;  column temporarily.  An alternative way to flash-highlight is to
;;  use command `flash-column-highlight' (once).  It shows the
;;  highlighting for just a second or two (see option
;;  `col-highlight-period').
;;
;;  You can also have current-column highlighting come on
;;  automatically, when Emacs is idle.  Command
;;  `toggle-highlight-column-when-idle' toggles this mode.  Command
;;  `col-highlight-set-interval' changes the number of idle seconds to
;;  wait before highlighting.
;;
;;  You can use option `col-highlight-overlay-priority' to make the
;;  vline (i.e., column) highlighting appear on top of other overlay
;;  highlighting that might exist.
;;
;;  You can use option `col-highlight-show-only' to restrict
;;  current-column highlighting to a section of text of a particular
;;  kind: paragaph, sentence, page, defun, etc.
;;
;;
;;  To use this file, you must also have library `vline.el'.
;;  Put this in your Emacs init file (~/.emacs):
;;
;;    (require 'col-highlight) ; Load this file (and `vline')
;;
;;  If you want to turn on continual current-column highlighting by
;;  default, then add this to your init file:
;;
;;    (column-highlight-mode 1)
;;
;;  If you want to turn on automatic idle highlighting of the current
;;  column, then add this to your init file:
;;
;;    (toggle-highlight-column-when-idle 1)
;;
;;  If you want to use a different wait interval, before idle
;;  highlighting begins, then set it in your init file using
;;  `col-highlight-set-interval':
;;
;;    (col-highlight-set-interval 6) ; Wait 6 idle secs.
;;
;;  Note that `column-highlight-mode' is intentionally a global minor
;;  mode.  If you want a local minor mode, so that highlighting
;;  affects only a particular buffer, you can use `vline-mode' (in
;;  `vline.el').
;;
;;
;;  See also:
;;
;;  * Library `hl-line+.el', which offers the same functionality, but
;;    for the current line instead of the current column.
;;
;;  * Library `crosshairs.el', which combines the features of
;;    `col-highlight.el' and `hl-line+.el', providing a crosshair
;;    highlighting effect.  It requires `col-highlight.el' and
;;    `hl-line+.el'.
;;
;;  * Library `cursor-chg.el' or library `oneonone.el', to change the
;;    cursor type when Emacs is idle.
;;
;;  User options defined here:
;;
;;    `col-highlight-period', `column-highlight-mode',
;;    `col-highlight-overlay-priority', `col-highlight-show-only',
;;    `col-highlight-vline-face-flag'.
;;
;;  Faces defined here:
;;
;;    `col-highlight'.
;;
;;  Commands defined here:
;;
;;    `col-highlight-flash', `col-highlight-set-interval',
;;    `col-highlight-toggle-when-idle', `column-highlight-mode',
;;    `flash-column-highlight', `toggle-highlight-column-when-idle'.
;;
;;  Non-interactive functions defined here:
;;
;;    `col-highlight-highlight', `col-highlight-unhighlight'.
;;
;;  Internal variables defined here:
;;
;;    `col-highlight-face', `col-highlight-idle-interval',
;;    `col-highlight-idle-timer', `col-highlight-when-idle-p'.
;;
;;
;;  ***** NOTE: The following function defined in `vline.el' has
;;              been REDEFINED HERE:
;;
;;    `vline-show' - Respect options `col-highlight-overlay-priority'
;;                   and `col-highlight-show-only'.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Change Log:
;;
;; 2017/05/10 dadams
;;     vline-show: Wrap arg to make-string with abs.  Not a fix, but bypasses error from not
;;                 handling SPC char with display property value of (space :align-to N).
;; 2013/08/08 dadams
;;     Added: col-highlight-show-only, redefinition of vline-show.
;;     Removed defadvice of vline-show (replaced by redefinition).
;; 2012/12/25 dadams
;;     Added Package-Requires.
;; 2012/05/18 dadams
;;     Added: col-highlight-overlay-priority, defadvice of vline-show.
;; 2011/01/03 dadams
;;     Added autoload cookies for defgroup, defcustom, defface, and commands.
;; 2008/09/03 dadams
;;     col-highlight-highlight: Bind vline-current-window-only to t.
;; 2008/08/08 dadams
;;     col-highlight-(un)highlight: Added optional arg.
;; 2008/01/21 dadams
;;     Use vline.el instead of column-marker.el.
;;     Added: group column-highlight, option col-highlight-vline-face-flag.
;;     col-highlight-toggle-when-idle: col-highlight-unhighlight when turn off.
;;     col-highlight-flash: Use col-highlight-highlight, not mode.
;;     col-highlight-(un)highlight: Respect col-highlight-vline-face-flag.
;;                                  Don't highlight minibuffer.
;;     Renamed: face col-highlight-face to col-highlight.
;;     Removed semi-support for Emacs 20.
;; 2006/09/08 dadams
;;     Created.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 3, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:

(require 'vline)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;###autoload
(defgroup column-highlight nil
  "Highlight the current column."
  :prefix "col-highlight-"
  :group 'editing :group 'cursor :group 'hl-line :group 'frames
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag "Download"
                   "https://www.emacswiki.org/emacs/download/col-highlight.el"))

;;;###autoload
(defcustom col-highlight-show-only nil
  "Non-nil means `column-highlight-mode' affects only a section of text.
This affects `vline-mode' also.

The non-nil value determines the type of text section: paragraph,
sentence, defun, page...

The actual non-nil value is a forward movement command for the given
section type, e.g., `forward-paragraph', `end-of-defun'."
  :type '(choice
          (const    :tag "All text"  nil)
          (const    :tag "Paragraph" forward-paragraph)
          (const    :tag "Sentence"  forward-sentence)
          (const    :tag "Page"      forward-page)
          (const    :tag "Defun"     end-of-defun)
          (function :tag "Forward-thing function" :value forward-paragraph))
  :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-vline-face-flag t
  "*Non-nil means `column-highlight-mode' uses `col-highlight-face'.
nil means that it uses `vline-face'."
  :type 'boolean :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-period 1
  "*Number of seconds to highlight the current column."
  :type 'integer :group 'column-highlight)

;;;###autoload
(defcustom col-highlight-overlay-priority 300
  "*Priority to use for overlays in `vline-overlay-table'.
A higher priority can make the vline highlighting appear on top of
other overlays that might exist."
  :type '(choice
          (const   :tag "No priority (default priority)"  nil)
          (integer :tag "Priority"  300))
  :group 'column-highlight)

;;;###autoload
(defface col-highlight '((t (:background "SlateGray3")))
  "*Face for current-column highlighting by `column-highlight-mode'.
Not used if `col-highlight-vline-face-flag' is nil."
  :group 'column-highlight :group 'faces)

(defvar col-highlight-face 'col-highlight
  "Face used for highlighting current column.
Do NOT change this.")

(defvar col-highlight-idle-interval 5
  "Number of seconds to wait before highlighting current column.
Do NOT change this yourself to change the wait period; instead, use
`\\[col-highlight-set-interval]'.")

(defvar col-highlight-when-idle-p nil
  "Non-nil means highlight the current column whenever Emacs is idle.
Do NOT change this yourself; instead, use
`\\[toggle-highlight-column-when-idle]'.")

(defvar col-highlight-idle-timer
  (progn                              ; Cancel to prevent duplication.
    (when (boundp 'col-highlight-idle-timer)
      (cancel-timer col-highlight-idle-timer))
    (run-with-idle-timer col-highlight-idle-interval t 'col-highlight-highlight))
  "Timer used to highlight current column whenever Emacs is idle.")

;; Turn it off, by default.
;; You must use `toggle-highlight-column-when-idle' to turn it on.
(cancel-timer col-highlight-idle-timer)



;;  REPLACE ORIGINAL `vline-show' defined in `vline.el'.
;;
;;  1. Respect options `col-highlight-overlay-priority' and `col-highlight-show-only'.
;;  2. Tolerate SPC char with `display' property value (space :align-to N).
;;
(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point  (point)))
      (let* ((column           (vline-current-column))
             (lcolumn          (current-column))
             (i                0)
             (compose-p        (memq vline-style '(compose mixed)))
             (face-p           (memq vline-style '(face mixed)))
             (line-char        (if compose-p vline-line-char ?\   ))
             (line-str         (make-string 1 line-char))
             (visual-line-str  line-str)
             (in-fringe-p      (vline-into-fringe-p))
             (only-beg         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only -1)
                                          (point))
                                      (error nil))))
             (only-end         (and col-highlight-show-only
                                    (condition-case nil
                                        (save-excursion
                                          (funcall col-highlight-show-only 1)
                                          (point))
                                      (error nil)))))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str  (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not (bobp))
                    (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table)))
          (let ((cur-column   (vline-move-to-column column t))
                (cur-lcolumn  (current-column)))
            (unless (or (= (point) point) ; Non-cursor line only (eol workaround).
                        (and only-beg  only-end  (or (<= (point) only-beg)
                                                     (>= (point) only-end))))
              (when (> cur-column column)
                (let ((lcol  (current-column)))
                  (backward-char)
                  (setq cur-column  (- cur-column (- lcol (current-column))))))
              (let* ((ovr       (aref vline-overlay-table i))
                     (visual-p  (or (< lcolumn (current-column))
                                    (> lcolumn (+ (current-column)
                                                  (- column cur-column)))))
                     ;; Consider a newline, tab and wide char.
                     (str       (concat (make-string (abs (- column cur-column)) ?\  )
                                        (if visual-p visual-line-str line-str)))
                     (char      (char-after)))
                (unless ovr
                  (setq ovr  (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window (and vline-current-window-only  (selected-window)))
                (cond ((memq char vline-multiwidth-space-list) ; Multiwidth space
                       (setq str  (concat str (make-string (- (save-excursion (forward-char)
                                                                              (current-column))
                                                              (current-column)
                                                              (string-width str))
                                                           ?\  )))
                       (move-overlay ovr (point) (1+ (point)))
                       (overlay-put ovr 'invisible t)
                       (overlay-put ovr 'after-string str))
                      ((eolp)
                       (move-overlay ovr (point) (point))
                       (overlay-put ovr 'after-string str)
                       (when (and (not truncate-lines) ; Do not expand more than window width.
                                  (>= (1+ column) (window-width))
                                  (>= column (vline-current-column))
                                  (not (vline-into-fringe-p)))
                         (delete-overlay ovr)))
                      (t
                       (cond (compose-p
                              (let (str)
                                (when char
                                  (setq str  (compose-chars char
                                                            (cond ((= (char-width char) 1)
                                                                   '(tc . tc))
                                                                  ((= cur-column column)
                                                                   '(tc . tr))
                                                                  (t
                                                                   '(tc . tl)))
                                                            line-char))
                                  (when face-p
                                    (setq str  (propertize str 'face (vline-face visual-p))))
                                  (move-overlay ovr (point) (1+ (point)))
                                  (overlay-put ovr 'invisible t)
                                  (overlay-put ovr 'after-string str))))
                             (face-p
                              (move-overlay ovr (point) (1+ (point)))
                              (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i  (1+ i))
            (vline-forward -1))))))
  (mapc (lambda (ov) (when (overlayp ov) ; Set overlay priority to `col-highlight-overlay-priority'.
                       (overlay-put ov 'priority col-highlight-overlay-priority)))
        vline-overlay-table))

;;;###autoload
(define-minor-mode column-highlight-mode
  "Toggle highlighting the current column.
With ARG, turn column highlighting on if and only if ARG is positive.

Column-Highlight mode uses the functions
`col-highlight-unhighlight' and `col-highlight-highlight'
on `pre-command-hook' and `post-command-hook'."
  :init-value nil :global t :group 'column-highlight
  :link `(url-link :tag "Send Bug Report"
                   ,(concat "mailto:" "drew.adams" "@" "oracle" ".com?subject=\
col-highlight.el bug: \
&body=Describe bug here, starting with `emacs -q'.  \
Don't forget to mention your Emacs and library versions."))
  :link '(url-link :tag "Other Libraries by Drew"
                   "https://www.emacswiki.org/emacs/DrewsElispLibraries")
  :link '(url-link :tag
                   "Download" "https://www.emacswiki.org/emacs/download/col-highlight.el")
  :link '(url-link :tag "Description"
                   "https://www.emacswiki.org/emacs/ChangingCursorDynamically")
  :link '(emacs-commentary-link :tag "Commentary" "col-highlight")
  (cond (column-highlight-mode
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (add-hook 'post-command-hook 'col-highlight-highlight))
        (t
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (remove-hook 'post-command-hook 'col-highlight-highlight))))

;;;###autoload
(defalias 'toggle-highlight-column-when-idle 'col-highlight-toggle-when-idle)
;;;###autoload
(defun col-highlight-toggle-when-idle (&optional arg)
  "Turn on or off highlighting the current column when Emacs is idle.
With prefix argument, turn on if ARG > 0; else turn off."
  (interactive "P")
  (setq col-highlight-when-idle-p  (if arg
                                       (> (prefix-numeric-value arg) 0)
                                     (not col-highlight-when-idle-p)))
  (cond (col-highlight-when-idle-p
         (timer-activate-when-idle col-highlight-idle-timer)
         (add-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned ON highlighting current column when Emacs is idle."))
        (t
         (cancel-timer col-highlight-idle-timer)
         (col-highlight-unhighlight)
         (remove-hook 'pre-command-hook 'col-highlight-unhighlight)
         (message "Turned OFF highlighting current column when Emacs is idle."))))

;;;###autoload
(defun col-highlight-set-interval (n)
  "Set the delay before highlighting current column when Emacs is idle.
Whenever Emacs has been idle for N seconds, the current column is
highlighted using the face that is the value of variable
`col-highlight-face'.

To turn on or off automatically highlighting the current column
when Emacs is idle, use `\\[toggle-highlight-column-when-idle]."
  (interactive
   "nSeconds to idle, before highlighting current column: ")
  (timer-set-idle-time col-highlight-idle-timer
                       (setq col-highlight-idle-interval  n)
                       t))

;;;###autoload
(defalias 'flash-column-highlight 'col-highlight-flash)
;;;###autoload
(defun col-highlight-flash (&optional arg)
  "Highlight the current column for `col-highlight-period' seconds.
With a prefix ARG, highlight for that many seconds."
  (interactive)
  (col-highlight-highlight)
  (let ((column-period  col-highlight-period))
    (when current-prefix-arg
      (setq column-period  (prefix-numeric-value current-prefix-arg)))
    (run-at-time column-period nil 'col-highlight-unhighlight)))

(defun col-highlight-highlight (&optional minibuffer-also-p)
  "Highlight current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (let ((vline-current-window-only  t))
      (if col-highlight-vline-face-flag
          (let ((vline-style  'face)
                (vline-face   col-highlight-face))
            (vline-show))
        (vline-show)))))

(defun col-highlight-unhighlight (&optional minibuffer-also-p)
  "Turn off highlighting of current column.
This has no effect in the minibuffer, unless optional arg
MINIBUFFER-ALSO-P is non-nil."
  (unless (and (minibufferp)  (not minibuffer-also-p))
    (if col-highlight-vline-face-flag
        (let ((vline-style  'face)
              (vline-face   col-highlight-face))
          (vline-clear))
      (vline-clear))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'col-highlight)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; col-highlight.el ends here
#+end_src

#+RESULTS:
: col-highlight

*** vline.el
:PROPERTIES:
:ID:       bb42ed82-562f-4d92-9a60-3a524b82283d
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-22 Fri 12:10]
:END:
#+begin_src emacs-lisp :tangle no
;;; vline.el --- show vertical line (column highlighting) mode.

;; Copyright (C) 2002, 2008-2012 by Taiki SUGAWARA <buzz.taiki@gmail.com>

;; Author: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Maintainer: Taiki SUGAWARA <buzz.taiki@gmail.com>
;; Keywords: faces, editing, emulating
;; Version: 1.11
;; Time-stamp: <2012-01-08 12:40:18 UTC taiki>
;; URL: http://www.emacswiki.org/cgi-bin/wiki/vline.el
;; URL: http://bitbucket.org/buzztaiki/elisp/src/tip/vline.el

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; This file is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
;; Boston, MA 02110-1301, USA.

;;; Commentary:

;; put followings your .emacs
;;   (require 'vline)
;;
;; if you display a vertical line, type M-x vline-mode.  `vline-mode' doesn't
;; effect other buffers, because it is a buffer local minor mode.  if you hide
;; a vertical line, type M-x vline-mode again.
;;
;; if you display a vertical line in all buffers, type M-x vline-global-mode.
;;
;; `vline-style' provides a display style of vertical line.  see
;; `vline-style' docstring.
;;
;; if you don't want to visual line highlighting (ex.  for performance
;; issue), please to set `vline-visual' to nil.
;;
;; if you don't want to use timer (ex.  you want to highlight column
;; during moving cursors), please to set `vline-use-timer' to nil.

;;; Change Log:

;; 2012-01-08 taiki
;; fix for the Lint warnings.

;; 2010-02-02 taiki
;; improve performance.

;; 2009-08-26 taiki
;; support org-mode, outline-mode

;; 2009-08-18 taiki
;; add autoload cookies.

;; 2009-08-18 taiki
;; fix last line highlighting probrem.

;; 2009-08-18 taiki
;; support visual line highlighting.
;; - Added face vline-visual.
;; - Added defcustom vline-visual-face.
;; - Added defcustom vline-visual.
;;
;; 2009-08-17 taiki
;; fix continuas line problem.
;; - Don't display vline when cursor into fringe
;; - Don't expand eol more than window width.
;;
;; 2008-10-22 taiki
;; fix coding-system problem.
;; - Added vline-multiwidth-space-list
;; - Use ucs code-point for japanese fullwidth space.
;;
;; 2008-01-22 taiki
;; applied patch from Lennart Borgman
;; - Added :group 'vline
;; - Added defcustom vline-current-window-only
;; - Added header items to simplify for users

;;; TODO:
;; - track window-scroll-functions, window-size-change-functions.
;; - consider other minor modes (using {after,before}-string overlay).
;; - don't use {post,after}-command-hook for performance??

;;; Code:

(defvar vline-overlay-table-size 200)
(defvar vline-overlay-table (make-vector vline-overlay-table-size nil))
(defvar vline-line-char ?|)
(defvar vline-multiwidth-space-list
  (list
   ?\t
   (decode-char 'ucs #x3000)            ; japanese fullwidth space
   ))
(defvar vline-timer nil)

(defcustom vline-style 'face
  "This variable holds vertical line display style.
Available values are followings:
`face'      : use face.
`compose'   : use composit char.
`mixed'     : use face and composit char."
  :type '(radio
          (const face)
          (const compose)
          (const mixed))
  :group 'vline)


(defface vline
  '((t (:background "light steel blue")))
  "A default face for vertical line highlighting."
  :group 'vline)

(defface vline-visual
  '((t (:background "gray90")))
  "A default face for vertical line highlighting in visual lines."
  :group 'vline)

(defcustom vline-face 'vline
  "A face for vertical line highlighting."
  :type 'face
  :group 'vline)

(defcustom vline-visual-face 'vline-visual
  "A face for vertical line highlighting in visual lines."
  :type 'face
  :group 'vline)

(defcustom vline-current-window-only nil
  "If non-nil then highlight column in current window only.
If the buffer is shown in several windows then highlight column only
in the currently selected window."
  :type 'boolean
  :group 'vline)

(defcustom vline-visual t
  "If non-nil then highlight column in visual lines.
If you specified `force' then use force visual line highlighting even
if `truncate-lines' is non-nil."
  :type '(radio
          (const nil)
          (const t)
          (const force))
  :group 'vline)

(defcustom vline-use-timer t
  "If non-nil, use idle timer instead of (post|after)-command-hook."
  :type 'boolean
  :group 'vline)

(defcustom vline-idle-time 0.02
  "Idle time for highlighting column."
  :type 'number
  :group 'vline)

;;;###autoload
(define-minor-mode vline-mode
  "Display vertical line mode."
  :global nil
  :lighter " VL"
  :group 'vline
  (if vline-mode
      (progn
        (add-hook 'pre-command-hook 'vline-pre-command-hook nil t)
        (if vline-use-timer
            (vline-set-timer)
          (add-hook 'post-command-hook 'vline-post-command-hook nil t)))
    (vline-cancel-timer)
    (vline-clear)
    (remove-hook 'pre-command-hook 'vline-pre-command-hook t)
    (remove-hook 'post-command-hook 'vline-post-command-hook t)))

;;;###autoload
(define-global-minor-mode vline-global-mode
  vline-mode
  (lambda ()
    (unless (minibufferp)
      (vline-mode 1)))
  :group 'vline)

(defun vline-pre-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-clear)))

(defun vline-post-command-hook ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-set-timer ()
  (setq vline-timer
        (run-with-idle-timer
         vline-idle-time t 'vline-timer-callback)))

(defun vline-cancel-timer ()
  (when (timerp vline-timer)
    (cancel-timer vline-timer)))

(defun vline-timer-callback ()
  (when (and vline-mode (not (minibufferp)))
    (vline-show)))

(defun vline-clear ()
  (mapcar (lambda (ovr)
            (and ovr (delete-overlay ovr)))
          vline-overlay-table))

(defsubst vline-into-fringe-p ()
  (eq (nth 1 (posn-at-point)) 'right-fringe))

(defsubst vline-visual-p ()
  (or (eq vline-visual 'force)
      (and (not truncate-lines)
           vline-visual)))

(defsubst vline-current-column ()
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (1+ (current-column)) (window-width)))
      (current-column)
    ;; hmm.. posn-at-point is not consider tab width.
    (- (current-column)
       (save-excursion
         (vertical-motion 0)
         (current-column)))))

(defsubst vline-move-to-column (col &optional bol-p)
  (if (or (not (vline-visual-p))
          ;; margin for full-width char
          (< (1+ (current-column)) (window-width)))
      (move-to-column col)
    (unless bol-p
      (vertical-motion 0))
    (let ((bol-col (current-column)))
      (- (move-to-column (+ bol-col col))
         bol-col))))

(defsubst vline-invisible-p (pos)
  (let ((inv (get-char-property pos 'invisible)))
    (and inv
         (or (eq buffer-invisibility-spec t)
             (memq inv buffer-invisibility-spec)
             (assq inv buffer-invisibility-spec)))))

(defsubst vline-forward (n)
  (unless (memq n '(-1 0 1))
    (error "n(%s) must be 0 or 1" n))
  (if (not (vline-visual-p))
      (progn
        (forward-line n)
        ;; take care of org-mode, outline-mode
        (when (and (not (bobp))
                   (vline-invisible-p (1- (point))))
          (goto-char (1- (point))))
        (when (vline-invisible-p (point))
          (if (< n 0)
              (while (and (not (bobp)) (vline-invisible-p (point)))
                (goto-char (previous-char-property-change (point))))
            (while (and (not (bobp)) (vline-invisible-p (point)))
              (goto-char (next-char-property-change (point))))
            (forward-line 1))))
    (vertical-motion n)))

(defun vline-face (visual-p)
  (if visual-p
      vline-visual-face
    vline-face))

(defun vline-show (&optional point)
  (vline-clear)
  (save-window-excursion
    (save-excursion
      (if point
          (goto-char point)
        (setq point (point)))
      (let* ((column (vline-current-column))
             (lcolumn (current-column))
             (i 0)
             (compose-p (memq vline-style '(compose mixed)))
             (face-p (memq vline-style '(face mixed)))
             (line-char (if compose-p vline-line-char ? ))
             (line-str (make-string 1 line-char))
             (visual-line-str line-str)
             (in-fringe-p (vline-into-fringe-p)))
        (when face-p
          (setq line-str (propertize line-str 'face (vline-face nil)))
          (setq visual-line-str (propertize visual-line-str 'face (vline-face t))))
        (goto-char (window-end nil t))
        (vline-forward 0)
        (while (and (not in-fringe-p)
                    (< i (window-height))
                    (< i (length vline-overlay-table))
                    (not (bobp)))
          (let ((cur-column (vline-move-to-column column t))
                (cur-lcolumn (current-column)))
            ;; non-cursor line only (workaround of eol probrem.
            (unless (= (point) point)
              ;; if column over the cursor's column (when tab or wide char is appered.
              (when (> cur-column column)
                (let ((lcol (current-column)))
                  (backward-char)
                  (setq cur-column (- cur-column (- lcol (current-column))))))
              (let* ((ovr (aref vline-overlay-table i))
                     (visual-p (or (< lcolumn (current-column))
                                   (> lcolumn (+ (current-column)
                                                 (- column cur-column)))))
                     ;; consider a newline, tab and wide char.
                     (str (concat (make-string (- column cur-column) ? )
                                  (if visual-p visual-line-str line-str)))
                     (char (char-after)))
                ;; create overlay if not found.
                (unless ovr
                  (setq ovr (make-overlay 0 0))
                  (overlay-put ovr 'rear-nonsticky t)
                  (aset vline-overlay-table i ovr))

                ;; initialize overlay.
                (overlay-put ovr 'face nil)
                (overlay-put ovr 'before-string nil)
                (overlay-put ovr 'after-string nil)
                (overlay-put ovr 'invisible nil)
                (overlay-put ovr 'window
                             (if vline-current-window-only
                                 (selected-window)
                               nil))

                (cond
                 ;; multiwidth space
                 ((memq char vline-multiwidth-space-list)
                  (setq str
                        (concat str
                                (make-string (- (save-excursion (forward-char)
                                                                (current-column))
                                                (current-column)
                                                (string-width str))
                                             ? )))
                  (move-overlay ovr (point) (1+ (point)))
                  (overlay-put ovr 'invisible t)
                  (overlay-put ovr 'after-string str))
                 ;; eol
                 ((eolp)
                  (move-overlay ovr (point) (point))
                  (overlay-put ovr 'after-string str)
                  ;; don't expand eol more than window width
                  (when (and (not truncate-lines)
                             (>= (1+ column) (window-width))
                             (>= column (vline-current-column))
                             (not (vline-into-fringe-p)))
                    (delete-overlay ovr)))
                 (t
                  (cond
                   (compose-p
                    (let (str)
                      (when char
                        (setq str (compose-chars
                                   char
                                   (cond ((= (char-width char) 1)
                                          '(tc . tc))
                                         ((= cur-column column)
                                          '(tc . tr))
                                         (t
                                          '(tc . tl)))
                                   line-char))
                        (when face-p
                          (setq str (propertize str 'face (vline-face visual-p))))
                        (move-overlay ovr (point) (1+ (point)))
                        (overlay-put ovr 'invisible t)
                        (overlay-put ovr 'after-string str))))
                   (face-p
                    (move-overlay ovr (point) (1+ (point)))
                    (overlay-put ovr 'face (vline-face visual-p))))))))
            (setq i (1+ i))
            (vline-forward -1)))))))

(provide 'vline)

;;; Local Variables:
;;; time-stamp-format: "%:y-%02m-%02d %02H:%02M:%02S %Z %u"
;;; time-stamp-line-limit: 16
;;; End:

;;; vline.el ends here
#+end_src

#+RESULTS:
: vline

*** ol-man.el
:PROPERTIES:
:ID:       03e99cd2-5275-4b44-9b9a-137a84156826
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
- source :: https://orgmode.org/manual/Adding-Hyperlink-Types.html

an [[id:6baf4bff-d5fe-4ce0-a130-0464e49de67d][org-mode]] extension for a new link backend targeting manpages

**** TODO [[id:cfcecb80-bcde-4c1d-a4fd-8a55eb5e5f20][deep link]] (content-based) encode line for context & regexp jump
:PROPERTIES:
:ID:       dc7a1ca8-9d36-4cfb-ada5-ef2040394b62
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:END:
**** source
:PROPERTIES:
:ID:       8f2b6e70-b945-4021-bd88-429891641d8e
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  [2022-04-11 Mon 18:50]
:END:
#+begin_src emacs-lisp
;;; ol-man.el - Support for links to man pages in Org mode
(require 'ol)

(org-link-set-parameters "man"
                         :follow 'org-man-open
                         :export 'org-man-export
                         :store  'org-man-store-link)

(defcustom org-man-command 'man
  "The Emacs command to be used to display a man page."
  :group 'org-link
  :type '(choice (const man) (const woman)))

(defun org-man-open (path _)
  "Visit the manpage on PATH.
PATH should be a topic that can be thrown at the man command."
  (funcall org-man-command path))

(defun org-man-store-link ()
  "Store a link to a man page."
  (when (memq major-mode '(Man-mode woman-mode))
    ;; This is a man page, we do make this link.
    (let* ((page (org-man-get-page-name))
           (link (concat "man:" page))
           (description (format "Man page for %s" page)))
      (org-link-store-props
       :type "man"
       :link link
       :description description))))

(defun org-man-get-page-name ()
  "Extract the page name from the buffer name."
  ;; This works for both `Man-mode' and `woman-mode'.
  (if (string-match " \\(\\S-+\\)\\*" (buffer-name))
      (match-string 1 (buffer-name))
    (error "Cannot create link to this man page")))

(defun org-man-export (link description format _)
  "Export a man page link from Org files."
  (let ((path (format "http://man.he.net/?topic=%s&section=all" link))
        (desc (or description link)))
    (pcase format
      (`html (format "<a target=\"_blank\" href=\"%s\">%s</a>" path desc))
      (`latex (format "\\href{%s}{%s}" path desc))
      (`texinfo (format "@uref{%s,%s}" path desc))
      (`ascii (format "%s (%s)" desc path))
      (t path))))

(provide 'ol-man)
;;; ol-man.el ends here
#+end_src

#+RESULTS:
: ol-man

* Footnotes
:PROPERTIES:
:ID:       476ef762-1350-4afa-a8ad-2cd3e42eb730
:CREATED:  <2022-02-22 Tue 15:27>
:ROAM_EXCLUDE: t
:UPDATED:  <2022-03-11 Fri 14:43>
:END:

[fn:2] example for how =:var= header args are dealt with in an
=org-babel-execute:backend= situation
#+begin_src emacs-lisp :tangle no
(defun org-babel-execute:restclient (body params)
  "Execute a block of Restclient code with org-babel.
This function is called by `org-babel-execute-src-block'"
  (message "executing Restclient source code block")
  (with-temp-buffer
    (let ((results-buffer (current-buffer))
          (restclient-same-buffer-response t)
          (restclient-same-buffer-response-name (buffer-name))
          (display-buffer-alist
           (cons
            '("\\*temp\\*" display-buffer-no-window (allow-no-window . t))
            display-buffer-alist)))

      (insert (buffer-name))
      (with-temp-buffer
        (dolist (p params)
          (let ((key (car p))
                (value (cdr p)))
            (when (eql key :var)
              (insert (format ":%s = <<\n%s\n#\n" (car value) (cdr value))))))
        (insert body)
        (goto-char (point-min))
        (delete-trailing-whitespace)
        (goto-char (point-min))
        (restclient-http-parse-current-and-do
         'restclient-http-do (org-babel-restclient--raw-payload-p params) t))

      (while restclient-within-call
        (sleep-for 0.05))

      (goto-char (point-min))
      (when (equal (buffer-name) (buffer-string))
        (error "Restclient encountered an error"))

      (when (or (org-babel-restclient--return-pure-payload-result-p params)
                (assq :noheaders params)
                (assq :jq params))
        (org-babel-restclient--hide-headers))

       (when-let* ((jq-header (assoc :jq params))
                  (jq-path "jq"))
        (shell-command-on-region
         (point-min)
         (point-max)
         (format "%s %s" org-babel-restclient--jq-path
                         (shell-quote-argument (cdr jq-header)))
         (current-buffer)
         t))

       ;; widen if jq but not pure payload
      (when (and (assq :jq params)
                 (not (assq :noheaders params))
                 (not (org-babel-restclient--return-pure-payload-result-p params)))
        (widen))

      (when (not (org-babel-restclient--return-pure-payload-result-p params))
        (org-babel-restclient--wrap-result))

      (buffer-string))))
#+end_src
[fn:1] capture template as an interactive function so we can use it as
a COMMAND, and consequently, bind it to a key--better traceability
than a lambda
